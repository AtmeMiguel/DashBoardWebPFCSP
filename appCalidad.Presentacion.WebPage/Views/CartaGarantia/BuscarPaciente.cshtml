
@{
    string Title = "Buscador de paciente";
    ViewBag.Title = Title;
    string user = System.Configuration.ConfigurationManager.AppSettings["JWT_USUARIO"];
    string pass = System.Configuration.ConfigurationManager.AppSettings["JWT_PASSWORD"];
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
}

<div id="app">
    <div class="container">
        <br />
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-5 ">
                <div class="card-header">FILTROS</div>
                <br /><br />

                <div class="row">
                    <div class="col-6">
                        <b-form-group id="input-group-1-responsable"
                                      label="Búsqueda por afiliado:"
                                      label-for="txtresponsable"
                                      description="">
                            <b-form-input id="txtresponsable"
                                          v-model="AFILIADO"
                                          type="text"
                                          v-on:keyup="validaCampos(1)"
                                          placeholder=""></b-form-input>
                        </b-form-group>
                    </div>
                    <div class="col-6">
                        <br />
                        <center>
                            <b-button size="large" v-on:click="buscarAfiliados()" variant="warning" pill><b-avatar variant="outline-info" icon="funnel" size="2rem"></b-avatar>Buscar</b-button>
                        </center>
                    </div>
                </div>
                <div class="row" v-if="listaAfiliados.length > 0">
                    <div class="col-6">
                        <b-form-group label="Fecha inicio"
                                      label-for="txtfecini"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecini" v-model="FEC_INI"
                                               class="mb-2" :max="max" today-button reset-button
                                               @*:date-format-options="{ year: 'numeric', month: 'numeric', day: 'numeric' }"  locale="en"*@
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }" locale="es"></b-form-datepicker>
                        </b-form-group>
                    </div>
                    <div class="col-6">
                        <b-form-group label="Fecha final"
                                      label-for="txtfecfin"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecfin" v-model="FEC_FIN"
                                               locale="es" :max="max" class="mb-2" today-button reset-button
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }"></b-form-datepicker>
                        </b-form-group>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-md-12 col-lg-7 ">
                <div class="card-header">RESUMEN</div>
                <div class="text-center m-2  text-secondary ">
                    <div class="row">
                        <b-table hover :items="listaAfiliados"
                                 :current-page="currentPage"
                                 :fields="Columnas"
                                 :per-page="perPage"
                                 stacked="md"
                                 head-variant="light"
                                 responsive
                                 show-empty
                                 small
                                 @@filtered="onFiltered">
                            <template #empty="scope">
                                <h6 class="text-center">No hay filas para mostrar.</h6>
                            </template>
                            <template #cell(name)="row">
                                {{ row.value.first }} {{ row.value.last }}
                            </template>
                            <template #cell(ACCIONES)="row">
                                <b-avatar v-on:click=" COD_ASEGURADEP = row.item.COD_ASEGURADEP, elegirAfiliado(row.item, row.index, false,'individual')" title="Elegir" button icon="bookmark" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                            </template>
                        </b-table>

                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-xs-12 col-md-12"  v-if="ListarDetalle.length > 0">
                <br />
                <template>
                    <b-container fluid>
                        <b-row class="p-0">
                        </b-row>
                        <!-- User Interface controls -->
                        <b-row class="p-0">
                            <b-col lg="12" class="my-1">
                                <div class="alert alert-warning" role="alert">
                                    <strong> Cantidad de registros: {{canFilas}}</strong>, exportar a excel
                                    <b-avatar @@click="exportExcel()" title="Exportar a Excel" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                </div>
                            </b-col>
                            <b-col lg="6" class="my-1">

                            </b-col>
                        </b-row>
                        <b-row>
                            <b-table hover :items="ListarDetalle"
                                     :current-page="currentPage"
                                    :fields="Detalle"
                                     :per-page="perPage"
                                     stacked="md"
                                     head-variant="light"
                                     responsive
                                     show-empty
                                     small
                                     @@filtered="onFiltered">
                                <template #empty="scope">
                                    <h6 class="text-center">No hay filas para mostrar.</h6>
                                </template>
                                <template #cell(name)="row">
                                    {{ row.value.first }} {{ row.value.last }}
                                </template>
                            </b-table>
                        </b-row>
                        <br />

                        <!-- User Interface controls -->
                        <b-row v-if="canFilas>0">

                            <b-col sm="5" md="6" class="my-1">
                                <b-form-group label="Por Pagina"
                                              label-for="per-page-select"
                                              label-cols-sm="6"
                                              label-cols-md="4"
                                              label-cols-lg="3"
                                              label-align-sm="right"
                                              label-size="sm"
                                              class="mb-0">
                                    <b-form-select id="per-page-select"
                                                   v-model="perPage"
                                                   :options="pageOptions"
                                                   size="sm"></b-form-select>
                                </b-form-group>
                            </b-col>

                            <b-col sm="7" md="6" class="my-1">
                                <b-pagination v-model="currentPage"
                                              :total-rows="totalRows"
                                              :per-page="perPage"
                                              align="fill"
                                              size="sm"
                                              class="my-0"></b-pagination>
                            </b-col>
                        </b-row>
                    </b-container>
                </template>
            </div>
        </div>

    </div>
</div>

<script>
    const configImg = {
            headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` }
        };
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    // 15th two months prior           216
    const minDate = new Date(today)
    minDate.setMonth(minDate.getMonth() - 1)
    //minDate.setDate(15)
    // 15th in two months
    const maxDate = new Date(today)
    maxDate.setMonth(maxDate.getMonth())
    //maxDate.setDate(15)

    var app = new Vue({
                el: '#app',
        data: {
            min: minDate,
            max: maxDate,
            graficoGeneral: [],
            selected: '3',
            indicador: false,

            ID_USUARIO: '@User.Identity.Name',
            USUARIO: '@Session["Usuario"].ToString()',
            NOMBRE_USUARIO: '@Session["Nombres"].ToString()' +' '+ '@Session["Apellidos"].ToString()',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',

            ID_SEDE: '@Session["ID_SEDE"].ToString()',
            SEDE: '@Session["SEDE"].ToString()',
            ROL: '@Session["ROL"].ToString()',


            PAGINA: '@Title',
            SITE: '',
            ID: 0,
            desFiltros: '',
            canFilas: '0',
            nrofac: '',
            nroserie: '',
            FEC_INI: maxDate,
            FEC_FIN: maxDate,
            NOMBRE: '',
            ESTADO: '',
            COD_ASEGURADEP: '',
            OBSERVACION: '',
            FEC_ESTADO_INI: '',
            responsable: '',

            ACCION: '',
            TITULO: '',
            AFILIADO: '',
            NUM_CARTA: '',

            ListaSeleccionados:[],
            ListarDetalle: [],
            listaAfiliados: [],

            Lista: [],
              //  { key: 'DNROLOTE', label: 'LOTE', sortable: true, variant: 'secondary' }
            Columnas: [
                { key: 'CONTRATO', label: 'NUMCONTRATOPF' }, { key: 'ASEGURADO', label: 'PACIENTE' }, 'PLAN', 'ACCIONES', 'FEC_REGSEGURO'
                //{ key: 'DNROLOTE', label: 'LOTE' }, { key: 'DFECHA_CAB', label: 'FECHA LOTE' }, { key: 'DRESP_CAB', label: 'RESPONSABLE' }, { key: 'DFECHA', label: 'FEC. FACTURA' }, { key: 'SNROFAC', label: 'SERIE' }, { key: 'DNROFAC', label: 'CORRELATIVO' }, { key: 'MTO_TOTC', label: 'MONTO' }, 'MOTIVO', 'OBSERVACIONES', 'ACCIONES', { key: 'FLG_EST_DOC', label: 'ESTADO' }, { key: 'DFECHA_APRO', label: 'FEC MOD' },  { key: 'SELECCIONAR', label: 'Sel.'}
                //'ID', 'NUM_CARTA', 'NUM_COMNTRATOPF', 'AFILIADO', 'PLAN', 'LIM_CARTA', 'LIM_CARTA_APROBADA', 'FEC_APRO_CARTA', 'ESTADO', 'SUB_ESTADO', 'ACCIONES', 'SEDE', 'OBS_RECHAZO_CARTA', 'OBS_OBSERVA_SOL', 'OBS_OBSERVA_SOL', 'OBSERVACION',  'COBERTURA', 'DEDUCIBLE', 'COASEGURO', 'CIE10', 'DIAGNOSTICO', 'MEDICO_TRATANTE', 'MEDICO_AUDITOR_PF', 'MOTIVO_CARTA', 'AREA', 'FEC_APRO_CARTA_2', 'COMPLEJIDAD_CARTA', 'OBS_APRUEBA_SOL', 'FEC_RECHZ_CARTA', 'FEC_OBS_CARTA',  'USUARIO_APROBADOR', 'ULT_MOV', 'FEC_ULT_MOV', 'USU_ULT_MOV', 'PLAN_TRABAJO',  'FECHA_SOLICITUD', 'HORA_SOLICITUD', 'FECHA_RECIBE_SOLICITUD', 'HORA_RECIBE_SOLICITUD', 'FECHA_DEVOLUCION_SOL', 'HORA_DEVOLUCION_SOL', 'FECHA_REENVIO_SOL', 'HORA_REENVIO_SOL', 'FECHA_APRUEBA_CARTA', 'HORA_APRUEBA_CARTA', 'OBSERVACION', 'FECHA_ATENCION', 'FEC_ANULA_CARTA', 'OBS_ANULA_CARTA', 'USUARIO_ANULA', 'FECHA_SOLICITUD_MEDICO', 'MOT_CAMB_EST'
            ],
            Detalle: [
                'NUM_CARTA', 'NUMCONTRATOPF', 'AFILIADO', 'COD_ASEGURADEP', { key: 'DSC_PLAN', label: 'PLAN' }, 'DIAGNOSTICO', { key: 'DSC_MOTIVO', label: 'MOTIVO_CARTA' }, 'LIM_CARTA', 'LIM_CARTA_APROBADA', 'SEDE', 'ESTADO', { key: 'USER_APROBADOR', label: 'USUARIO_APROBADOR' }, 'FEC_REG_CARTA', 'FEC_APRO_CARTA' ],
            totalRows: 100,
            currentPage: 1,
            perPage: 25,
            pageOptions: [25, 50, 100, { value: 1000, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            graficoGeneral: [],
            myStyles: {
                height: '100px',
                width: '100%',
                position: 'relative',
            },
            infoModal: {
                id: 'info-modal',
                title: '',
                content: ''
            }
        },
        mounted() {
            this.totalRows = this.ListarDetalle.length
        },
        methods: {
            ocultarPantalla: function (form) {
                this.$bvModal.hide(form.PANTALLA);
            },
            validaCampos(item) {
                switch (item) {
                    case 1: {
                        this.AFILIADO = this.AFILIADO.toUpperCase();
                        break;
                    }

                }
                //this.validarFormulario();
            },

            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            mostrarToast(variant = null) {
                this.MensajeSistema = variant.msg;
                this.$bvToast.toast(this.MensajeSistema, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },

            exportExcel() {
                lstdocs = [];
                for (const item of this.ListarDetalle) {    // 'NUM_CARTA', 'NUMCONTRATOPF', 'AFILIADO', 'COD_ASEGURADEP', { key: 'DSC_PLAN', label: 'PLAN' }, 'DIAGNOSTICO', { key: 'DSC_MOTIVO', label: 'MOTIVO_CARTA' }, 'LIM_CARTA', 'LIM_CARTA_APROBADA', 'SEDE', { key: 'USER_APROBADOR', label: 'USUARIO_APROBADOR' }, 'FEC_REG_CARTA', 'FEC_APRO_CARTA' ],
                    lstdocs.push({
                        NUM_CARTA: item.NUM_CARTA,
                        NUMCONTRATOPF: item.NUMCONTRATOPF,
                        AFILIADO: item.AFILIADO,
                        COD_ASEGURADEP: item.COD_ASEGURADEP,
                        PLAN: item.DSC_PLAN,
                        DIAGNOSTICO: item.DIAGNOSTICO,
                        MOTIVO_CARTA: item.DSC_MOTIVO,
                        LIM_CARTA: item.LIM_CARTA,
                        LIM_CARTA_APROBADA: item.LIM_CARTA_APROBADA,
                        SEDE: item.SEDE,
                        USER_APROBADOR: item.USER_APROBADOR,
                        FEC_APRO_CARTA: item.FEC_APRO_CARTA,
                        FEC_REG_CARTA: item.FEC_REG_CARTA,
                    });
                }

                let data = XLSX.utils.json_to_sheet(lstdocs) //this.ListaDocPago)
                const workbook = XLSX.utils.book_new()
                const filename = 'CartaGarantia';  // + this.FEC_INI ;
                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename}.xls`)
            },

            onFiltered(filteredItems) {
                // Trigger pagination to update the number of buttons/pages due to filtering
                this.totalRows = filteredItems.length;
                this.currentPage = 1;
            },

            buscarAfiliados: function () {         //  alert(JSON.stringify(this.ListaMaestra));

                this.listaAfiliados = [];
                this.show = true;
                axios.post(this.SERVER_API + '/api/CartaGarantia/listaPacientes', {
                    NUM_CONTRATO: '', // '010027668',
                    NOM_PACIENTE: this.AFILIADO, //
                    NUM_DOCUMENTO: '',
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.listaAfiliados = response.data;
                       // alert(JSON.stringify(this.listaAfiliados));
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                });
            },

            elegirAfiliado: function () {         //  alert(JSON.stringify(this.ListaMaestra));

                this.ListarDetalle = [];
                this.show = true;
                axios.post(this.SERVER_API + '/api/CartaGarantia/ListarCartaAsegurado', {
                    AFILIADO: this.COD_ASEGURADEP,
                    FEC_INI: this.FEC_INI,  // '28-02-2023', //
                    FEC_FIN: this.FEC_FIN,  // '02-03-2023', //
                }, configImg
                    //, { headers: { 'parSed': this.ID_SEDE } }
                ).then(response => {
                    //detalleFiltros = 'FILTROS APLICADOS / ';
                    //detalleFiltros = detalleFiltros; // + ' Estado : ' + estadoDoc + ' / ';
                    //this.desFiltros = detalleFiltros;
                    if (response.data.length > 0) {
                        this.ListarDetalle = response.data;
                        let valorLA = 0; let valor = 0;
                        for (var z in this.ListarDetalle) {
                            if (this.ListarDetalle[z].ESTADO == 'APROBADO') {
                                let montoLA = `${this.ListarDetalle[z].LIM_CARTA_APROBADA}`;
                                let monto = `${this.ListarDetalle[z].LIM_CARTA}`;
                                valorLA = (parseFloat(valorLA) + parseFloat(montoLA)).toFixed(2);
                                valor = (parseFloat(valor) + parseFloat(monto)).toFixed(2);
                            }
                        }
                        this.ListarDetalle.push({ DSC_MOTIVO: 'Total: -->', LIM_CARTA: valor, LIM_CARTA_APROBADA: valorLA });
                        //alert(valore);
                    }
                    this.totalRows = this.ListarDetalle.length;
                    this.canFilas = this.totalRows;
                    this.indicador = false;
                    this.show = false;
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });

            },

        }
    })
    //app.listarDocPago({ ESTADO: '1' });

</script>







