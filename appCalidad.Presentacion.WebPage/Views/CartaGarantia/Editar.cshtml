@{ string Title = "CARTA DE GARANTÍA";
    ViewBag.Title = Title;
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
    string webServidor = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];

}

<div id="app">
    <div class="containerClaro">
        <br />
        <b-overlay :show="show" rounded="lg">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-lg-12" v-if="ID == 0">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card redondoCardLight   shadow-lg">
                                <div class="card-body">
                                    <div class="row colorSanPablo">
                                        <div class="col-sm-8 col-md-8 col-lg-8">
                                            <div class="card-title  text-left text-white">
                                                <br /><h3>Gráfico de avance</h3>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 col-md-4 col-lg-4">
                                            <div class="card-title  text-right text-white">
                                                <br /><span> <b-avatar button icon="bar-chart" size="3rem" variant="light"></b-avatar></span>
                                            </div>
                                        </div>
                                    </div>

                                    <h4 class="text-center">(semanal)</h4>
                                    <br />
                                    <template>
                                        <bar-chart :data="graficoAvance"></bar-chart>
                                    </template>
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12 col-lg-9">
                            <div class="card redondoCardLight   shadow-lg">
                                <div class="card-body">

                                    <div class="row colorSanPablo">
                                        <div class="col-sm-8 col-md-8 col-lg-8">
                                            <div class="card-title  text-left text-white">
                                                <br /><h3>
                                                    REGISTRO DE CARTA DE GARANTÍA
                                                </h3>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 col-md-4 col-lg-4">
                                            <div class="card-title  text-right text-white">
                                                <br /><span> <b-avatar button icon="alarm" size="3rem" variant="light"></b-avatar></span><span>&nbsp;&nbsp;&nbsp;Tiempo: {{min}} : {{sec}}</span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-6 col-md-6 col-lg-6">
                                            <br /><br /><br /><br />
                                            <template v-if="ListaGeneral.length>0">
                                                <template v-for="item in ListaGeneral">
                                                    <div class="row">
                                                        <div class="col-lg-6 text-center">
                                                            <b-avatar button icon="tags" variant="danger" title="Pendiente" class="align-center" size="4em"></b-avatar><br />Pendiente<br /><h4 class="align-center">{{item.PENDIENTE}}</h4>
                                                        </div>
                                                        <div class="col-lg-6 text-center">
                                                            <template v-if="ID_SEDE==7">
                                                                <b-avatar button icon="tags" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar>
                                                                <br />En proceso
                                                                <br />
                                                                <h4 class="align-center">{{item.PROCESO}}</h4>
                                                            </template>
                                                            <template v-else="ID_SEDE==7">
                                                                <b-avatar button icon="tags" v-on:click="pantalla({PANTALLA:'graficoEstudios'})" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar>
                                                                <br />En proceso
                                                                <br />
                                                                <h4 class="align-center">{{item.PROCESO}}</h4>
                                                            </template>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <br />
                                                    <br />
                                                    <h4 class="text-center">Detalle de casos por Grupo</h4>
                                                    <br />
                                                    <br />
                                                    <div class="row" v-for="e in item.ESTUDIOS">
                                                        <div class="col-lg-12 text-left">
                                                            <span><b-avatar button icon="diagram-3" variant="info" title="Pendiente" class="align-center" size="2em"></b-avatar>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="align-center">{{e.ESTUDIO}} - {{e.GRAFICA}}</span></span><br />
                                                        </div>
                                                    </div>
                                                </template>
                                            </template>
                                            <template v-else="ListaGeneral.length>0">
                                                <div class="row" v-if="ListaProceso.length>0">
                                                    <div class="col-lg-6 text-center">

                                                    </div>
                                                    <div class="col-lg-6 text-center">
                                                        <template>
                                                            <b-avatar button icon="tags" v-on:click="pantalla({PANTALLA:'graficoEstudios'})" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar>
                                                            <br />En proceso
                                                            <br />
                                                            <h4 class="align-center">?</h4>
                                                        </template>
                                                    </div>
                                                </div>
                                                <hr />
                                                <br />
                                                <br />
                                                <h4 class="text-center"></h4>
                                                <br />
                                                <br />

                                            </template>

                                        </div>
                                        <div class="col-sm-6 col-md-6 col-lg-6">
                                            <br /><br /><br /><br /><br /><br />
                                            <h2>Bienvenido</h2>
                                            <br />
                                            <p>Tus talentos y habilidades irán mejorando con el tiempo, pero para eso has de empezar</p><br /><br />

                                            <div class="col-sm-6 col-md-10 col-lg-10 text-right">
                                                <template v-for="item in ListaGeneral">
                                                    <templat v-if="item.PENDIENTE > 0 || item.PROCESO > 0">
                                                        <b-button v-on:click="INICIO=0, iniciar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: 0 } )" variant="outline-info" pill><b-avatar variant="outline-info" icon="power" size="2rem"></b-avatar>Iniciar</b-button>
                                                </template>
                                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b-button v-on:click="agregarLista({ ID: 0, ID_SOURCE: 0, ID_GRUPO: 0 })" variant="outline-info" pill><b-avatar variant="outline-info" icon="plus-circle" size="2rem"></b-avatar>Nuevo</b-button>

                                            </div>
                                        </div>
                                    </div>


                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xs-12 col-sm-12 col-lg-12" v-else="ID == 0">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="card redondoCardLight  shadow-lg">
                                <div class="card-body reDimBox">
                                    <div class="row colorSanPablo">
                                        <div class="col-sm-12 col-md-12 col-lg-12">
                                            <div class="card-title  text-left text-white ">
                                                <br /><h3>N° Carta: {{NUM_CARTA}}</h3>
                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <template v-if="CONTRATO==''">
                                        <b-card no-body>
                                            <b-tabs pills card vertical>
                                                <b-tab title="N° Contrato" active>
                                                    <div class="row">
                                                        <div class="col-12"><br /><b-form-input v-model="TEXTO_BUSQUEDA" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input></div>
                                                        <div class="col-12 text-right"><b-avatar button v-on:click="buscarPaciente({COMODIN: TEXTO_BUSQUEDA, TIPO: 1})" icon="search" size="3rem" variant="light"></b-avatar></div>
                                                    </div>
                                                </b-tab>
                                                <b-tab title="Doc. Identidad">
                                                    <div class="row">
                                                        <div class="col-12"><br /><b-form-input v-model="TEXTO_BUSQUEDA" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input></div>
                                                        <div class="col-12 text-right"><b-avatar button v-on:click="buscarPaciente({COMODIN: TEXTO_BUSQUEDA, TIPO: 2})" icon="search" size="3rem" variant="light"></b-avatar></div>
                                                    </div>
                                                </b-tab>
                                                <b-tab title="Paciente">
                                                    <div class="row">
                                                        <div class="col-12"><br /><b-form-input v-model="TEXTO_BUSQUEDA" v-on:keyup="validaCampos(1)" placeholder="Ingresar letras"></b-form-input></div>
                                                        <div class="col-12 text-right"><b-avatar button v-on:click="buscarPaciente({COMODIN: TEXTO_BUSQUEDA, TIPO: 3})" icon="search" size="3rem" variant="light"></b-avatar></div>
                                                    </div>
                                                </b-tab>
                                            </b-tabs>
                                        </b-card>
                                    </template>

                                    <template v-if="CONTRATO!=''">
                                        <div class="row">
                                            <div class="col-12 text-center">
                                                <span><b>{{ASEGURADO}}</b></span><br />
                                                <span class="text-black-50" style="font-size:11px; ">Cod. Asegurado:{{COD_ASEGURADEP}}</span>
                                            </div>
                                        </div>
                                        <br />
                                        <span>Contratante: {{CONTRATANTE}}</span>
                                        <br />
                                        <span>Titular: {{TITULAR}}</span>
                                        <br />
                                        <span>N° Documento: {{NRO_DOCUMENTO}}</span>
                                        <br />
                                        <span>Promotor: {{PROMOTOR}}</span>
                                        <br />
                                        <br />
                                        <div class="row">
                                            <div class="col-7 text-left">
                                                <span>N° Contrato: <b>{{CONTRATO}}</b></span><br />
                                                <span class="text-black-50" style="font-size:11px;">Fecha vigencia: {{FEC_INIVIGSEG}}</span>
                                                <span class="text-black-50" style="font-size:11px;">Fecha registro: {{FEC_REGSEGURO}}</span>
                                            </div>
                                            <div class="col-5 text-right"><b-button pill variant="light" v-on:click="limpiarAfiliado()">{{PLAN}}</b-button></div>
                                        </div>
                                        <hr />
                                        <div class="row">
                                            <div class="col-xs-12 col-md-6 col-lg-12 cajaTexto">
                                                <span class="text-black-50 text-sm-right">Fecha de Orden<b-badge v-if="FEC_HOSPITAL.length<4" pill variant="danger">!</b-badge></span><br />
                                                <b-form-datepicker id="datepicker-invalid" v-model="FEC_HOSPITAL"
                                                                   :max="max" locale="es" class="mb-2"
                                                                   :show-decade-nav="false" :hide-header="false"
                                                                   :date-format-options="{ year: 'numeric', month: 'short', day: '2-digit', weekday: 'short' }"></b-form-datepicker>
                                            </div>
                                            <div class="col-xs-12 col-md-6 col-lg-12 cajaTexto">
                                                <span class="text-black-50 text-sm-right">Fecha Registro<b-badge v-if="FEC_REG_CARTA.length<4" pill variant="danger">!</b-badge></span><br />
                                                <b-form-datepicker id="datepicker-invalid2" v-model="FEC_REG_CARTA"
                                                                   :max="max" locale="es" class="mb-2" readonly
                                                                   :show-decade-nav="false" :hide-header="false"
                                                                   :date-format-options="{ year: 'numeric', month: 'short', day: '2-digit', weekday: 'short' }"></b-form-datepicker>
                                            </div>
                                            <div class="col-xs-12 col-md-6 col-lg-12 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Área<b-badge v-if="AREA =='SELECCIONAR'" pill variant="danger">!</b-badge></span> <br />
                                                <b-form-select v-model="AREA" class="cajaTexto2">
                                                    <template #first>
                                                        <b-form-select-option v-model="SELECCIONAR" value="null" disabled>SELECCIONAR</b-form-select-option>
                                                    </template>
                                                    <b-form-select-option v-for="i in ListaArea" :key="i.ID" :value="i.TITULO">{{i.TITULO}}</b-form-select-option>
                                                </b-form-select>
                                            </div>
                                        </div>
                                        <br />
                                        <div class="row">
                                            <div class="col-xs-12 col-md-12 col-lg-12 cajaTexto text-right text-info" style="padding-top:0.7rem;" v-if="listaCoberturasAgregadas.length==0">
                                                Agregar una cobertura&nbsp;&nbsp;&nbsp;<b-avatar button v-on:click="COBERTURA='', listarCoberturas()" title="Elegir para ver la lista de coberturas" icon="search" size="2.0rem" variant="info"></b-avatar>
                                            </div>
                                            <template>
                                                <div class="accordion" role="tablist">
                                                    <b-card no-body class="mb-1" v-for="(ii, index) in listaCoberturasAgregadas">
                                                        <b-card-header header-tag="header" class="p-1">
                                                            <b-button block v-b-toggle.accordion-1 class="colorSanPablo"><b-icon icon="trash" font-scale="1.3" variant="ligth" v-on:click="eliminarCoberturaAgregada({ID: ii.ID})"></b-icon>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {{ii.COBERTURA}}</b-button>
                                                        </b-card-header>
                                                        <b-collapse id="accordion-1" visible accordion="my-accordion" role="tabpanel">
                                                            <b-card-body>
                                                                <b-card-text>Copago:&nbsp;&nbsp;<span style="font-size: 12px; line-height: 1;">{{ii.COPAGO}}</span>&nbsp;&nbsp;Deducible: &nbsp;&nbsp;<span class="text-black-50 text-lg-right" style="font-size: 12px; line-height: 1;">{{ii.DEDUCIBLE}}</span></b-card-text>
                                                            </b-card-body>
                                                        </b-collapse>
                                                    </b-card>
                                                </div>
                                            </template>
                                            @*<div class="col-xs-12 col-md-12 col-lg-12    ">
                                                    <table small fixed >
                                                        <tbody v-for="(ii, index) in listaCoberturasAgregadas" >
                                                            <tr style="background-color:darkslateblue; color:snow;  " >
                                                                <td style="border: white; text-align: center; padding: 5px; ">&nbsp;&nbsp;<b-icon icon="trash" font-scale="1.3" variant="ligth" v-on:click="eliminarCoberturaAgregada({ID: ii.ID})"></b-icon></td>
                                                                <td style="border: white; text-align: right; padding-top: 5px; padding-right:5px;"><p  style="font-size: 12px; line-height: 1;">{{ii.COBERTURA}}</p></td>
                                                            </tr>
                                                            <tr>
                                                                <td></td>
                                                                <td style="border: white;  text-align: right;">Copago:&nbsp;&nbsp;<span class="text-black-50 text-lg-left" style="font-size: 12px; line-height: 1;">{{ii.COPAGO}}</span>&nbsp;&nbsp;Deducible: &nbsp;&nbsp;<span class="text-black-50 text-lg-right" style="font-size: 12px; line-height: 1;">{{ii.DEDUCIBLE}}</span></td>
                                                            </tr>

                                                        </tbody>
                                                    </table>
                                                </div>*@
                                        </div>
                                    </template>
                                </div>
                            </div>
                            <br />
                        </div>

                        <div class="col-xs-12 col-lg-9" v-if="CONTRATO==''">
                            <div class="card redondoCardLight shadow-lg">
                                <div class="card-body reDimBox">
                                    <div class="row colorSanPablo">
                                        <div class="col-sm-8 col-md-8 col-lg-8">
                                            <div class="card-title  text-left text-white">
                                                <br /><h3>
                                                    Lista de afiliados
                                                </h3>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 col-md-4 col-lg-4">
                                            <div class="card-title  text-right text-white">
                                                <br /><span> <b-avatar button icon="alarm" size="2rem" variant="light"></b-avatar></span><span>&nbsp;&nbsp;&nbsp;Tiempo: {{min}} : {{sec}}</span>
                                            </div>
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row">
                                        <div class="col-sm-4 col-md-4 col-lg-4 " v-for="i in listaAfiliados">
                                            <div :class="i.FLG_SUSPENDIDO">
                                                <div class="row">
                                                    <div class="col-12 text-center">
                                                        <span><b>{{i.ASEGURADO}}</b></span><br />
                                                        <span class="text-black-50" style="font-size:11px; ">Cod. Afiliado:{{i.COD_ASEGURADEP}}</span>
                                                    </div>
                                                </div>
                                                <br />
                                                <span>Contratante: {{i.CONTRATANTE}}</span><br />
                                                <span>Titular: {{i.TITULAR}}</span><br />
                                                <span>N° documento: {{i.NRO_DOCUMENTO}}</span><br />
                                                <span>Promotor: {{i.PROMOTOR}}</span>
                                                <br />
                                                <br />
                                                <div class="row">
                                                    <div class="col-7 text-left">
                                                        <span>N° Contrato: <b>{{i.CONTRATO}}</b></span><br />
                                                        <span class="text-black-50" style="font-size:11px;">Fecha vigencia: {{i.FEC_INIVIGSEG}}</span>
                                                        <span class="text-black-50" style="font-size:11px;">Fecha registro: {{i.FEC_REGSEGURO}}</span>
                                                    </div>
                                                    <div v-if="i.FLG_SUSPENDIDO =='cajaAmarilloPress'" class="col-5 text-right"><b-button pill variant="info" v-on:click=" elegirAfiliado({ GRUPO: i.GRUPO, CONTRATO: i.CONTRATO, COD_ASEGURADEP: i.COD_ASEGURADEP, ASEGURADO:i.ASEGURADO, CONTRATANTE:i.CONTRATANTE, TITULAR:i.TITULAR, PROMOTOR:i.PROMOTOR, FEC_REGSEGURO: i.FEC_REGSEGURO, PLAN: i.PLAN, COD_PLAN: i.COD_PLAN, BENECICIO_MAXIMO: i.BENECICIO_MAXIMO, NRO_DOCUMENTO: i.NRO_DOCUMENTO, FEC_INIVIGSEG: i.FEC_INIVIGSEG, SEC_CONTRATO: i.SEC_CONTRATO })">{{i.PLAN}}</b-button></div>
                                                    <div v-else="i.FLG_SUSPENDIDO =='cajaAmarilloPress'" class="col-5 text-right"><b-button pill variant="light" v-on:click="">{{i.PLAN}}</b-button></div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>
                        </div>

                        <template>
                            <div class="col-xs-12 col-lg-9" v-if="CONTRATO!=''">
                                <div class="card redondoCardLight shadow-lg">
                                    <div class="card-body reDimBox">
                                        <div class="row colorSanPablo">
                                            <div class="col-sm-8 col-md-8 col-lg-8">
                                                <div class="card-title  text-left text-white">
                                                    <br /><h3>
                                                        {{SEDE}} @*{{ COD_EMPRESA}}  {{COD_SUCURSAL}}*@   {{GRUPO}}
                                                    </h3>
                                                </div>
                                            </div>
                                            <div class="col-sm-4 col-md-4 col-lg-4">
                                                <div class="card-title  text-right text-white">
                                                    <br /><span> <b-avatar button icon="alarm" size="2rem" variant="light"></b-avatar></span><span>&nbsp;&nbsp;&nbsp;Tiempo: {{min}} : {{sec}}</span>
                                                </div>
                                            </div>
                                        </div>
                                        <br />

                                        <div class="row">
                                            <div class="col-12">
                                                <b-alert :show="dismissCountDown" dismissible v-bind:variant="efecto" @@dismissed="dismissCountDown=0" @@dismiss-count-down="countDownChanged">
                                                    <div v-if="BENECICIO_MAXIMO>0">
                                                        <p v-if="SALDO_CONSUMIR>0"><b>Saldo disponible:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{SALDO_CONSUMIR}} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>Beneficio máximo:</b>  {{BENECICIO_MAXIMO}}.00</p>
                                                        <p v-else="SALDO_CONSUMIR>0"><b>Ajustar el límite de carta, para no superar el beneficio máximo de {{BENECICIO_MAXIMO}}, según su plan afiliado</b></p>
                                                    </div>
                                                    <div v-else="BENECICIO_MAXIMO>0"><p>El paciente dispone de  un beneficio  ilimitado, según su plan afiliado</p></div>
                                                    <b-progress v-bind:variant="efecto" :max="BENECICIO_MAXIMO" :value="SALDO_CONSUMIR" height="5px"></b-progress>
                                                </b-alert>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-xs-12 col-md-3 col-lg-3 cajaTexto">
                                                <span class="text-black-50 text-sm-right">Médico tratante<b-badge v-if="MEDICO.length<10" pill variant="danger">!</b-badge></span> <br />
                                                <b-form-input v-model="MEDICO" class="cajaTexto2" type="text" v-bind:title="MEDICO" v-on:keyup="CMP='', validaCampos(5)" placeholder="médico"></b-form-input>
                                            </div>
                                            <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto text-center" style="margin-top:15px;"><b-avatar v-if="MEDICO.length>2 || CMP.length>2 " button v-on:click="listarMedico()" title="Ingrese min. 3 letras para buscar" icon="search" size="2rem" variant="info"></b-avatar></div>
                                            <div class="col-xs-12 col-md-2 col-lg-2 cajaTexto">
                                                <span class="text-black-50 text-sm-right">CMP<b-badge v-if="CMP.length<3" pill variant="danger">!</b-badge></span> <br />
                                                <b-form-input v-model="CMP" class="cajaTexto2" type="text" v-on:keyup="MEDICO=''" placeholder="CMP"></b-form-input>
                                            </div>

                                            <div class="col-xs-12 col-md-3 col-lg-3 cajaTexto">
                                                <span class="text-black-50 text-sm-right">Diagnóstico<b-badge v-if="DIAGNOSTICO.length<4" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="DIAGNOSTICO" class="cajaTexto2" type="text" v-bind:title="DIAGNOSTICO" v-on:keyup="CIE='', validaCampos(5)" placeholder="Ingrese Diagnóstico"></b-form-input>
                                            </div>
                                            <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto text-center" style="margin-top:15px;"><b-avatar v-if="DIAGNOSTICO.length>2 || CIE.length>2 " title="Ingrese min. 3 letras para buscar" button v-on:click="listarDiagnostico()" icon="search" size="2rem" variant="info"></b-avatar></div>
                                            <div class="col-xs-12 col-md-2 col-lg-2 cajaTexto">
                                                <span class="text-black-50 text-sm-right">CIE10<b-badge v-if="CIE.length<3" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="CIE" class="cajaTexto2" type="text" v-on:keyup="DIAGNOSTICO='', validaCampos(7)" placeholder="Ingrese CIE 10"></b-form-input>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-xs-12 col-md-3 col-lg-3 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Plan de trabajo<b-badge v-if="PLAN_TRABAJO.length<3" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="PLAN_TRABAJO" disabled class="cajaTexto2" v-bind:title="PLAN_TRABAJO" v-on:keyup="validaCampos(5)" type="text"></b-form-input>
                                            </div>
                                            <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto text-left " style="padding-top:0.7rem;">
                                                <b-avatar button title="Elegir para ver la lista de planes de trabajo" v-on:click="ListaPlanTrabajo=[], CAMPO='', pantalla({ PANTALLA: 'solicitarPlanTrabajo'})" icon="search" size="2.0rem" variant="info"></b-avatar>
                                            </div>


                                            <div class="col-xs-12 col-md-4 col-lg-2 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Código<b-badge v-if="COD_TARIFARIO.length<2" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="COD_TARIFARIO" readonly class="cajaTexto2" type="text"></b-form-input>
                                            </div>


                                            <div class="col-xs-12 col-md-3 col-lg-3 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Procedimiento<b-badge v-if="PROCEDIMIENTO.length<3" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="PROCEDIMIENTO" class="cajaTexto2" v-bind:title="PROCEDIMIENTO" v-on:keyup="COD_TARIFARIO='',validaCampos(5)" type="text"></b-form-input>
                                            </div>
                                            <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto text-left reDim" style="padding-top:0.7rem;">
                                                <b-avatar v-if="PROCEDIMIENTO.length>2" button v-on:click="listarProcedimientos()" title="Elegir para ver la lista de procedimientos" icon="search" size="2.0rem" variant="info"></b-avatar>
                                            </div>
                                            <div class="col-xs-12 col-md-2 col-lg-2 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Límite carta garantía<b-badge v-if="LIMITE_CG.length<1" pill variant="danger">!</b-badge></span><br />
                                                <b-form-input v-model="LIMITE_CG" class="cajaTexto2" type="text" v-on:keyup="verSiniestros()" placeholder="Límite carta garantía" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1'); " onpaste="return false;"></b-form-input>   @*v-on:keyup="verSiniestros()"*@
                                                <b-form-invalid-feedback id="input-live-feedback">
                                                    Debe contener solo números y punto decimal.
                                                </b-form-invalid-feedback>
                                            </div>
                                        </div>

                                        <div class="row">
                                            <div class="col-xs-12 col-md-12 col-lg-7 cajaTexto reDim">
                                                <span class="text-black-50 text-sm-right">Observación</span><br />

                                                <b-form-textarea id="textarea"
                                                                 v-model="OBSERVACION"
                                                                 placeholder="llenar Observación ..."
                                                                 rows="3" class="cajaTexto2"
                                                                 max-rows="6"></b-form-textarea>
                                            </div>
                                            <div class="col-sm-12 col-md-12 col-lg-5">
                                                <div class="text-right">
                                                    <b-button-group>
                                                        <span class="btn btn-link text-danger" style="width:70px" title="Adicional" v-on:click="pantalla({PANTALLA:'verAdicionales'})" v-if="ListaAdicionales.length>0">
                                                            <span class="badge badge-light text-black-50" style="font-size: 11px; height: 12px; margin-top: -30px;  z-index: 10;"><b>{{ListaAdicionales.length}}</b></span>
                                                            <b-avatar title="Adicional" variant="outline-secundary" icon="bookmarks" size="5rem"></b-avatar>
                                                        </span>

                                                        <span class="btn btn-link text-primary" style="width:70px" title="Subir medio probatorio" v-on:click="pantallaExterna( {ID: ID_SOURCE, EXT: '.png'})">
                                                            <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Archivo</span>
                                                            <b-avatar title="Archivo" variant="outline-secundary" icon="file-image" size="5rem"></b-avatar>
                                                        </span>

                                                        <span class="btn btn-link text-warning" style="width:70px" title="Guardar final" v-on:click="Guardar()">
                                                            <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Guardar</span>
                                                            <b-avatar variant="outline-info" icon="trophy" size="5rem"></b-avatar>
                                                        </span>
                                                    </b-button-group>
                                                    <br /><br />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="row" style=" margin-top: -10px; overflow: scroll; height: 500px; ">
                                            <template v-for="(item, index) in ListaExpedientes">
                                                <div class="col-xs-12 col-sm-12 col-lg-4">
                                                    <span class="btn btn-link text-dark" style="height: 250px; padding: 10px; cursor: zoom-in;">
                                                        <span class="badge badge-light text-black-50" style="font-size: 8px; height: 10px; margin-top: -30px; margin-left: 20px; z-index: 10;">{{item.TITULO}}</span>
                                                        <template v-if="item.EXT == '.pdf'">
                                                            <img v-on:click="abrirPDF(URL + item.BANNER)" src="../Recursos/pdf.jpg" style="border-radius: 18px; object-fit: cover; " class="cajaGrisClaroDelgado" height="200px" width="100%">
                                                        </template>
                                                        <template v-else="item.EXT == '.pdf'">
                                                            <img v-img v-bind:src="URL + item.BANNER" v-if="item.STATUS=='1'" class="cajaGrisClaroDelgado" style="border-radius: 18px; object-fit: cover; " height="200px" width="100%">
                                                            <img v-img v-bind:src="URL + item.BANNER" v-if="item.STATUS=='0'" class="cajaRojoClaroDelgado" style="border-radius: 18px; object-fit: cover; filter: blur(0.4rem);" height="200px" width="100%">
                                                        </template>

                                                        <template v-if="item.STATUS== '1'">
                                                            <span class="bg-light" style="position: relative; bottom: 60px; right: 0px; z-index: 10; padding: 15px; border-radius: 18px; ">
                                                                <b-button-group>
                                                                    <span v-on:click="fileEliminar({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS: 0, BANNER: item.BANNER })"> <img src="../icons/trash3.svg" style="height: 30px; width: 30px; "></span>
                                                                    <span style="padding-left:25px" v-on:click="fileDescargar({ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS :1, URL: URL + item.BANNER, LABEL: item.TITULO + item.EXT, BANNER: item.BANNER })"> <img src="../icons/arrow-down-circle.svg" style="height: 30px; width: 30px; "></span>
                                                                </b-button-group>
                                                            </span>
                                                        </template>
                                                        <template v-if="item.STATUS== '0'">
                                                            <span class="bg-danger" style="position: relative; bottom: 60px; right: 0px; z-index: 10; padding: 15px; border-radius: 18px; ">
                                                                <b-button-group>
                                                                    <span v-on:click="fileEliminar({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS: 1, BANNER: item.BANNER })"> <img src="../icons/arrow-repeat.svg" style="height: 30px; width: 30px; "></span>
                                                                    <span style="padding-left:25px" v-on:click="fileDescargar({ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS :1, URL: URL + item.BANNER, LABEL: item.TITULO + item.EXT, BANNER: item.BANNER })"> <img src="../icons/arrow-down-circle.svg" style="height: 30px; width: 30px; "></span>
                                                                </b-button-group>
                                                            </span>
                                                        </template>
                                                    </span>
                                                    <br />
                                                </div>
                                            </template>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </template>


                    </div>
                </div>
            </div>
        </b-overlay>
    </div>

    <b-modal id="graficoEstudios" size="xl" data-html="true" hide-footer hide-header @@hide="listarGraficoGeneral">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <b-row style=" height: 550px; overflow: scroll; ">
                        <b-table :items="ListaProceso"
                                 :fields="Columnas"
                                 stacked="md"
                                 head-variant="light"
                                 show-empty
                                 sticky-header
                                 small>
                            <template #cell(name)="row">
                                {{ row.value.first }} {{ row.value.last }}
                            </template>

                            <template #cell(ID)="row">
                                <b-avatar v-on:click="darPrioridad(row.item, row.index, $event.target)" title="dar prioridad" button icon="award" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                            </template>
                            <template #cell(ACCIONES)="row">

                                <b-badge v-if="row.item.ACCIONES =='PROCESO'" pill variant="warning">{{row.item.ACCIONES}}</b-badge>
                                <b-badge v-if="row.item.ACCIONES =='AGENDADO'" pill variant="info">{{row.item.ACCIONES}}</b-badge>
                                <b-badge v-if="row.item.ACCIONES =='INTERNO'" pill variant="dark">{{row.item.ACCIONES}}</b-badge>
                            </template>
                        </b-table>
                    </b-row>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="agendar" size="md" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">AGENDAR REGISTRO</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">

                            <b-row>
                                <b-col cols="12" class="mb-3"></b-col>
                                <p>Value: <b>'{{ value }}'  '{{ hora }}'</b></p>
                            </b-row>

                            <b-row>
                                <b-col cols="8">
                                    <b-calendar v-model="value" :min="minH" :max="maxH" locale="es" :state="false" class="mb-2"></b-calendar>
                                </b-col>
                                <b-col cols="4">
                                    <b-form-timepicker v-model="hora"></b-form-timepicker>

                                    <br /><br /><br />
                                    <hr />
                                    <br /><br /><br /><br /><br />
                                    <div class="text-center">
                                        <b-avatar button icon="briefcase" v-on:click="GuardarAgendado()" variant="light" title="Agendar revisión" class="align-center" size="4em"></b-avatar><br /><h4 class="align-center">Guardar</h4>

                                    </div>
                                </b-col>

                            </b-row>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="nuevo" size="md" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE ESTUDIOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <template>
                                <p>Elige un grupo para empezar</p>
                                <br />
                                <div class="row">
                                    <div class="col-xs-6 col-md-6" v-for="i in ListaGruposxUsuario">
                                        <div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><br /><h4 class="align-center">{{i.TITULO}}</h4>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarMedico" size="xl" data-html="true" hide-footer hide-header @@hide="CAMPO=''">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE MÉDICOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <p>Elige uno, para continuar</p>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <b-form-input v-model="CAMPO" class="cajaTexto2" v-on:keyup="buscarMedico()" type="text"></b-form-input>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                                <div class="col-xs-4 col-md-4" v-for="i in listaMedicos">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;">CMP: <b>{{i.CMP}}</b></span><br /><span style="font-size:11px;" class="text-black">{{i.MEDICO}}</span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="person-circle" variant="warning" title="Médico" class="align-center" size="4em" v-on:click="elegirMedico( { CMP: i.CMP, MEDICO: i.MEDICO } )"></b-avatar>
                                        </div>
                                    </div>
                                    <hr />
                                    @*<div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><h4 class="align-center">{{i.MEDICO}}</h4>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarCobertura" size="xl" data-html="true" hide-footer hide-header @@hide="CAMPO=''">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE COBERTURA</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text" if="COBERTURA=''">
                            <div class="row">
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <p>Elige uno, para continuar</p>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <b-form-input v-model="CAMPO" class="cajaTexto2" v-on:keyup="buscarCobertura()" type="text"></b-form-input>
                                </div>
                            </div>
                            <div class="row">
                                <br />
                                <div class="col-xs-4 col-md-4" v-for="i in listaCoberturas">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;"><b>{{i.COBERTURA}}</b></span><br />
                                            <span style="font-size:12px;">{{i.VIGENCIA}}</span>-<span style="font-size:11px;" class="text-black">{{i.CVALCOM}}</span><br />
                                            <span style="font-size:11px;" class="text-black">CoPago:&nbsp;{{i.COPAGO}}</span>&nbsp;&nbsp;&nbsp;<span v-if="i.DEDUCIBLE != '0'" style="font-size:11px;" class="text-black">Deducible:&nbsp;{{i.DEDUCIBLE}}</span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar v-if="i.DEDUCIBLE != '0'" button icon="prescription2" variant="warning" title="Cobertura" class="align-center" size="4em" v-on:click=" ID_COBERTURA=i.COD, GRUPO_COBERTURA= i.GRUPO, COBERTURA=i.COBERTURA,COPAGO=i.COPAGO,  DEDUCIBLE=i.DEDUCIBLE, listaCoberturas = []"></b-avatar>
                                            <b-avatar v-else="i.DEDUCIBLE != '0'" button icon="prescription2" variant="danger" title="Cobertura" class="align-center" size="4em" v-on:click="ID_COBERTURA=i.COD, GRUPO_COBERTURA= i.GRUPO, COBERTURA=i.COBERTURA,COPAGO=i.COPAGO, DEDUCIBLE=i.CVALCOM, listaCoberturas = []"></b-avatar>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                            </div>
                        </div>
                        <div class="card-text" if="COBERTURA!=''">
                            <div class="row">
                                <div class="col-xs-12 col-md-12 col-lg-12 cajaTexto text-left text-info " style="padding-top:0.7rem;">
                                    Volver a visualizar coberturas&nbsp;&nbsp;&nbsp;<b-avatar button v-on:click=" listaCoberturas = listaCoberturas_" title="volver a visualizar coberturas" icon="arrow-repeat" size="2.5rem" variant="info"></b-avatar>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-xs-12 col-md-4 col-lg-2 cajaTexto reDim">
                                    <span class="text-black-50 text-sm-right">COPAGO (%)<b-badge v-if="COPAGO.length<1" pill variant="danger">!</b-badge></span><br />
                                    <b-form-input v-model="COPAGO" readonly class="cajaTexto2" type="text"></b-form-input>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-5 cajaTexto reDim">
                                    <span class="text-black-50 text-sm-right">Cobertura<b-badge v-if="COBERTURA.length<5" pill variant="danger">!</b-badge></span><br />
                                    <b-form-input v-model="COBERTURA" readonly class="cajaTexto2" type="text" v-bind:title="COBERTURA" placeholder="Cobertura"></b-form-input>
                                </div>
                                <div class="col-xs-12 col-md-4 col-lg-4 cajaTexto reDim">
                                    <span class="text-black-50 text-sm-right">Deducible<b-badge v-if="DEDUCIBLE.length<1" pill variant="danger">!</b-badge></span><br />
                                    <b-form-input v-model="DEDUCIBLE" class="cajaTexto2" type="text" v-if="DEDUCIBLE != 'SIN DEDUCIBLE'"></b-form-input>
                                    <b-form-input v-model="DEDUCIBLE" class="cajaTexto2" type="text" readonly v-else="DEDUCIBLE != 'SIN DEDUCIBLE'"></b-form-input>
                                    <b-form-invalid-feedback id="input-live-feedback">
                                        Debe contener minimo 2 digitos.
                                    </b-form-invalid-feedback>
                                </div>
                                <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto text-left " style="padding-top:0.7rem;">
                                    <b-avatar button v-on:click=" elegirCobertura( { GRUPO: GRUPO_COBERTURA, COBERTURA: COBERTURA, COPAGO: COPAGO, DEDUCIBLE: DEDUCIBLE } )" title="Elegir una coberturas" icon="prescription2" size="2.5rem" variant="info"></b-avatar>
                                </div>
                            </div>
                            <div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarDiagnostico" size="xl" data-html="true" hide-footer hide-header @@hide="CAMPO=''">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE DIAGNOSTICOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <p>Elige uno, para continuar</p>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <b-form-input v-model="CAMPO" class="cajaTexto2" v-on:keyup="buscarDiagnostico()" type="text"></b-form-input>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                                <div class="col-xs-4 col-md-4" v-for="i in listaDiagnosticos">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;">CIE10: <b>{{i.CIE}}</b></span><br /><span style="font-size:11px;" class="text-black">{{i.DIAGNOSTICO}}</span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="virus" variant="warning" title="Diagnostico" class="align-center" size="4em" v-on:click="elegirDiagnostico( { CIE: i.CIE, DIAGNOSTICO: i.DIAGNOSTICO } )"></b-avatar>
                                        </div>
                                    </div>
                                    <hr />
                                    @*<div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><h4 class="align-center">{{i.MEDICO}}</h4>
                                        </div>*@
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarProcedimiento" size="xl" data-html="true" hide-footer hide-header @@hide="CAMPO=''">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE PROCEDIMIENTOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <p>Elige uno, para continuar</p>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <b-form-input v-model="CAMPO" class="cajaTexto2" v-on:keyup="buscarProcedimiento()" type="text"></b-form-input>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                                <div class="col-xs-4 col-md-4" v-for="i in ListaProcedimiento">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;">CÓDIGO: <b>{{i.COD_TARIFARIO}}</b></span><br /><span style="font-size:11px;" class="text-black">{{i.PROCEDIMIENTO}}</span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="heart-pulse" variant="warning" title="Procedimiento" class="align-center" size="4em" v-on:click="elegirProcedimiento( { COD_TARIFARIO: i.COD_TARIFARIO, PROCEDIMIENTO: i.PROCEDIMIENTO } )"></b-avatar>
                                        </div>
                                    </div>
                                    <hr />
                                    @*<div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><h4 class="align-center">{{i.MEDICO}}</h4>
                                        </div>*@
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarSede" size="md" data-html="true" hide-footer hide-header no-close-on-backdrop no-close-on-esc>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE CLÍNICAS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <p>Elige uno, para continuar</p>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                                <div class="col-xs-4 col-md-4 " v-for="i in ListaSedes">
                                    <div class="row colorSanPablo">
                                        <div class="col-12  " v-on:click="elegirSede( { COD_EMPRESA: i.CCOD_EMPRESA, COD_SUCURSAL: i.CCOD_SUCURSAL, SEDE: i.SEDE } )">
                                            <span style="font-size:14px; color:  white;"><b>{{i.SEDE}}</b></span>
                                        </div>
                                    </div>
                                    <hr />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="solicitarPlanTrabajo" size="xl" data-html="true" hide-footer hide-header @@hide="CAMPO=''">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTADO PLAN DE TRABAJO</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-4 col-lg-4 cajaTexto">
                                    @*<p>Elige uno, para continuar</p>*@
                                    <p>Realice la búsqueda, luego elija un plan para continuar.</p>
                                </div>
                                <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto">
                                    <b-form-input v-model="CAMPO" class="cajaTexto2" v-on:keyup="buscarPlanTrabajo()" type="text"></b-form-input>
                                </div>

                                <div class="col-xs-12 col-md-2 col-lg-2 cajaTexto text-left ">
                                    <b-button size="sm" v-on:click="AgregarPlanTrabajo()" variant="warning" pill><b-avatar variant="outline-info" icon="plus-circle" size="2rem"></b-avatar>Agregar</b-button>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                                <div class="col-xs-4 col-md-4" v-for="i in ListaPlanTrabajo">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;"><b>{{i.TITULO}}</b></span><br />
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="prescription2" variant="warning" title="Plan de trabajo" class="align-center" size="4em" v-on:click="PLAN_TRABAJO=i.TITULO, pantallaCerrar({PANTALLA:'solicitarPlanTrabajo'})"></b-avatar>
                                        </div>
                                    </div>
                                    <hr />
                                    @*<div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><h4 class="align-center">{{i.MEDICO}}</h4>
                                        </div>*@
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="verAdicionales" size="lg" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">
                                DETALLE DE ADICIONALES
                            </strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row" style="padding:12px;">
                                <br />
                                <div>
                                    <b-row>
                                        <b-table :items="ListaAdicionales"
                                                 stacked="md" striped hover
                                                 head-variant="light"
                                                 show-empty
                                                 sticky-header
                                                 small>
                                            <template #cell(name)="row">
                                                {{ row.value.first }} {{ row.value.last }}
                                            </template>
                                        </b-table>
                                    </b-row>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="verCGA" size="lg" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">
                                DETALLES
                            </strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row" style="padding:12px;">
                                <br />
                                <h5>Se encontraron coincidencias con una carta aprobada recientemente</h5>
                                <br />
                                <div>
                                    <b-row>
                                        <b-table :items="ListaCGA"
                                                 :fields="ColumnasCGA"
                                                 stacked="md" striped hover
                                                 head-variant="light"
                                                 show-empty
                                                 sticky-header
                                                 small>
                                            <template #cell(name)="row">
                                                {{ row.value.first }} {{ row.value.last }}
                                            </template>
                                        </b-table>
                                    </b-row>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>
    <b-modal id="verAlertaPlanAccidentes" size="xl" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">
                                Mensaje informativo
                            </strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row" style="padding:12px;">
                                <br />
                                <h5>El afiliado, cuenta con un plan especializado en Accidentes se recomienda elegir un plan "Accidentes"</h5>
                                <br />
                                <div class="row">
                                    <div class="col-sm-4 col-md-4 col-lg-4 " v-for="i in listaAfiliados">
                                        <div :class="i.FLG_SUSPENDIDO">
                                            <div class="row">
                                                <div class="col-12 text-center">
                                                    <span><b>{{i.ASEGURADO}}</b></span><br />
                                                    <span class="text-black-50" style="font-size:11px; ">Cod. Afiliado:{{i.COD_ASEGURADEP}}</span>
                                                </div>
                                            </div>
                                            <br />
                                            <span>Contratante: {{i.CONTRATANTE}}</span><br />
                                            <span>Titular: {{i.TITULAR}}</span><br />
                                            <span>N° documento: {{i.NRO_DOCUMENTO}}</span><br />
                                            <span>Promotor: {{i.PROMOTOR}}</span>
                                            <br />
                                            <br />
                                            <div class="row">
                                                <div class="col-7 text-left">
                                                    <span>N° Contrato: <b>{{i.CONTRATO}}</b></span><br />
                                                    <span class="text-black-50" style="font-size:11px;">Fecha vigencia: {{i.FEC_INIVIGSEG}}</span>
                                                    <span class="text-black-50" style="font-size:11px;">Fecha registro: {{i.FEC_REGSEGURO}}</span>
                                                </div>
                                                <div v-if="i.FLG_SUSPENDIDO =='cajaAmarilloPress'" class="col-5 text-right"><b-button pill variant="info" v-on:click=" elegirAfiliado({ GRUPO: i.GRUPO, CONTRATO: i.CONTRATO, COD_ASEGURADEP: i.COD_ASEGURADEP, ASEGURADO:i.ASEGURADO, CONTRATANTE:i.CONTRATANTE, TITULAR:i.TITULAR, PROMOTOR:i.PROMOTOR, FEC_REGSEGURO: i.FEC_REGSEGURO, PLAN: i.PLAN, COD_PLAN: i.COD_PLAN, BENECICIO_MAXIMO: i.BENECICIO_MAXIMO, NRO_DOCUMENTO: i.NRO_DOCUMENTO, FEC_INIVIGSEG: i.FEC_INIVIGSEG, SEC_CONTRATO: i.SEC_CONTRATO })">{{i.PLAN}}</b-button></div>
                                                <div v-else="i.FLG_SUSPENDIDO =='cajaAmarilloPress'" class="col-5 text-right"><b-button pill variant="light" v-on:click="">{{i.PLAN}}</b-button></div>
                                            </div>

                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="ImageCarta" size="xl" data-html="true" hide-footer hide-header @@hide="cargarExpedientes">
        <div class="col-xs-12">
            <b-embed type="iframe"
                     aspect="16by9"
                     v-bind:src="SITE"
                     allowfullscreen></b-embed>
        </div>
    </b-modal>
</div>
<script>
    const configImg = {
            headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` }
        };


    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    // 15th two months prior
    const minDate = new Date(today)
    minDate.setDate(minDate.getDate())
    //minDate.setDate(15)
    // 15th in two months
    const maxDate = new Date(today)
    maxDate.setMonth(maxDate.getMonth() + 1)
    //maxDate.setDate(15)
    const maxDate15 = new Date(today)
    maxDate15.setDate(maxDate15.getDate() + 20)


    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: '@User.Identity.Name',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',

            ID_SEDE: '@Session["ID_SEDE"].ToString()',
            SEDE: '@Session["SEDE"].ToString()',
            ROL: '@Session["ROL"].ToString()',
            USUARIO: '@Session["USUARIO"].ToString()',
            ID_GRUPO: sessionStorage.getItem('IMAGE'),
            GRUPO: '',
            GRUPO_COBERTURA: '',
            URL: '@webServidor',
            INICIO: sessionStorage.getItem('INICIO'),
            HOY: today,
            PLANTILLA: '',
            ID: 0,
            ID_FILE: 0,
            ID_SOURCE: 0,
            TXT_OBSERVACION: '',
            SELECCIONAR: 'SELECCIONAR',
            TEXTO_BUSQUEDA: '',
            COD_EMPRESA: '',
            COD_SUCURSAL: '',
            SEDE: '',

            NUM_CARTA: '',
            CONTRATO: '',
            PROMOTOR: '',
            CONTRATANTE: '',
            NRO_DOCUMENTO: '',
            ASEGURADO: '',
            FEC_REGSEGURO: '',
            FEC_INIVIGSEG: '',
            COD_PLAN: '',
            PLAN: '',
            TITULAR: '',
            COD_ASEGURADEP: '',
            SEC_CONTRATO: '',
            MEDICO: '',
            DIAGNOSTICO: '',
            FEC_REG_CARTA: '',
            FEC_HOSPITAL: '',
            FEC_SOLICITUD: '',
            LIMITE_CG: '0',
            COBERTURA: '',
            COPAGO: '',
            DEDUCIBLE: '',
            BENECICIO_MAXIMO: '',
            AREA: 'SELECCIONAR',
             PLAN_TRABAJO: '',
            MOTIVO: 'SELECCIONAR',
            PROCEDIMIENTO: '',
            COD_TARIFARIO: '',
            OBSERVACION: '',
            NRO_DOCUMENTO: '',
            CMP: '',
            CIE: '',
            ID_COBERTURA: '',
            MODULOS: [],
            CAMPOS: {},
            CAMPO: '',
            SITE: '',
            show: false,
            value: [],
            currentTime: 1,
            min: 0,
            max: minDate,
            sec: 0,
            CONTAR: false,
            context: '',
            value: '',
            hora: '',
            minH: minDate,
            maxH: maxDate,

            graficoAvance: [],
            ListaGruposxUsuario: [],
            ListaItem: [],
            ListaSedes: [],
            ListaBandeja: [],
            ListaQueList: [],
            ListaGeneral: [],
            ListaProceso: [],
            ListaExpedientes: [],
            listaAfiliados: [],
            ListaArea: [],
            ListaPlanTrabajo: [],
            ListaPlanTrabajo_: [],
            ListaMotivo: [],
            listaMedicos: [],
            listaMedicos_: [],
            listaDiagnosticos: [],
            listaDiagnosticos_: [],
            listaCoberturas: [],
            listaCoberturas_: [],
            listaCoberturasAgregadas: [],
            ListaProcedimiento: [],
            ListaProcedimiento_: [],
            ListaCGA: [],
            Columnas: ['ID', 'TITULO', 'ACCIONES', 'FECHA'],
            ColumnasCGA: ['NUM_CARTA', 'ESTADO', 'FEC_APRO_CARTA','SEDE'],
            dismissSecs: 3600,
            dismissCountDown: 0,

            ListaAdicionales: [],
            SALDO_CONSUMIR: '',
            efecto:'info',
        },
        computed: {
            availableOptions() {
                return this.options.filter(opt => this.value.indexOf(opt) === -1)
            }
        },
        methods: {
            countDownChanged(dismissCountDown) {
              this.dismissCountDown = dismissCountDown
            },
            showAlert() {
              this.dismissCountDown = this.dismissSecs
            },

            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },

            updateCurrentTime() {
                if (this.currentTime > 0 && this.currentTime < 3600000 && this.CONTAR == true) {
                    setTimeout(() => {
                        this.currentTime += 1
                        this.min = Math.trunc((this.currentTime) / 60) % 60;
                        this.min = this.min > 9 ? this.min : '0' + this.min;
                        this.sec = Math.trunc((this.currentTime)) % 60;
                        this.sec = this.sec > 9 ? this.sec : '0' + this.sec;
                        this.updateCurrentTime()
                    }, 1000)
                }
            },

            limpiarAfiliado: function () {
                this.CONTRATO = '';
                this.TEXTO_BUSQUEDA = '';
                this.COBERTURA = '';
                this.COPAGO = '';
                this.DEDUCIBLE = '';
                this.AREA = 'SELECCIONAR';
                this.PLAN_TRABAJO = 'SELECCIONAR';
                this.MOTIVO = 'SELECCIONAR';
                this.PROCEDIMIENTO = '';
                this.COD_TARIFARIO = '';
            },

            pantallaExterna: function (item) {
                this.SITE = './ImagenCarta/?idSource=' + item.ID + '&idUsuario=' + this.ID_USUARIO;
                this.$bvModal.show('ImageCarta');
            },

            pantallaCerrar: function (item) {
                this.$bvModal.hide(item.PANTALLA);
            },

            buscarPaciente: async function (item) {
                this.listaAfiliados = [];
                let paciente = item.COMODIN.toUpperCase();
                await axios.post(this.SERVER_API + '/api/CartaGarantia/listaPacientes', {
                    NUM_CONTRATO: item.COMODIN,
                    NOM_PACIENTE: paciente,
                    NUM_DOCUMENTO: item.COMODIN,
                    TIPO: item.TIPO,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.listaAfiliados = response.data;
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                });
            },

            verSiniestros: async function () {
                let calculo = 0;
                this.SINIESTRO_BI = '0';
                this.SALDO_CONSUMIR = '0';
                if (this.LIMITE_CG.length > 0) {
                    if (this.BENECICIO_MAXIMO > 0) {
                        await axios.post(this.SERVER_API + '/api/CartaGarantia/ListarSiniestroBI', {
                            ID: this.ID,
                            ID_USUARIO: this.ID_USUARIO,
                            USUARIO: this.USUARIO,
                            NUMCONTRATOPF: this.CONTRATO.replace(' ', ''),
                            NRO_DOCUMENTO: this.NRO_DOCUMENTO.replace(' ', ''),
                        }, configImg).then(response => {
                            if (response.data.SINIESTRO_BI > 0) {
                                this.SINIESTRO_BI = parseFloat(response.data.SINIESTRO_BI);
                                this.SALDO_CONSUMIR = (parseFloat(this.BENECICIO_MAXIMO) - parseFloat(this.SINIESTRO_BI) - parseFloat(this.LIMITE_CG)).toFixed(2);
                                calculo = (parseFloat((this.SALDO_CONSUMIR * 100) / this.BENECICIO_MAXIMO)).toFixed(0);
                                this.efecto = calculo > 50 ? "success" : calculo > 25 ? "warning" : calculo > 0 ? "danger" : "danger";
                            } else {
                                this.SALDO_CONSUMIR = (parseFloat(this.BENECICIO_MAXIMO) - parseFloat(this.LIMITE_CG)).toFixed(2);
                                calculo = (parseFloat((this.SALDO_CONSUMIR * 100) / this.BENECICIO_MAXIMO)).toFixed(0);
                                this.efecto = calculo > 50 ? "success" : calculo > 25 ? "warning" : calculo > 0 ? "danger" : "danger";
                            }
                        }).catch(e => {
                            this.efecto = "light";
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        });
                    } else {
                        this.SALDO_CONSUMIR = 'ilimitado';
                        this.efecto = "success";
                    }
                } else {
                    this.efecto = "info";
                    this.LIMITE_CG = 0;
                }
                this.showAlert();
            },

            elegirAfiliado: function (it) {
                this.GRUPO = it.GRUPO;
                this.CONTRATO = it.CONTRATO;
                this.COD_ASEGURADEP = it.COD_ASEGURADEP;
                this.ASEGURADO = it.ASEGURADO;
                this.CONTRATANTE = it.CONTRATANTE;
                this.TITULAR = it.TITULAR;
                this.PROMOTOR = it.PROMOTOR;
                this.PLAN = it.PLAN;
                this.COD_PLAN = it.COD_PLAN;
                this.FEC_REGSEGURO = it.FEC_REGSEGURO;
                this.FEC_INIVIGSEG = it.FEC_INIVIGSEG;
                this.NRO_DOCUMENTO = it.NRO_DOCUMENTO;
                this.BENECICIO_MAXIMO = it.BENECICIO_MAXIMO == null ? 0 : it.BENECICIO_MAXIMO;
                this.LIMITE_CG = '0';
                this.SEC_CONTRATO = it.SEC_CONTRATO;
                this.listaAfiliados = [];
                this.$bvModal.hide('verAlertaPlanAccidentes');
                for (let i of this.listaCoberturasAgregadas) {
                    this.eliminarCoberturaAgregada({ ID: i.ID });
                }

                this.verSiniestros();
            },

            listarDiagnostico: function () {
                if (this.CIE.length > 2 || this.DIAGNOSTICO.length > 2) {
                    let tipo = (this.CIE.length > 2) ? 0 : 1;
                    axios.post(this.SERVER_API + '/api/CartaGarantia/ListarDiagnosticos', {
                        CIE: this.CIE,
                        DIAGNOSTICO: this.DIAGNOSTICO,
                        TIPO: tipo,
                    }, configImg).then(response => {
                        if (response.data.length > 0) {
                            this.listaDiagnosticos = response.data;        //alert(JSON.stringify(lista));
                            this.listaDiagnosticos_ = response.data;

                            this.$bvModal.show('solicitarDiagnostico');
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        }
                    }).catch(e => { });
                }
            },

            buscarDiagnostico: function (item) {
                if (this.CAMPO.length > 0) {
                    let palabra = this.CAMPO.toUpperCase();
                    this.listaDiagnosticos = this.listaDiagnosticos_.filter(x => {
                        return x.CAMPO_BUSQUEDA.includes(palabra);
                    });
                }
                else {
                    this.listaDiagnosticos = this.listaDiagnosticos_;
                }
            },

            elegirDiagnostico: function (item) {
                this.CIE = item.CIE;
                this.DIAGNOSTICO = item.DIAGNOSTICO;
                this.listaDiagnosticos = [];
                this.listaDiagnosticos_ = [];
                this.CAMPO = '';
                this.stateDiagnostico = true;
                this.$bvModal.hide('solicitarDiagnostico');
            },

            listarMedico: function () {
                if (this.CMP.length > 2 || this.MEDICO.length > 2) {
                    let tipo = (this.CMP.length > 2) ? 0 : 1;
                    axios.post(this.SERVER_API + '/api/CartaGarantia/listarMedicos', {
                        CMP: this.CMP,
                        MEDICO: this.MEDICO,
                        TIPO: tipo,
                    }, configImg).then(response => {
                        if (response.data.length > 0) {
                            this.listaMedicos = response.data;        //alert(JSON.stringify(lista));
                            this.listaMedicos_ = response.data;
                            //alert(JSON.stringify(this.listaMedicos_));
                            this.$bvModal.show('solicitarMedico');
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        }
                    }).catch(e => { });
                }
            },

            buscarMedico: function () {
                if (this.CAMPO.length > 0) {
                    let palabra = this.CAMPO.toUpperCase();
                    this.listaMedicos = this.listaMedicos_.filter(x => {
                        return x.CAMPO_BUSQUEDA.includes(palabra);
                    });
                }
                else {
                    this.listaMedicos = this.listaMedicos_;
                }
            },

            elegirMedico: function (item) {
                this.CMP = item.CMP;
                this.MEDICO = item.MEDICO;
                this.listaMedicos = [];
                this.listaMedicos_ = [];
                this.CAMPO = '';
                this.stateMedico = true;
                this.$bvModal.hide('solicitarMedico');
            },

            validaCampos(item) {
                switch (item) {
                    case 1: {
                        this.TEXTO_BUSQUEDA = this.TEXTO_BUSQUEDA.toUpperCase();
                        break;
                    }
                    case 2: {
                        this.stateLimiteCG = false;
                        this.stateDeducible = false;
                        this.stateLimiteCG = this.LIMITE_CG.length < 2 ? false : true;
                        this.stateDeducible = this.DEDUCIBLE.length < 2 ? false : true;
                        break;
                    }
                    case 3: {
                        this.stateArea = false;
                        this.statePlanTrabajo = false;
                        this.stateMotivo = false;

                        this.stateArea = this.AREA != 'SELECCIONAR' ? true : false;
                        this.statePlanTrabajo = this.PLAN_TRABAJO != 'SELECCIONAR' && this.PLAN_TRABAJO.length>3 ? true : false;
                        this.stateMotivo = this.MOTIVO != 'SELECCIONAR' ? true : false;
                        break;
                    }


                    case 4: {
                        // this.stateApeMaterno = this.APE_MATERNO.length < 2 ? false : true; this.APE_MATERNO = this.APE_MATERNO.toUpperCase(); break;
                        if (/^[a-zA-ZÁÉÍÓÚáéíóúñÑ ]+$/.test(this.APE_MATERNO)) {

                            if (this.APE_MATERNO != null) {
                                if (this.APE_MATERNO.trim().length < 3) {

                                    this.stateApeMaterno = false;
                                } else {
                                    this.APE_MATERNO = this.APE_MATERNO.toUpperCase();
                                    this.stateApeMaterno = true;
                                }
                            }
                        } else {
                            //this.APE_MATERNO = '';
                            this.stateApeMaterno = false;
                        }
                        break;
                    }
                    case 5: {
                        this.MEDICO = this.MEDICO.toUpperCase();
                        this.DIAGNOSTICO = this.DIAGNOSTICO.toUpperCase();
                        this.PROCEDIMIENTO = this.PROCEDIMIENTO.toUpperCase();
                        this.PLAN_TRABAJO = this.PLAN_TRABAJO.toUpperCase();
                        break;
                    }

                    case 6: {
                        this.stateFecHospital = false;
                        this.stateFecSolicitud = false;
                        this.stateFecHospital = this.FEC_HOSPITAL != null ? true : false;
                        this.stateFecSolicitud = this.FEC_SOLICITUD != null ? true : false;
                        break;
                    }
                    case 7: {
                        this.CIE = this.CIE.toUpperCase();
                        break;
                    }
                }
                //this.validarFormulario();
            },

            abrirPDF: function (url) {
                // Abrir nuevo tab
                var win = window.open(url, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
                // Cambiar el foco al nuevo tab (punto opcional)
                win.focus();
            },

            pantalla: function (item) {
                this.$bvModal.show(item.PANTALLA);
            },

            configurar: function (item) {
                this.show = true;
                axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                    ID: item.ID,
                    ID_SOURCE: item.ID_SOURCE,
                    ID_GRUPO: item.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 30,
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.$bvModal.hide('nuevo');
                        this.iniciar();
                    }
                }).catch(e => {
                });
            },
            //MODIFICADO ML                         //   alert(JSON.stringify(response.data));
            iniciar: async function () {
                if (this.INICIO == 0) {
                    //this.show = true;
                    await axios.post(this.SERVER_API + '/api/Grupo/IniciarQueuexGrupoSede', {
                        ID: 0,
                        ID_SOURCE: 0,
                        ID_GRUPO: 16,
                        ID_SEDE: this.ID_SEDE,
                        ID_USUARIO: this.ID_USUARIO,
                    }, configImg).then(response => {
                        if (response.data.ID > 0) {
                            //this.show = false;
                            this.INICIO = 1;
                            sessionStorage.setItem('INICIO', 1);
                            if (this.CONTAR == false) { this.CONTAR = true; this.updateCurrentTime(); }
                            this.PLANTILLA = response.data.PLANTILLA;
                            this.ID = response.data.ID;
                            this.ID_SOURCE = response.data.ID_SOURCE;
                            this.ID_GRUPO = response.data.ID_GRUPO;
                            this.cargarRegistro();
                            this.verAdicionales();
                        }
                    }).catch(e => {
                    });
                }
            },

            cargarRegistro: async function () {
                this.SINIESTRO_BI = '0';
                this.SALDO_CONSUMIR = '0';
                
                //alert(this.ID_SOURCE + ' ' + this.ID_USUARIO + ' ' + this.USUARIO + ' ' + this.ID_SEDE);

                await axios.post(this.SERVER_API + '/api/CartaGarantia/ListarCarta', {
                    ID:         this.ID_SOURCE,
                    ID_USUARIO: this.ID_USUARIO,
                    USUARIO:    this.USUARIO,
                    ID_SEDE:    this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.cargarExpedientes();
                        this.listarCoberturasAgregadas();
                        if (response.data.NUMCONTRATOPF != null) {
                            this.NUM_CARTA = response.data.NUM_CARTA;
                            this.CONTRATO = response.data.NUMCONTRATOPF;
                            this.NRO_DOCUMENTO = response.data.NRO_DOCUMENTO;
                            this.GRUPO = response.data.GRUPO;

                            // web service beneficio maximo
                            this.verBeneficioMaximo();
                            this.PROMOTOR = response.data.PROMOTOR;
                            this.CONTRATANTE = response.data.CONTRATANTE;
                            this.ASEGURADO = response.data.AFILIADO;
                            this.FEC_REGSEGURO = response.data.FEC_INI_AFILIACION;
                            this.COD_ASEGURADEP = response.data.COD_ASEGURADEP;
                            this.TITULAR = response.data.CONTRATANTE;
                            this.COD_PLAN = response.data.COD_PLAN,
                            this.PLAN = response.data.DSC_PLAN;
                            this.MEDICO = response.data.MEDICO_TRATANTE == null ? '' : response.data.MEDICO_TRATANTE;
                            this.DIAGNOSTICO = response.data.DIAGNOSTICO == null ? '' : response.data.DIAGNOSTICO;

                            this.FEC_INIVIGSEG = response.data.FEC_INIVIGSEG; // response.data.FEC_INI_AFILIACION;
                            this.FEC_REG_CARTA = response.data.FEC_REG_CARTA;
                            this.FEC_HOSPITAL = response.data.FEC_HOSPITALIZACION == null ? '' : response.data.FEC_HOSPITALIZACION;
                            this.FEC_SOLICITUD = response.data.FEC_SOLICITUD == null ? '' : response.data.FEC_SOLICITUD;
                            this.LIMITE_CG = response.data.LIM_CARTA == null ? 0 : response.data.LIM_CARTA;

                            this.COBERTURA = response.data.COBERTURA == null ? '' : response.data.COBERTURA;
                            this.COPAGO = response.data.COPAGO == null ? '' : response.data.COPAGO;
                            this.DEDUCIBLE = response.data.DEDUCIBLE == null ? '' : response.data.DEDUCIBLE;
                            this.AREA = response.data.AREA == null ? 'SELECCIONAR' : response.data.AREA;
                            this.PLAN_TRABAJO = response.data.PLAN_TRABAJO == null ? 'SELECCIONAR' : response.data.PLAN_TRABAJO;
                            this.PROCEDIMIENTO = response.data.PROCEDIMIENTO1 == null ? '' : response.data.PROCEDIMIENTO1;
                            this.COD_TARIFARIO = response.data.CODPROC1 == null ? '' : response.data.CODPROC1;
                            this.OBSERVACION = response.data.OBSERVACION;
                            this.CMP = response.data.CMP == null ? '' : response.data.CMP;
                            this.CIE = response.data.CIE == null ? '' : response.data.CIE;
                            this.COD_EMPRESA = response.data.COD_EMPRESA == null ? '00' : response.data.COD_EMPRESA;
                            this.COD_SUCURSAL = response.data.COD_SUCURSAL == null ? '00' : response.data.COD_SUCURSAL;
                            this.SEDE = response.data.SEDE == null ? '' : response.data.SEDE;
                            this.SEC_CONTRATO = response.data.SEC_CONTRATO == null ? '' : response.data.SEC_CONTRATO;

                        } else {
                            this.NUM_CARTA = response.data.NUM_CARTA;
                            this.COD_EMPRESA = response.data.COD_EMPRESA == null ? '00' : response.data.COD_EMPRESA;
                            this.COD_SUCURSAL = response.data.COD_SUCURSAL == null ? '00' : response.data.COD_SUCURSAL;
                            this.SEDE = response.data.SEDE == null ? '' : response.data.SEDE;
                            this.FEC_REG_CARTA = response.data.FEC_REG_CARTA == null ? '' : response.data.FEC_REG_CARTA;
                            this.LIMITE_CG = response.data.LIM_CARTA == null ? 0 : response.data.LIM_CARTA;
                        }
                    } else {
                        document.location.href = '../CartaGarantia/Editar';
                    }
                    this.verSiniestros();
                }).catch(e => {
                    alert('Ocurrio un error' + e);
                });
            },

            verBeneficioMaximo:  function () {     //  BuscarBenMaxNumDoc     P_DOCIDENT
                this.BENECICIO_MAXIMO = 0;
                //await axios.post(this.SERVER_API + '/api/CartaGarantia/BuscarBeneficioMax', {
                 axios.post(this.SERVER_API + '/api/CartaGarantia/BuscarBenMaxNumDoc', {
                    ID_USUARIO: this.ID_USUARIO,
                    NUMCONTRATOPF: this.CONTRATO.replace(" ",""),
                     NRO_DOCUMENTO: this.NRO_DOCUMENTO.replace(" ", ""),
                }, configImg).then(response => {
                    if (response.data.BENECICIO_MAXIMO > 0) {
                        this.BENECICIO_MAXIMO = response.data.BENECICIO_MAXIMO;
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'No encontramos información del beneficio maximo' });
                });
            },

            //MODIFICADO ML
            cargarExpedientes: async function () {
                this.ListaExpedientes = [];
                await axios.post(this.SERVER_API + '/api/CartaGarantia/ListarArchivosxCarga', {
                    ID_SOURCE: this.ID_SOURCE,
                    ID_USUARIO: this.ID_USUARIO,
                    USUARIO: this.USUARIO,
                }, configImg).then(response => {
                    this.ListaExpedientes = response.data;
                }).catch(e => {
                });
            },

            agregarLista: async function () {
                this.show = true;
                await axios.post(this.SERVER_API + '/api/CartaGarantia/AgregarCarta', {
                    ID: 0,
                    ID_USUARIO: this.ID_USUARIO,
                    USUARIO: this.USUARIO,
                    DETALLE: 'NADA',
                    SEDE: 'SURCO',
                    AFILIADO: this.ASEGURADO,
                    COD_ASEGURADEP: this.COD_ASEGURADEP,
                    CONTRATANTE: this.CONTRATANTE,
                    NUMCONTRATOPF: this.CONTRATO,
                    PROMOTOR: this.PROMOTOR,
                    COD_PLAN: '0',
                    DSC_PLAN: this.PLAN,
                    FEC_INI_AFILIACION: this.FEC_INI_AFILIACION,
                    FEC_HOSPITALIZACION: this.FEC_HOSPITALIZACION,
                    FEC_SOLICITUD: this.FEC_SOLICITUD,
                    CMP: this.CMP,
                    MEDICO_TRATANTE: this.MEDICO,
                    CIE: this.CIE,
                    DIAGNOSTICO: this.DIAGNOSTICO,
                    LIM_CARTA: this.LIMITE_CG,
                    COPAGO: this.COPAGO,
                    COBERTURA: this.COBERTURA,
                    DEDUCIBLE: this.DEDUCIBLE,
                    AREA: this.AREA,
                    PLAN_TRABAJO: this.PLAN_TRABAJO,
                    PROCEDIMIENTO1: this.PROCEDIMIENTO,
                    CODPROC1: '0',
                    OBSERVACION: this.OBSERVACION
                }, configImg).then(response => {
                    if (response.data.V_ID > 0) {
                        this.ID_SOURCE = response.data.V_ID;
                        this.agregarLista2(response.data.V_ID);
                    }
                }).catch(e => {
                });
            },

            agregarLista2: async function (item) {
                await axios.post(this.SERVER_API + '/api/Grupo/AddQueuexGrupo', {
                    ID: item,
                    ID_CARGA: item,
                    TITULO: 'NUEVO CASO ',
                    ID_SEDE: this.ID_SEDE,
                    ID_GRUPO: 16,
                    ID_USUARIO: this.ID_USUARIO,
                    STATUS: 0,
                    CONTENIDO: 'REGISTRANDO ...',
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.ID = response.data.ID;
                        this.show = false;
                        this.cargarRegistro();
                    }
                }).catch(e => {
                });
            },

            doShow: function (field) {
                if (this.CAMPOS[field].if != undefined) {
                    let listaIf = this.CAMPOS[field].if
                    //alert(JSON.stringify(listaIf));
                    for (i in listaIf) {
                        let valor = listaIf[i].object;
                        let valor2 = listaIf[i].igual;
                        let campo = listaIf[i].value;
                        if (this.CAMPOS[valor].value != valor2) {
                            this.CAMPOS[campo].VALIDAR = 0;
                            return false;
                        } else { this.CAMPOS[campo].VALIDAR = 1; }
                    }
                }
                return true;
            },

            restringirRepetidos: async function () {
                await axios.post(this.SERVER_API + '/api/CartaGarantia/ListarCGRestringir', {
                        ID: this.ID,
                        ID_USUARIO: this.ID_USUARIO,
                        NRO_DOCUMENTO: this.NRO_DOCUMENTO,
                        PLAN_TRABAJO: this.PLAN_TRABAJO,
                        DIAGNOSTICO: this.DIAGNOSTICO,
                        DSC_PLAN   : this.PLAN ,
                    }, configImg).then(response => {
                        if (response.data.length > 0) {
                            this.ListaCGA = response.data;
                            this.$bvModal.show('verCGA');
                        }
                    }).catch(e => { });
            },

            //MODIFICADO ML
            Guardar: async function () {
                this.ListaCGA = [];
                let msg = 'Verificar los siguientes campos: ';
                msg = this.FEC_HOSPITAL.length < 5 ? msg + " Fecha de orden" : msg;
                msg = this.CMP == '' ? msg + " CMP" : msg;
                msg = this.MEDICO == '' ? msg + " Médico tratante" : msg;
                msg = this.CIE == '' ? msg + " CIE10" : msg;
                msg = this.DIAGNOSTICO == '' ? msg + " Diagnostico" : msg;
                msg = this.AREA == 'SELECCIONAR' ? msg + " Área" : msg;
                msg = this.PLAN_TRABAJO == '' ? msg + " Plan de trabajo" : msg;
                msg = this.PROCEDIMIENTO == '' ? msg + " Procedimiento" : msg;
                msg = this.COD_TARIFARIO == '' ? msg + " Código de procedimiento" : msg;
                msg = Number(this.LIMITE_CG) < 9 ? msg + " Límite de carta de garantía" : msg;
                msg = this.listaCoberturasAgregadas.length == 0 ? msg + " Agregar cobertura" : msg;

                if (this.ListaAdicionales.length > 0) {
                } else {
                    let valor = await this.restringirRepetidos();
                    // validación de  cartas iniciales considerando los filtros de DNI, Plan de trabajo, diagnóstico, plan contratado, si se encuentra alguna coincidencia con alguna de las cartas aprobadas en los últimos 30 días se debe emitir una alerta
                    msg = this.ListaCGA.length > 0 ? msg + " Hay un carta aprobada con los parametros registrados" : msg;
                }

                if (msg.length > 34) {
                    this.mostrarToast({ toast: 'danger', msg: msg });
                    return 0;
                } else {
                   this.GuardarProceso({ STATUS: 3 });
                }
            },

            //MODIFICADO ML
            GuardarAvance: function () {    // MODIFICADO
                let msg = 'Verificar los siguientes campos: ';
                this.GuardarProceso({ STATUS: 2 });
            },

            GuardarAgendado: function () {    // MODIFICADO
                if (this.hora.length > 2 && this.value != '') {
                    this.show = true;
                    let CAMPOS = '';
                    let Plan = '';
                    //this.ESTADO = 'PROCESO AUDITORIA';
                    let val = (this.value + ' ' + this.hora.slice(0, 5));
                    this.GuardarProceso({ STATUS: 6, TITULO: val });
                } else { this.mostrarToast({ toast: 'warning', msg: 'Verificar fecha y hora ...' }); }
            },

            //MODIFICADO ML
            GuardarProceso: async function (item) {
                if (this.ListaExpedientes.length > 0) {
                    var dateParts = this.FEC_REGSEGURO.split("/");
                    var a = dateParts[2];
                    var m = dateParts[1];
                    var d = dateParts[0];
                    let monto = this.LIMITE_CG == 0 ? '' : this.LIMITE_CG.replace('.', ',');
                    this.show = true;
                    await axios.post(this.SERVER_API + '/api/CartaGarantia/AgregarCarta', {
                        ID: this.ID_SOURCE,
                        ID_USUARIO: this.ID_USUARIO,
                        COD_EMPRESA: this.COD_EMPRESA,
                        COD_SUCURSAL: this.COD_SUCURSAL,
                        USUARIO: this.USUARIO,
                        SEDE: this.SEDE,
                        GRUPO : this.GRUPO,

                        NRO_DOCUMENTO: this.NRO_DOCUMENTO,
                        AFILIADO: this.ASEGURADO,
                        COD_ASEGURADEP: this.COD_ASEGURADEP,
                        CONTRATANTE: this.CONTRATANTE,
                        NUMCONTRATOPF: this.CONTRATO.replace(' ', ''),
                        SEC_CONTRATO : this.SEC_CONTRATO,
                        PROMOTOR: this.PROMOTOR,
                        DSC_PLAN: this.PLAN,
                        COD_PLAN: this.COD_PLAN,
                        FEC_INI_AFILIACION: this.FEC_REGSEGURO,
                        FEC_INI_VIGENCIA: this.FEC_INIVIGSEG,
                        FEC_HOSPITALIZACION: this.FEC_HOSPITAL,
                        FEC_SOLICITUD: this.FEC_SOLICITUD,
                        CMP: this.CMP,
                        MEDICO_TRATANTE: this.MEDICO,
                        CIE: this.CIE,
                        DIAGNOSTICO: this.DIAGNOSTICO,
                        LIM_CARTA: monto,
                        BENECICIO_MAXIMO: this.BENECICIO_MAXIMO == 0 ? '' : this.BENECICIO_MAXIMO,

                        AREA: this.AREA == 'SELECCIONAR' ? 'SELECCIONAR' : this.AREA,
                        PLAN_TRABAJO: this.PLAN_TRABAJO == 'SELECCIONAR' ? 'SELECCIONAR' : this.PLAN_TRABAJO,
                        PROCEDIMIENTO1: this.PROCEDIMIENTO,
                        CODPROC1: this.COD_TARIFARIO,
                        OBSERVACION: this.OBSERVACION,
                        STATUS: item.STATUS,
                        ID_SEDE: this.ID_SEDE,
                    }, configImg).then(response => {
                        if (response.data.V_ID > 0) {
                            axios.post(this.SERVER_URL + '/api/Formulario/MantenimientoQUEUE', {
                                ID: this.ID,
                                ID_SOURCE: this.ID_SOURCE,
                                TITULO: item.TITULO,
                                ID_SEDE: this.ID_SEDE,
                                ID_GRUPO: this.ID_GRUPO,
                                ID_USUARIO: this.ID_USUARIO,
                                P_MENSAJE: item.CAMPOS,
                                TIPO: item.STATUS,
                            }).then(response => {
                                if (response.data.ID > 0) {
                                    var opcion = confirm("La solicitud N° " + this.NUM_CARTA + " ha sido registrada satisfactoriamente.");
                                    if (opcion == true) {
                                        this.show = false;
                                        document.location.href = '../CartaGarantia/Editar';
                                    } else { this.mostrarToast({ toast: 'warning', msg: 'La carta fue registrada correctamente, actualizar la página' }); }
                                }
                            }).catch(e => {
                            });
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'Ocurrio un error, no se logro registrar la carta intentar nuevamente, en caso de persistir el error comunicarse con el administrador del sistema' });
                            this.show = false;
                        }
                    }).catch(e => {
                    });
                } else { this.mostrarToast({ toast: 'warning', msg: 'Agregar un documento adjunto para continuar' }); }
            },

            test: function (item) {
                let valor = item.value;
                if (valor != undefined) {
                    let idPadre = 0; let lista = item.options;
                    for (i in lista) {
                        let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == lista[i].id);
                        if (listaItem.length > 0) {
                            for (var obj in this.CAMPOS) {
                                if (`${this.CAMPOS[obj].COLUMNA}` == listaItem[0].PLANTILLA) {    //alert(nuevoControl);
                                    this.CAMPOS[obj].options = [];
                                    this.CAMPOS[obj].VALIDAR = 0;
                                }
                            }
                        }
                        if (lista[i].value == valor) idPadre = lista[i].id;
                    }
                    let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == idPadre);
                    if (listaItem.length > 0) {
                        let nuevoControl = listaItem[0].PLANTILLA;
                        for (var obj in this.CAMPOS) {
                            if (`${this.CAMPOS[obj].COLUMNA}` == nuevoControl) {    //alert(nuevoControl);
                                this.CAMPOS[obj].options = [];
                                this.CAMPOS[obj].VALIDAR = 0;
                                let item = [];

                                for (var ite in listaItem) {
                                    item.push({ id: listaItem[ite].ID, idControl: listaItem[ite].ID_GRUPO, text: listaItem[ite].TITULO, value: listaItem[ite].TITULO });
                                    this.CAMPOS[obj].value = listaItem[ite].TITULO;
                                    this.CAMPOS[obj].VALIDAR = 1;
                                }
                                if (`${this.CAMPOS[obj].type}` == 'multi') {
                                    this.CAMPOS[obj].value = [];
                                }
                                this.CAMPOS[obj].options = item;
                            }
                        }
                    }
                }
            },
            //MODIFICADO ML
            fileDescargar: function (item) {
                axios.get(item.URL, { responseType: 'blob' })
                    .then(response => {
                        const blob = new Blob([response.data], { type: 'application/pdf' })
                        const link = document.createElement('a')
                        link.href = URL.createObjectURL(blob)
                        link.download = item.LABEL
                        link.click()
                        URL.revokeObjectURL(link.href)
                        this.fileChange({ ID: item.ID, STATUS: 1, TITULO: item.TITULO, EXT: item.EXT, BANNER: item.BANNER });
                    }).catch(console.error)
            },
            //MODIFICADO ML
            fileEliminar: function (item) {
                this.fileChange({ ID: item.ID, STATUS: item.STATUS, TITULO: item.TITULO, EXT: item.EXT, BANNER: item.BANNER });
            },
            //MODIFICADO ML
            fileChange: function (item) {
                this.show = true;
                axios.post(this.SERVER_API + '/api/CartaGarantia/EliminarArchivo', {
                    ID_FILE: item.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    STATUS: item.STATUS,
                }, configImg).then(response => {
                    if (response.data.V_ID > 0) {
                        this.show = false;
                        this.ListaExpedientes = this.ListaExpedientes.filter(x => x.ID != item.ID);
                        this.ListaExpedientes.push({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, PESO: 0, IP_USUARIO: '', FECHA: '', STATUS: item.STATUS, BANNER: item.BANNER });
                        this.ListaExpedientes.sort((a, b) => (a.ID > b.ID) ? 1 : ((b.ID > a.ID) ? -1 : 0));
                    } else {
                        this.show = false;
                        this.mostrarToast({ toast: 'warning', msg: 'Ocurrio un error ...' });
                    }
                }).catch(e => {
                });
            },

            grafico: function () {
                this.graficoAvance = [];
                axios.post(this.SERVER_API + '/api/Usuario/ListarUsuariosxCarga_T', {
                    ID: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let lista1 = response.data;
                        let columnas = {};
                        for (let tajada1 in lista1) {
                            columnas[`${lista1[tajada1].FECHA}`] = `${lista1[tajada1].ID}`; //  alert(JSON.stringify(`${lista[items].ESTADO}`));
                        }
                        this.graficoAvance = columnas;
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            //MODIFICADO ML
            listarGruposxUsuario: function () {   // MODIFICADO
                //this.show = true;
                axios.post(this.SERVER_API + '/api/Grupo/ListarGruposxPrograma', {
                    ID: this.ID_USUARIO,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) { this.ListaGruposxUsuario = response.data; }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },
            //MODIFICADO ML
            listarGraficoGeneral: function () {    // MODIFICADO
                this.ListaGeneral = []; this.graficoGeneral = []; this.graficoAvance2 = []; this.ListaProceso = [];
                axios.post(this.SERVER_API + '/api/Grupo/ListarQueuexGrupoSede', {
                    ID: 16,
                    ID_GRUPO: 16,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let lista = response.data;
                        let Pendiente = []; let Proceso = []; let Terminado = []; let Monitores = []; let Estudios = [];
                        Pendiente = lista.filter(x => x.ACCIONES == 'PENDIENTE');
                        Proceso = lista.filter(x => x.ACCIONES == 'PROCESO' || x.ACCIONES == 'AGENDADO' || x.ACCIONES == 'INTERNO');
                        Terminado = lista.filter(x => x.ACCIONES == 'TERMINADO');

                        map = new Map();
                        for (let i of Pendiente) {
                            if (!map.has(i.RESULTADO)) {
                                map.set(i.RESULTADO, true);
                                Estudios.push({ ESTUDIO: i.RESULTADO });
                            }
                        }           //  alert(JSON.stringify(`${lista[items].ESTADO}`));

                        let uno = []; let grupos = { INC: 0 }; let registros = { INC: 0 };    //alert(i.ESTUDIO);
                        for (let i of Estudios) {
                            grupos = {};
                            registros = {};
                            let filas = lista.filter(x => x.RESULTADO == i.ESTUDIO);
                            if (filas.length > 0) {
                                grupos['GRAFICA'] = filas.length; //registros[i.ESTUDIO] = filas.length;
                                grupos['ESTUDIO'] = i.ESTUDIO;
                                uno.push(grupos);
                            }
                        }
                        this.ListaProceso = Proceso;
                        this.ListaGeneral.push({
                            PENDIENTE: Pendiente.length,
                            PROCESO: Proceso.length,
                            TERMINADO: Terminado.length,
                            TOTAL: lista.length,
                            MONITORES: Monitores.length,
                            ESTUDIOS: uno,
                        });

                    }
                        this.listarAdicionales();
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });
            },

            listarAdicionales: async function () {
                await axios.post(this.SERVER_API + '/api/Grupo/ListarQueuexCarta', {
                    ID: 16,
                    ID_GRUPO: 16,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    //if (response.data.length > 0) {
                        let adicionales = response.data;
                        for (let i of adicionales) {
                            this.ListaProceso.push({ ID: i.ID, TITULO: i.TITULO, RESULTADO: i.RESULTADO, ACCIONES: i.ACCIONES, FECHA: i.FECHA});
                        }
                    //}
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });
            },

            darPrioridad: function (item) {
                var opcion = confirm("Deseas asignar prioridad al afiliado - " + item.TITULO + " con carta N° " + item.RESULTADO);
                if (opcion == true) {
                    axios.post(this.SERVER_API + '/api/Grupo/PrioridadQueuexGrupoSede', {
                        ID: item.ID,
                        ID_USUARIO: this.ID_USUARIO,
                        ID_SEDE: this.ID_SEDE,
                    }, configImg).then(response => {
                        if (response.data.ID > 0) {
                            sessionStorage.setItem('INICIO', 0);
                            document.location.href = '../CartaGarantia/Editar';
                        }
                    }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });

                } else { this.mostrarToast({ toast: 'warning', msg: 'Cancelado por el usuario' }); }
            },

            listarItems: function () {
                //axios.defaults.headers.common['Authorization'] = 'Bearer ' + this.token;
                axios.post('@apiServidor' + '/api/Helpers/ListarItemsControl', {
                    ID_GRUPO: 16,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.ListaItems = response.data;        //alert(JSON.stringify(lista));
                        this.ListaArea = this.ListaItems.filter(x => x.ID_CONTROL == 1);
                        this.ListaPlanTrabajo_ = this.ListaItems.filter(x => x.ID_CONTROL == 2);
                        this.ListaMotivo = this.ListaItems.filter(x => x.ID_CONTROL == 3);
                        this.ListaProcedimiento = this.ListaItems.filter(x => x.ID_CONTROL == 4);
                        this.ListaItems = [];
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'Usuario incorrecto ...' });
                    }
                }).catch(e => { });
            },

            listarCoberturas: async function () {
                if (this.SEDE.length > 1) {
                    await axios.post(this.SERVER_API + '/api/CartaGarantia/ObtenerCodigoCobertura', {
                        PLAN: this.COD_PLAN,
                        CONTRATO: this.CONTRATO,
                    }, configImg).then(response => {
                            this.listarCoberturas_2(response.data.COD);
                    }).catch(e => { });
                } else {
                    this.listarSedes();
                }
            },

            listarCoberturas_2: async function (codigo) {
                let url = (this.GRUPO == 'ONCOLOGICO') ? '/api/CartaGarantia/ListarCoberturaOnco' : '/api/CartaGarantia/ListarCoberturas';
                await axios.post(this.SERVER_API + url, {
                    PLAN: codigo, //this.COD_PLAN,
                    CONTRATO: this.CONTRATO,
                    SECUENCIA: this.COD_ASEGURADEP,
                    SUCURSAL: this.COD_SUCURSAL,
                    SEDE: this.COD_EMPRESA,   // this.SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.listaCoberturas = response.data; // alert(JSON.stringify(this.listaCoberturas));
                        this.listaCoberturas_ = response.data;
                        this.$bvModal.show('solicitarCobertura');
                        this.COBERTURA = '';
                        this.COPAGO = '';
                        this.DEDUCIBLE = '';
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => { });
            },
            



            buscarCobertura: function (item) {
                if (this.CAMPO.length > 0) {
                    let palabra = this.CAMPO.toUpperCase();
                    this.listaCoberturas = this.listaCoberturas_.filter(x => {
                        return x.COBERTURA.includes(palabra);
                    });
                }
                else {
                    this.listaCoberturas = this.listaCoberturas_;
                }
            },

            elegirCobertura: async function (item) {
                if (item.COPAGO.length > 0 && item.DEDUCIBLE.length > 1) {
                    var afiliado = await this.resultadoCobertura();
                    this.COBERTURA = item.COBERTURA;
                    this.COPAGO = item.COPAGO;
                    this.DEDUCIBLE = item.DEDUCIBLE;
                    this.listaCoberturas = [];
                    this.listaCoberturas_ = [];
                    axios.post(this.SERVER_API + '/api/CartaGarantia/InsertarCoberturaCarta', {
                        ID: 0,
                        ID_SOURCE: this.ID_SOURCE,
                        COBERTURA: this.COBERTURA,
                        COPAGO: this.COPAGO,
                        DEDUCIBLE: this.DEDUCIBLE,
                        GRUPO: item.GRUPO,
                        TIPO: 1,
                        ID_USUARIO: this.ID_USUARIO,
                    }, configImg).then(response => {
                        if (response.data.ID > 0) {
                            this.listarCoberturasAgregadas();
                            this.$bvModal.hide('solicitarCobertura');
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        }
                    }).catch(e => { });
                }
                 this.CAMPO = '';
            },

            resultadoCobertura: async function () {
                let resultado = 0;
                await axios.post(this.SERVER_API + '/api/CartaGarantia/AdmAfiAccidentes', {
                    P_CODIGO_PLAN: this.COD_PLAN,
                    P_CODIGO_COBERTURA: this.ID_COBERTURA,
                    P_DOCUMENTO: this.NRO_DOCUMENTO
                }, configImg).then(response => {
                    if (response.data.ID == '2') {
                        resultado = 2;
                        this.listaAfiliados = [];
                        axios.post(this.SERVER_API + '/api/CartaGarantia/listaPacientes', {
                            NUM_CONTRATO: "",
                            NOM_PACIENTE: "",
                            NUM_DOCUMENTO: this.NRO_DOCUMENTO,
                            TIPO: 2,
                        }, configImg).then(response => {
                            if (response.data.length > 0) {
                                this.listaAfiliados = response.data;
                                this.$bvModal.show('verAlertaPlanAccidentes');

                            }
                        }).catch(e => {
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        });
                        // Paciente tiene plan accidental, desea continuar ?
                    }
                }).catch(e => { });
                return resultado;
            },

            listarCoberturasAgregadas: async function () {
                this.listaCoberturasAgregadas = [];
                await axios.post(this.SERVER_API + '/api/CartaGarantia/ListarCoberturasAgregadas', {
                    ID: this.ID_SOURCE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.listaCoberturasAgregadas = response.data;
                    }
                }).catch(e => { });
            },

            eliminarCoberturaAgregada: function (item) {
                this.listaCoberturasAgregadas = [];
                axios.post(this.SERVER_API + '/api/CartaGarantia/InsertarCoberturaCarta', {
                    ID: item.ID,
                    TIPO: 3,
                    ID_USUARIO: this.ID_USUARIO,
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.listarCoberturasAgregadas();
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => { });
            },

            buscarPlanTrabajo: function (item) {
                this.CAMPO = this.CAMPO.toUpperCase();
                if (this.CAMPO.length > 0) {
                    let palabra = this.CAMPO.toUpperCase();
                    this.ListaPlanTrabajo = this.ListaPlanTrabajo_.filter(x => {
                        return x.TITULO.includes(palabra);
                    });
                }
                else {
                    this.ListaPlanTrabajo = [];
                }

            },

            elegirPlanTrabajo: function (item) {
                this.COBERTURA = item.COBERTURA;
                this.COPAGO = item.COPAGO;
                this.listaCoberturas = [];
                this.listaCoberturas_ = [];
                this.CAMPO = '';
                this.stateCobertura = true;
                this.$bvModal.hide('solicitarCobertura');
            },

            listarProcedimientos: function () {
                axios.post(this.SERVER_API + '/api/CartaGarantia/ListarProcedimientos', {
                    PROCEDIMIENTO: this.PROCEDIMIENTO,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.ListaProcedimiento = response.data;        //alert(JSON.stringify(lista));
                        this.ListaProcedimiento_ = response.data;
                        this.$bvModal.show('solicitarProcedimiento');
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => { });
            },

            buscarProcedimiento: function (item) {
                if (this.CAMPO.length > 0) {
                    let palabra = this.CAMPO.toUpperCase();
                    this.ListaProcedimiento = this.ListaProcedimiento_.filter(x => {
                        return x.PROCEDIMIENTO.includes(palabra);
                    });
                }
                else {
                    this.ListaProcedimiento = this.ListaProcedimiento_;
                }
            },

            elegirProcedimiento: function (item) {
                this.PROCEDIMIENTO = item.PROCEDIMIENTO;
                this.COD_TARIFARIO = item.COD_TARIFARIO;
                this.ListaProcedimiento = [];
                this.ListaProcedimiento_ = [];
                this.CAMPO = '';
                this.stateProcedimiento = true;
                this.$bvModal.hide('solicitarProcedimiento');
            },

            listarSedes: function () {
                //axios.defaults.headers.common['Authorization'] = 'Bearer ' + this.token;
                axios.post('@apiServidor' + '/api/CartaGarantia/ListarSedes', {
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.ListaSedes = response.data;
                        this.$bvModal.show('solicitarSede');
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => { });
            },

            elegirSede: function (item) {
                this.COD_EMPRESA= item.COD_EMPRESA;
                this.COD_SUCURSAL= item.COD_SUCURSAL;
                this.SEDE = item.SEDE;
                this.$bvModal.hide('solicitarSede');
                this.listarCoberturas();
            },

            onContext(ctx) {
                this.stateFecHospital = false;
                this.stateFecSolicitud = false;
                if (this.FEC_HOSPITAL.length > 2) { this.stateFecHospital = true; } else { this.stateFecHospital = false; }
                if (this.FEC_SOLICITUD.length > 2) { this.stateFecSolicitud = true; } else { this.stateFecSolicitud = false; }
            },

            limpiarSede: function () {
                this.COD_EMPRESA = '';
                this.COD_SUCURSAL = '';
                this.SEDE = '';

                this.COBERTURA = '';
                this.COPAGO = '';
                this.DEDUCIBLE = '';
                //this.BENECICIO_MAXIMO = '';
                this.listarSedes();
            },

            AgregarPlanTrabajo: function () {
                if (this.CAMPO.length > 5) {
                    axios.post(this.SERVER_API + '/api/Helpers/AdministrarItems', {
                        ID          : 0 ,
                        ID_GRUPO    : 16,
                        ID_CONTROL  : 2 ,
                        ID_PADRE    : 0 ,
                        TITULO      : this.CAMPO,
                        DETALLE     : '',
                        CAMPO1      : '',
                        CAMPO2      : '',
                        CAMPO3      : '',
                        ID_USUARIO  : this.ID_USUARIO,
                    }, configImg).then(response => {
                        if (response.data.ID > 0) {
                            this.ListaPlanTrabajo_.push({ ID: response.data.ID, TITULO: this.CAMPO, ID_CONTROL: 2 });
                            this.buscarPlanTrabajo(this.CAMPO);
                            this.mostrarToast({ toast: 'success', msg: 'Hola ' + this.USUARIO + ', se agregó correctamente el nuevo plan de trabajo. ' });
                        } else { };
                        //this.ListaPlanTrabajo_ = response.data;
                    }).catch(e => {
                    });
                } else { this.mostrarToast({ toast: 'warning', msg: 'Hola '+ this.USUARIO +', asegurate de agregar un nuevo plan de trabajo valido. ' }); }
            },

            verAdicionales: async function () {
                this.ListaAdicionales = [];
                await axios.post('@apiServidor' + '/api/CartaGarantia/ListarAdicionales', {
                    ID: this.ID_SOURCE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.ListaAdicionales = response.data;
                    }
                }).catch(e => { });
            },
        }
    })

    app.iniciar();
    app.listarItems();
    app.listarGraficoGeneral();
    app.grafico();

</script>

