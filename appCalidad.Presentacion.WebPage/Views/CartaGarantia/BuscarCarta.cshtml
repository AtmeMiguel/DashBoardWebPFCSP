
@{
    string Title = "Buscador de carta";
    ViewBag.Title = Title;
    string user = System.Configuration.ConfigurationManager.AppSettings["JWT_USUARIO"];
    string pass = System.Configuration.ConfigurationManager.AppSettings["JWT_PASSWORD"];
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
    string webServidor = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];
}

<div id="app">
    <div class="container">
        <br />
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-5 ">
                <div class="card-header">RESUMEN</div>
                <div class="text-center m-2  text-secondary ">
                    <div class="row" v-if="ListaDocPago.length > 0">
                        <bar-chart :styles="myStyles" :data="graficoGeneral"></bar-chart>
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-md-12 col-lg-7 ">
                <div class="card-header">FILTROS</div>
                <br /><br />
                <div class="row">
                    <div class="col-6">
                        <b-form-group label="Fecha inicio"
                                      label-for="txtfecini"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecini" v-model="FEC_INI"
                                               class="mb-2" :max="max" today-button reset-button
                                               @*:date-format-options="{ year: 'numeric', month: 'numeric', day: 'numeric' }"  locale="en"*@
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }" locale="es"></b-form-datepicker>
                        </b-form-group>
                    </div>
                    <div class="col-6">
                        <b-form-group label="Fecha final"
                                      label-for="txtfecfin"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecfin" v-model="FEC_FIN"
                                               locale="es" :max="max" class="mb-2" today-button reset-button
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }"></b-form-datepicker>
                        </b-form-group>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <b-form-group id="input-group-1-responsable"
                                      label="Búsqueda por afiliado:"
                                      label-for="txtresponsable"
                                      description="">
                            <b-form-input id="txtresponsable"
                                          v-model="AFILIADO"
                                          type="text"
                                          v-on:keyup="validaCampos(1)"
                                          placeholder=""></b-form-input>
                        </b-form-group>
                    </div>
                    <div class="col-6">
                        <br />
                        <center>
                            <b-button size="large" v-on:click="ESTADO='SELECCIONAR', listarDocPago({ TIPO: '2', ESTADO: ''}), NOMBRE=''" variant="warning" pill><b-avatar variant="outline-info" icon="funnel" size="2rem"></b-avatar>Buscar</b-button>
                        </center>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 cajaTexto">
                        <span class="text-black-50 text-sm-right">Estado</span> <br />
                        <b-form-select v-model="ESTADO" class="cajaTexto2" v-on:change="AFILIADO='', listarDocPago({ TIPO: '2', ESTADO: ''}), NOMBRE=''">
                            <template #first>
                                <b-form-select-option v-model="SELECCIONAR" value="null">SELECCIONAR</b-form-select-option>
                            </template>
                            <b-form-select-option v-for="i in ListaEstado" :value="i.TITULO">{{i.TITULO}}</b-form-select-option>
                        </b-form-select>
                    </div>
                </div>
                <br /><br /><br />
                <div class="row" v-if="ListaDocPago.length > 0">
                    <div class="col-12">
                        <b-form-group id="input-group-1-responsable"
                                      label="Búsqueda secundaria:"
                                      label-for="txtresponsable"
                                      description="">
                            <b-form-input id="txtresponsable"
                                          v-model="NOMBRE"
                                          type="text"
                                          v-on:keyup="buscar()"
                                          placeholder=""></b-form-input>
                        </b-form-group>
                    </div>

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <br />
                <template>
                    <b-container fluid>
                        <b-row class="p-0">
                        </b-row>
                        <!-- User Interface controls -->
                        <b-row class="p-0">
                            <b-col lg="12" class="my-1">
                                <div class="alert alert-warning" role="alert">
                                    <strong> Cantidad de registros: {{canFilas}}</strong>, exportar a excel
                                    <b-avatar @@click="exportExcel()" title="Exportar a Excel" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                </div>
                            </b-col>
                            <b-col lg="6" class="my-1">

                            </b-col>
                        </b-row>
                        <b-row>
                            <b-table striped hover :items="ListaDocPago"
                                     :current-page="currentPage"
                                     :fields="Columnas"
                                     :per-page="perPage"
                                     stacked="md"
                                     head-variant="light"
                                     responsive
                                     show-empty
                                     small
                                     @@filtered="onFiltered">
                                <template #empty="scope">
                                    <h6 class="text-center">No hay filas para mostrar.</h6>
                                </template>
                                <template #cell(name)="row">
                                    {{ row.value.first }} {{ row.value.last }}
                                </template>
                                <template #cell(ID)="row">
                                    <b-avatar v-on:click="listarDocPagoDetalle(row.item, row.index, false,'individual')" title="Ver Detalle" button icon="clock-history" size="3rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                </template>
                                <template #cell(ACCIONES)="row">
                                    <template v-if="ROL=='CREADOR' || ROL=='APROBADOR' || ROL=='AUTORIZADOR'">
                                        <template v-if="row.item.ESTADO =='PENDIENTE' || row.item.ESTADO =='DEVUELTO' || row.item.ESTADO =='NUEVO' || row.item.ESTADO =='RECIBIDO' || row.item.ESTADO =='OBSERVADO'">
                                            <b-avatar v-on:click="anularCarta(row.item, row.index, false,'individual')" title="Administrar estado" button icon="reply" size="2rem" variant="light" class="align-center btn-outline-danger"></b-avatar>
                                        </template>
                                    </template>
                                    <template v-if="ROL=='CREADOR'">
                                        <template v-if="row.item.ESTADO =='APROBADO' && (row.item.AMPLIACION =='000000000-' || row.item.AMPLIACION =='000000000-0')">
                                            <b-avatar v-on:click="adicional(row.item, row.index, false,'individual')" title="Adicional" button icon="bookmark-plus" size="2rem" variant="light" class="align-center btn-outline-success"></b-avatar>
                                        </template>
                                    </template>
                                    <template v-if="ROL=='APROBADOR' || ROL=='AUTORIZADOR'">
                                        <template v-if="row.item.ESTADO =='APROBADO' || row.item.ESTADO =='RECHAZADO' || row.item.ESTADO =='OBSERVADO' || row.item.ESTADO == 'PENDIENTE' || row.item.ESTADO == 'DEVUELTO' || row.item.ESTADO == 'ANULADO'">
                                            <b-avatar v-on:click="modificarEstado(row.item, row.index, false,'individual')" title="Administrar estado" button icon="reply" size="2rem" variant="light" class="align-center btn-outline-success"></b-avatar>
                                        </template>
                                        <template v-if="row.item.ESTADO =='RECIBIDO'">
                                            <b-avatar v-on:click="autoAsignar(row.item, row.index, false,'individual')" title="Auto asignar caso" button icon="person-check" size="2rem" variant="light" class="align-center btn-outline-danger"></b-avatar>
                                        </template>
                                    </template>
                                    <template v-if="row.item.ESTADO=='OBSERVADO' || row.item.ESTADO=='APROBADO' || row.item.ESTADO=='RECHAZADO' ">
                                        <b-avatar v-on:click="imprimir(row.item, row.index, false,'individual')" title="Imprimir" button icon="printer" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                    </template>
                                </template>

                                <template #cell(ESTADO)="row">
                                    @*<b-badge pill variant="success">{{row.item.ESTADO}}</b-badge>*@
                                    <b-badge v-if="row.item.ESTADO=='APROBADO'" pill variant="success">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='RECHAZADO'" pill variant="danger">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='OBSERVADO'" pill variant="info">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='DEVUELTO'" pill variant="info">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='RECIBIDO'" pill variant="warning">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='ANULADO'" pill variant="dark">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='PENDIENTE'" pill variant="secondary">{{row.item.ESTADO}}</b-badge>
                                    <b-badge v-if="row.item.ESTADO=='PROCESO AUDITORIA'" pill variant="warning">{{row.item.ESTADO}}</b-badge>
                                </template>
                            </b-table>
                        </b-row>
                        <br />

                        <!-- User Interface controls -->
                        <b-row v-if="canFilas>0">

                            <b-col sm="5" md="6" class="my-1">
                                <b-form-group label="Por Pagina"
                                              label-for="per-page-select"
                                              label-cols-sm="6"
                                              label-cols-md="4"
                                              label-cols-lg="3"
                                              label-align-sm="right"
                                              label-size="sm"
                                              class="mb-0">
                                    <b-form-select id="per-page-select"
                                                   v-model="perPage"
                                                   :options="pageOptions"
                                                   size="sm"></b-form-select>
                                </b-form-group>
                            </b-col>

                            <b-col sm="7" md="6" class="my-1">
                                <b-pagination v-model="currentPage"
                                              :total-rows="totalRows"
                                              :per-page="perPage"
                                              align="fill"
                                              size="sm"
                                              class="my-0"></b-pagination>
                            </b-col>
                        </b-row>
                    </b-container>
                </template>
            </div>
        </div>

    </div>
    <b-modal id="VerDetalle" size="xl" data-html="true" hide-footer hide-header>
        @*@@hide="salida"*@
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado">
                    <div class="card-body">


                        <div class="row" v-if="ID>0">
                            <div class="col-sm-12 col-md-12 col-lg-12">
                                <div class="card redondoCardLight   colorFondo" style="height: 320px;">
                                    <div class="card-body">
                                        <div class="row" style=" margin-top: -10px; overflow: scroll; height: 300px; ">
                                            <template v-for="(item, index) in ListaExpedientes">
                                                <div class="col-xs-12 col-sm-12 col-lg-4">
                                                    <span class="btn btn-link text-dark" style="height: 250px; padding: 0px; cursor: zoom-in;">
                                                        <span class="badge badge-light text-black-50" style="font-size: 8px; height: 10px; margin-top: -30px; margin-left: 20px; z-index: 10;">{{item.TITULO}}</span>
                                                        <template v-if="item.EXT == '.pdf'">
                                                            <img v-on:click="abrirPDF(URL + item.BANNER)" src="../Recursos/pdf.jpg" style="border-radius: 18px; object-fit: cover; " class="cajaGrisClaroDelgado" height="200px" width="100%">
                                                        </template>
                                                        <template v-else="item.EXT == '.pdf'">
                                                            <img v-img v-bind:src="URL + item.BANNER" v-if="item.STATUS=='1'" class="cajaGrisClaroDelgado" style="border-radius: 18px; object-fit: cover; " height="200px" width="100%">
                                                            <img v-img v-bind:src="URL + item.BANNER" v-if="item.STATUS=='0'" class="cajaRojoClaroDelgado" style="border-radius: 18px; object-fit: cover; filter: blur(0.4rem);" height="200px" width="100%">
                                                        </template>

                                                        <template v-if="item.STATUS== '1'">
                                                            <span class="bg-light" style="position: relative; bottom: 40px; right: 0px; z-index: 10; padding: 15px; border-radius: 18px; ">
                                                                <b-button-group>
                                                                    <span v-on:click="fileEliminar({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS: 0, BANNER: item.BANNER })"> <img src="../icons/trash3.svg" style="height: 30px; width: 30px; "></span>
                                                                    <span style="padding-left:25px" v-on:click="fileDescargar({ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS :1, URL: URL + item.BANNER, LABEL: item.TITULO + item.EXT, BANNER: item.BANNER })"> <img src="../icons/arrow-down-circle.svg" style="height: 30px; width: 30px; "></span>
                                                                </b-button-group>
                                                            </span>
                                                        </template>
                                                        <template v-if="item.STATUS== '0'">
                                                            <span class="bg-danger" style="position: relative; bottom: 40px; right: 0px; z-index: 10; padding: 15px; border-radius: 18px; ">
                                                                <b-button-group>
                                                                    <span v-on:click="fileEliminar({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS: 1, BANNER: item.BANNER })"> <img src="../icons/arrow-repeat.svg" style="height: 30px; width: 30px; "></span>
                                                                    <span style="padding-left:25px" v-on:click="fileDescargar({ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, STATUS :1, URL: URL + item.BANNER, LABEL: item.TITULO + item.EXT, BANNER: item.BANNER })"> <img src="../icons/arrow-down-circle.svg" style="height: 30px; width: 30px; "></span>
                                                                </b-button-group>
                                                            </span>
                                                        </template>
                                                    </span>
                                                    <br />
                                                </div>
                                            </template>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <div class="row">
                            <div class="col-9">Carta N° {{NUM_CARTA}}</div><div class="col-3"><b-avatar @@click="exportarDetalleExcel()" title="Exportar a Excel" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar></div>
                            <div class="col-9">Afiliado {{AFILIADO}}</div>
                        </div>
                        <div class="card-text">
                            <b-table striped hover :items="ListaDocPagoDet"
                                     :current-page="currentPage"
                                     @*:fields="Columnas"*@
                                     :per-page="perPage"
                                     stacked="md"
                                     head-variant="light"
                                     responsive
                                     show-empty
                                     @*sticky-header="200px"*@
                                     small
                                     @@filtered="onFiltered">
                            </b-table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="cambiarEstado" size="md" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">CAMBIAR ESTADO DE CARTA</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-12 col-lg-12 cajaTexto">
                                    <span class="text-black-50 text-sm-right">Motivo de cambio</span><br />
                                    <b-form-textarea id="textarea" v-model="OBSERVACION" placeholder="llenar motivo ..." rows="3" class="cajaTexto2" max-rows="6"></b-form-textarea>
                                </div>
                            </div>

                            <div class="row" v-if="OBSERVACION.length>10">
                                <div class="col-xs-12 col-md-12 col-lg-12" v-if="ESTADO =='APROBADO' || ESTADO =='RECHAZADO' || ESTADO =='OBSERVADO' || ESTADO =='PENDIENTE' || ESTADO =='DEVUELTO' || ESTADO =='ANULADO'">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;">Estado: <b>RECIBIDO</b></span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="briefcase" variant="warning" title="Estado" class="align-center" size="4em" v-on:click="elegirEstado( { ESTADO: 'RECIBIDO' } )"></b-avatar>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="anularCarta" size="md" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">ANULAR CARTA</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-12 col-lg-12 cajaTexto">
                                    <span class="text-black-50 text-sm-right">Motivo de cambio</span><br />
                                    <b-form-textarea id="textarea" v-model="OBSERVACION" placeholder="llenar motivo ..." rows="3" class="cajaTexto2" max-rows="6"></b-form-textarea>
                                </div>
                            </div>

                            <div class="row" v-if="OBSERVACION.length>10">
                                <div class="col-xs-12 col-md-12 col-lg-12" v-if="ESTADO =='PENDIENTE' || ESTADO =='DEVUELTO' || ESTADO =='NUEVO' || ESTADO =='RECIBIDO' || ESTADO =='OBSERVADO'">
                                    <div class="row">
                                        <div class="col-9 text-left">
                                            <span style="font-size:14px;">Estado: <b>ANULADO</b></span>
                                        </div>
                                        <div class="col-3 text-center">
                                            <b-avatar button icon="briefcase" variant="danger" title="Estado" class="align-center" size="4em" v-on:click="elegirEstado( { ESTADO: 'ANULADO' } )"></b-avatar>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>



</div>

<script>
    const configImg = {
            headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` }
        };
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    // 15th two months prior           216
    const minDate = new Date(today)
    minDate.setMonth(minDate.getMonth() - 1)
    //minDate.setDate(15)
    // 15th in two months
    const maxDate = new Date(today)
    maxDate.setMonth(maxDate.getMonth())
    //maxDate.setDate(15)

    var app = new Vue({
                el: '#app',
        data: {
            min: minDate,
            max: maxDate,
            graficoGeneral: [],
            selected: '3',
            options: [{ text: 'PENDIENTE', value: '1' }, { text: 'AFILIACIÓN', value: '2' }, { text: 'CONFIRMACIÓN PAGO', value: '3' }],
            ListaEstados: [{ text: 'RECIBIDO', value: '1' }, { text: 'ANULADO', value: '2' }],
            indicador: false,

            ID_USUARIO: '@User.Identity.Name',
            USUARIO: '@Session["Usuario"].ToString()',
            NOMBRE_USUARIO: '@Session["Nombres"].ToString()' +' '+ '@Session["Apellidos"].ToString()',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',
            URL: '@webServidor',
            ID_SEDE: '@Session["ID_SEDE"].ToString()',
            SEDE: '@Session["SEDE"].ToString()',
            ROL: '@Session["ROL"].ToString()',


            PAGINA: '@Title',
            SITE: '',
            SELECCIONAR: 'SELECCIONAR',
            ID: 0,
            desFiltros: '',
            canFilas: '0',
            nrofac: '',
            nroserie: '',
            FEC_INI: maxDate,
            FEC_FIN: maxDate,
            NOMBRE: '',
            ESTADO: 'SELECCIONAR',
            OBSERVACION: '',
            FEC_ESTADO_INI: '',
            responsable: '',

            ACCION: '',
            TITULO: '',
            AFILIADO: '',
            NUM_CARTA: '',

            ListaSeleccionados:[],
            ListaDocPago: [],
            ListaDocPago_: [],
            ListaDocPagoDet: [],
            ListaEstado: [],
            ListaExpedientes: [],
            Lista: [],
              //  { key: 'DNROLOTE', label: 'LOTE', sortable: true, variant: 'secondary' }
            Columnas: [
                'ID', 'USUARIO_CREADOR', 'NUM_CARTA', 'AMPLIACION', { key: 'NUM_COMNTRATOPF', label: 'NUM_CONTRATOPF' }, { key: 'AFILIADO', label: 'PACIENTE' }, 'PLAN', { key: 'LIM_CARTA', label: 'MONTO' }, { key: 'LIM_CARTA_APROBADA', label: 'LIM CARTA APROBADA' }, { key: 'FECHA_SOLICITUD', label: 'FEC_REGISTRO' }, 'ESTADO', 'SUB_ESTADO', 'ACCIONES', 'SEDE', { key: 'MOT_CAMB_EST', label: 'MOT_DEV' }, { key: 'OBS_OBSERVA_SOL', label: 'OBS_OBSERVA_SOL' }, { key: 'OBS_RECHAZO_CARTA', label: 'OBS_RECHAZO_CARTA' }
                //{ key: 'DNROLOTE', label: 'LOTE' }, { key: 'DFECHA_CAB', label: 'FECHA LOTE' }, { key: 'DRESP_CAB', label: 'RESPONSABLE' }, { key: 'DFECHA', label: 'FEC. FACTURA' }, { key: 'SNROFAC', label: 'SERIE' }, { key: 'DNROFAC', label: 'CORRELATIVO' }, { key: 'MTO_TOTC', label: 'MONTO' }, 'MOTIVO', 'OBSERVACIONES', 'ACCIONES', { key: 'FLG_EST_DOC', label: 'ESTADO' }, { key: 'DFECHA_APRO', label: 'FEC MOD' },  { key: 'SELECCIONAR', label: 'Sel.'}
                //'ID', 'NUM_CARTA', 'NUM_COMNTRATOPF', 'AFILIADO', 'PLAN', 'LIM_CARTA', 'LIM_CARTA_APROBADA', 'FEC_APRO_CARTA', 'ESTADO', 'SUB_ESTADO', 'ACCIONES', 'SEDE', 'OBS_RECHAZO_CARTA', 'OBS_OBSERVA_SOL', 'OBS_OBSERVA_SOL', 'OBSERVACION',  'COBERTURA', 'DEDUCIBLE', 'COASEGURO', 'CIE10', 'DIAGNOSTICO', 'MEDICO_TRATANTE', 'MEDICO_AUDITOR_PF', 'MOTIVO_CARTA', 'AREA', 'FEC_APRO_CARTA_2', 'COMPLEJIDAD_CARTA', 'OBS_APRUEBA_SOL', 'FEC_RECHZ_CARTA', 'FEC_OBS_CARTA',  'USUARIO_APROBADOR', 'ULT_MOV', 'FEC_ULT_MOV', 'USU_ULT_MOV', 'PLAN_TRABAJO',  'FECHA_SOLICITUD', 'HORA_SOLICITUD', 'FECHA_RECIBE_SOLICITUD', 'HORA_RECIBE_SOLICITUD', 'FECHA_DEVOLUCION_SOL', 'HORA_DEVOLUCION_SOL', 'FECHA_REENVIO_SOL', 'HORA_REENVIO_SOL', 'FECHA_APRUEBA_CARTA', 'HORA_APRUEBA_CARTA', 'OBSERVACION', 'FECHA_ATENCION', 'FEC_ANULA_CARTA', 'OBS_ANULA_CARTA', 'USUARIO_ANULA', 'FECHA_SOLICITUD_MEDICO', 'MOT_CAMB_EST'
            ],
            totalRows: 100,
            currentPage: 1,
            perPage: 100,
            pageOptions: [100, 200, 500, { value: 1000, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            graficoGeneral: [],
            myStyles: {
                height: '100px',
                width: '100%',
                position: 'relative',
            },
            infoModal: {
                id: 'info-modal',
                title: '',
                content: ''
            }
        },
        mounted() {
            this.totalRows = this.ListaDocPago.length
        },
        methods: {
            ocultarPantalla: function (form) {
                this.$bvModal.hide(form.PANTALLA);
            },
            validaCampos(item) {
                switch (item) {
                    case 1: {
                        this.AFILIADO = this.AFILIADO.toUpperCase();

                        break;
                    }

                }
                //this.validarFormulario();
            },

            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            mostrarToast(variant = null) {
                this.MensajeSistema = variant.msg;
                this.$bvToast.toast(this.MensajeSistema, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },

            exportExcel() {
                lstdocs = [];
                for (const item of this.ListaDocPago) {
                    lstdocs.push({
                        NUM_CARTA: item.NUM_CARTA,
                        AMPLIACION: item.AMPLIACION,
                        NUM_COMNTRATOPF: item.NUM_COMNTRATOPF                       ,
                        AFILIADO: item.AFILIADO                                     ,
                        PLAN: item.PLAN                                             ,
                        DEDUCIBLE: item.DEDUCIBLE                                   ,
                        COASEGURO: item.COASEGURO                                   ,
                        CIE10: item.CIE10                                           ,
                        DIAGNOSTICO: item.DIAGNOSTICO                               ,
                        MEDICO_TRATANTE: item.MEDICO_TRATANTE                       ,
                        MEDICO_AUDITOR_PF: item.MEDICO_AUDITOR_PF                   ,
                        MOTIVO_CARTA: item.MOTIVO_CARTA                             ,
                        AREA: item.AREA                                             ,
                        LIM_CARTA: item.LIM_CARTA                                   ,
                        FEC_APRO_CARTA: item.FEC_APRO_CARTA                         ,
                        FEC_APRO_CARTA_2: item.FEC_APRO_CARTA_2                     ,
                        COMPLEJIDAD_CARTA: item.COMPLEJIDAD_CARTA                   ,
                        SEDE: item.SEDE                                             ,
                        OBS_APRUEBA_SOL: item.OBS_APRUEBA_SOL                       ,
                        FEC_RECHZ_CARTA: item.FEC_RECHZ_CARTA                       ,
                        OBS_RECHAZO_CARTA: item.OBS_RECHAZO_CARTA                   ,
                        FEC_OBS_CARTA: item.FEC_OBS_CARTA                           ,
                        OBS_OBSERVA_SOL: item.OBS_OBSERVA_SOL                       ,
                        USUARIO_APROBADOR: item.USUARIO_APROBADOR                   ,
                        ULT_MOV: item.ULT_MOV                                       ,
                        FEC_ULT_MOV: item.FEC_ULT_MOV                               ,
                        USU_ULT_MOV: item.USU_ULT_MOV                               ,
                        PLAN_TRABAJO: item.PLAN_TRABAJO                             ,
                        ESTADO: item.ESTADO                                         ,
                        FECHA_SOLICITUD: item.FECHA_SOLICITUD                       ,
                        HORA_SOLICITUD: item.HORA_SOLICITUD                         ,
                        FECHA_RECIBE_SOLICITUD: item.FECHA_RECIBE_SOLICITUD         ,
                        HORA_RECIBE_SOLICITUD: item.HORA_RECIBE_SOLICITUD           ,
                        FECHA_DEVOLUCION_SOL: item.FECHA_DEVOLUCION_SOL             ,
                        HORA_DEVOLUCION_SOL: item.HORA_DEVOLUCION_SOL               ,
                        FECHA_REENVIO_SOL: item.FECHA_REENVIO_SOL                   ,
                        HORA_REENVIO_SOL: item.HORA_REENVIO_SOL                     ,
                        FECHA_APRUEBA_CARTA: item.FECHA_APRUEBA_CARTA               ,
                        HORA_APRUEBA_CARTA: item.HORA_APRUEBA_CARTA                 ,
                        OBSERVACION: item.OBSERVACION                               ,
                        FECHA_ATENCION: item.FECHA_ATENCION                         ,
                        FEC_ANULA_CARTA: item.FEC_ANULA_CARTA                       ,
                        OBS_ANULA_CARTA: item.OBS_ANULA_CARTA                       ,
                        USUARIO_ANULA: item.USUARIO_ANULA                           ,
                        FECHA_SOLICITUD_MEDICO: item.FECHA_SOLICITUD_MEDICO         ,
                        MOT_CAMB_EST: item.MOT_CAMB_EST

                    });
                }

                let data = XLSX.utils.json_to_sheet(lstdocs) //this.ListaDocPago)
                const workbook = XLSX.utils.book_new()
                const filename = 'CartaGarantia';  // + this.FEC_INI ;
                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename}.xls`)
            },

            onFiltered(filteredItems) {
                // Trigger pagination to update the number of buttons/pages due to filtering
                this.totalRows = filteredItems.length;
                this.currentPage = 1;
            },

            buscar: function () {
                this.graficoGeneral = [];
                if (this.NOMBRE.length > 0) {
                    let palabra = this.NOMBRE.toUpperCase();
                    this.ListaDocPago = this.ListaDocPago_.filter(x => {
                        return x.CAMPO_BUSQUEDA.includes(palabra);
                    });
                }
                else {
                    this.ListaDocPago = this.ListaDocPago_;
                }
                this.renderChart();
                this.currentPage = 1;
            },

            listarDocPago: function (item) {         //  alert(JSON.stringify(this.ListaMaestra));
                let estadoDoc = '';
                if (item.TIPO == '1') { estadoDoc = this.ROL; }
                else if (item.TIPO == '2') { estadoDoc = this.ESTADO; }

                //if (estadoDoc != 'SELECCIONAR') {
                    this.ListaDocPago = []; this.ListaDocPago_ = []; this.graficoGeneral = [];
                    var detalleFiltros = '';
                    this.show = true;
                    axios.post(this.SERVER_API + '/api/CartaGarantia/BuscarCarta', {
                        ESTADO: estadoDoc,
                        SEDE: '',
                        AFILIADO: this.AFILIADO,
                        TIPO: item.TIPO,
                        FEC_INI: this.FEC_INI,  // '28-02-2023', //
                        FEC_FIN: this.FEC_FIN,  // '02-03-2023', //
                    }, configImg ).then(response => {
                        detalleFiltros = 'FILTROS APLICADOS / ';
                        detalleFiltros = detalleFiltros + ' Estado : ' + estadoDoc + ' / ';
                        this.desFiltros = detalleFiltros;
                        if (response.data.length > 0) {
                            this.ListaDocPago = response.data;
                            this.ListaDocPago_ = response.data;
                            this.renderChart();
                        }
                        this.totalRows = this.ListaDocPago.length;
                        this.canFilas = this.totalRows;
                        this.indicador = false;
                    }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
                //}


            },

            listarEstado: function () {    // MODIFICADO
                axios.post(this.SERVER_API + '/api/CartaGarantia/ListarEstados', {}, configImg
                ).then(response => {
                    if (response.data.length > 0) {
                        this.ListaEstado = response.data;
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...2' }); });
            },

            renderChart: function () {    // MODIFICADO
                this.graficoGeneral = [];
                let lista = this.ListaDocPago;
                let Universo = lista; // lista.filter(x => x.USUARIO != '');
                let Torta = []; let counts = {};
                for (var tajada in Universo) {
                    Torta.push(`${Universo[tajada].ESTADO}`);   //  alert(JSON.stringify(`${lista[items].ESTADO}`));
                }
                Torta.forEach((el) => {
                    counts[el] = counts[el] ? (counts[el] += 1) : 1;
                });
                this.graficoGeneral = counts;
            },

            listarDocPagoDetalle: function (item) {         //  alert(JSON.stringify(this.ListaMaestra));
                axios.post('@apiServidor' + '/api/CartaGarantia/ListarCartaDetalle', {
                    ID: item.ID,
                }, configImg
                ).then(response => {
                    //if (response.data.ID > 0) {
                        this.ID = item.ID;
                        this.NUM_CARTA = item.NUM_CARTA;
                        this.AFILIADO = item.AFILIADO;
                        this.ListaDocPagoDet = response.data;
                        this.cargarExpedientes();
                    //}
                    this.pantalla({ PANTALLA: 'VerDetalle' });
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            cargarExpedientes: async function () {
                this.ListaExpedientes = [];
                await axios.post('@apiServidor' + '/api/CartaGarantia/ListarArchivosxCarga', {
                    ID_SOURCE: this.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    USUARIO: this.USUARIO,
                }, configImg).then(response => {
                    this.ListaExpedientes = response.data;
                }).catch(e => {
                });
            },

            fileDescargar: function (item) {
                axios.get(item.URL, { responseType: 'blob' })
                    .then(response => {
                        const blob = new Blob([response.data], { type: 'application/pdf' })
                        const link = document.createElement('a')
                        link.href = URL.createObjectURL(blob)
                        link.download = item.LABEL
                        link.click()
                        URL.revokeObjectURL(link.href)
                        this.fileChange({ ID: item.ID, STATUS: 1, TITULO: item.TITULO, EXT: item.EXT, BANNER: item.BANNER });
                    }).catch(console.error)
            },

            abrirPDF: function (url) {
                // Abrir nuevo tab
                var win = window.open(url, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');
                // Cambiar el foco al nuevo tab (punto opcional)
                win.focus();
            },
            //MODIFICADO ML
            fileEliminar: function (item) {
                this.fileChange({ ID: item.ID, STATUS: item.STATUS, TITULO: item.TITULO, EXT: item.EXT, BANNER: item.BANNER });
            },
            //MODIFICADO ML
            fileChange: function (item) {
                this.show = true;
                axios.post(this.SERVER_API + '/api/CartaGarantia/EliminarArchivo', {
                    ID_FILE: item.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    STATUS: item.STATUS,
                }, configImg).then(response => {
                    if (response.data.V_ID > 0) {
                        this.show = false;
                        this.ListaExpedientes = this.ListaExpedientes.filter(x => x.ID != item.ID);
                        this.ListaExpedientes.push({ ID: item.ID, TITULO: item.TITULO, EXT: item.EXT, PESO: 0, IP_USUARIO: '', FECHA: '', STATUS: item.STATUS, BANNER: item.BANNER });
                        this.ListaExpedientes.sort((a, b) => (a.ID > b.ID) ? 1 : ((b.ID > a.ID) ? -1 : 0));
                    } else {
                        this.show = false;
                        this.mostrarToast({ toast: 'warning', msg: 'Ocurrio un error ...' });
                    }
                }).catch(e => {
                });
            },

            modificarEstado: function (item) {
                this.ID = item.ID;
                this.ESTADO = item.ESTADO;
                this.$bvModal.show('cambiarEstado');
            },
            anularCarta: function (item) {
                this.ID = item.ID;
                this.ESTADO = item.ESTADO;
                this.$bvModal.show('anularCarta');
            },

            autoAsignar: function (item) {
                //alert(JSON.stringify(item));
                var opcion = confirm("Deseas auto asignarte la carta N° " + item.NUM_CARTA + " con estado " + item.ESTADO);
                if (opcion == true) {
                    axios.post('@apiServidor' + '/api/Grupo/AddQueuexGrupo', {
                        ID: item.ID,
                        ID_CARGA: item.ID,
                        TITULO: item.AFILIADO,
                        ID_SEDE: this.ID_SEDE,
                        ID_GRUPO: 18,
                        ID_USUARIO: this.ID_USUARIO,
                        STATUS: 2,
                        CONTENIDO: 'CASO AUTOASIGNADO ...',
                    }, configImg).then(response => {
                        if (response.data.ID > 0) {
                            this.show = false;
                            this.iniciar();
                        }
                    }).catch(e => {
                    });
                }
            },

            adicional: function (item) {        //alert(JSON.stringify(item));
                var opcion = confirm("Deseas crear una carta adicional con los datos de la carta N° " + item.NUM_CARTA + " con estado " + item.ESTADO);
                if (opcion == true) {
                     axios.post('@apiServidor' + '/api/CartaGarantia/ReplicarCarta', {
                        ID: item.ID,
                        ID_SEDE: this.ID_SEDE,
                        ID_USUARIO: this.ID_USUARIO,
                        USUARIO: this.USUARIO,
                    }, configImg).then(response => {
                        if (response.data.V_ID > 0) {
                            sessionStorage.setItem('INICIO', 0);
                            this.show = false;
                            document.location.href = '../CartaGarantia/Editar';
                        } else { this.mostrarToast({ toast: 'warning', msg: 'Verificar estado de las cartas con ampliación ...' }); }
                    }).catch(e => {
                    });
                }
            },

            elegirEstado: function (item) {
                this.show = true;
                axios.post('@apiServidor' + '/api/CartaGarantia/CambiarEstadoCarta', {
                    ID: this.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ESTADO: item.ESTADO,
                    USUARIO: this.USUARIO,
                    OBSERVACION: this.OBSERVACION,
                    ID_SEDE: this.ID_SEDE,
                    ID_GRUPO: 18,
                }, configImg).then(response => {
                    if (response.data.V_ID > 0) {
                        this.mostrarToast({ toast: 'warning', msg: 'Cambio de estado correctamente ...' });
                    }

                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },
            imprimir: function (item) {
                this.ID = item.ID;
                this.NUM_CARTA = item.NUM_CARTA;
                //this.SITE = './ImagenCarta/?idSource=' + this.ID + '&idUsuario=' + this.ID_USUARIO;
                document.location.href = '../CartaGarantia/Print/?idSource=' + this.ID + '&idUsuario=' + this.ID_USUARIO + '&numCarta=' + this.NUM_CARTA;
            },
            exportarDetalleExcel() {

                let data = XLSX.utils.json_to_sheet(this.ListaDocPagoDet, { skipHeader: true, origin: "A5" }) //this.ListaDocPago)
                const workbook = XLSX.utils.book_new()
                const filename = this.NUM_CARTA;  // + this.FEC_INI ;

                XLSX.utils.sheet_add_json(data, [
                    { A: 'Afiliado', B: this.AFILIADO }, { A: 'Carta N°', B:this.NUM_CARTA }
                ], { skipHeader: true, origin: "B2" });


                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename}.xls`)
            },


        }
    })
    app.listarEstado();
    app.listarDocPago({ TIPO: '1', ESTADO: '' });

</script>





