
@{
    string Title = "REPORTE CG FECHA GESTIÓN";
    ViewBag.Title = Title;
    string user = System.Configuration.ConfigurationManager.AppSettings["JWT_USUARIO"];
    string pass = System.Configuration.ConfigurationManager.AppSettings["JWT_PASSWORD"];
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
}

<div id="app">
    <div class="container">
        <br />
        <div class="row">
            <div class="col-sm-12 col-md-12 col-lg-5 ">
                <div class="card-header">RESUMEN</div>
                <div class="text-center m-2  text-secondary ">
                    <div class="row" v-if="ListaDocPago.length > 0">
                        <bar-chart :styles="myStyles" :data="graficoGeneral"></bar-chart>
                    </div>

                </div>
            </div>
            <div class="col-sm-12 col-md-12 col-lg-7 ">
                <div class="card-header">FILTROS</div>
                <br /><br />
                <div class="row">
                    <div class="col-6">
                        <b-form-group label="Fecha inicio"
                                      label-for="txtfecini"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecini" v-model="FEC_INI"
                                               class="mb-2" :max="max" today-button reset-button
                                               @*:date-format-options="{ year: 'numeric', month: 'numeric', day: 'numeric' }"  locale="en"*@
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }" locale="es"></b-form-datepicker>
                        </b-form-group>
                    </div>
                    <div class="col-6">
                        <b-form-group label="Fecha final"
                                      label-for="txtfecfin"
                                      class="mb-0">
                            <b-form-datepicker id="txtfecfin" v-model="FEC_FIN"
                                               locale="es" :max="max" class="mb-2" today-button reset-button
                                               :date-format-options="{ day: '2-digit', month: '2-digit' , year: 'numeric' }"></b-form-datepicker>
                        </b-form-group>
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <span class="text-black-50 text-sm-right">Sedes</span> <br />
                        <b-form-select v-model="SEDE_REPORTE" class="cajaTexto2" v-on:change="">
                            <template #first>
                                <b-form-select-option v-model="SELECCIONAR" value="null">SELECCIONAR</b-form-select-option>
                            </template>
                            <b-form-select-option v-for="i in ListaSedes" :value="i.SEDE">{{i.SEDE}}</b-form-select-option>
                        </b-form-select>
                    </div>
                    <div class="col-6">
                        <br />
                        <center>
                            <b-button size="large" v-on:click="listarDocPago({ ESTADO: 'TODOS', STATUS: 2}), NOMBRE=''" variant="warning" pill><b-avatar variant="outline-info" icon="funnel" size="2rem"></b-avatar>Buscar</b-button>
                        </center>
                    </div>
                </div>
                <br /><br /><br />
                <div class="row" v-if="ListaDocPago.length > 0">

                    <div class="col-12">
                        <b-form-group id="input-group-1-responsable"
                                      label="Búsqueda secundaria:"
                                      label-for="txtresponsable"
                                      description="">
                            <b-form-input id="txtresponsable"
                                          v-model="NOMBRE"
                                          type="text"
                                          v-on:keyup="buscar()"
                                          placeholder=""></b-form-input>
                        </b-form-group>
                    </div>

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <br />
                <template>
                    <b-container fluid>
                        <b-row class="p-0">
                        </b-row>
                        <!-- User Interface controls -->
                        <b-row class="p-0">
                            <b-col lg="12" class="my-1">
                                <div class="alert alert-warning" role="alert">
                                    <strong> Cantidad de registros: {{canFilas}}</strong>, exportar a excel
                                    <b-avatar @@click="exportExcel()" title="Exportar a Excel" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                </div>
                            </b-col>
                            <b-col lg="6" class="my-1">

                            </b-col>
                        </b-row>
                        <b-row>
                            <b-table hover :items="ListaDocPago"
                                     :current-page="currentPage"
                                     :fields="Columnas"
                                     :per-page="perPage"
                                     stacked="md"
                                     head-variant="light"
                                     responsive
                                     show-empty
                                     @*sticky-header="200px"*@
                                     small
                                     @@filtered="onFiltered">
                                <template #empty="scope">
                                    <h6 class="text-center">No hay filas para mostrar.</h6>
                                </template>
                                @*<template #cell(Seleccionar)="row">
                                    </template>*@
                                <template #cell(name)="row">
                                    {{ row.value.first }} {{ row.value.last }}
                                </template>
                                <template #cell(ID)="row">
                                    @*<b-avatar v-if="row.item.FAMILIAR == null " title="Ver Detalle" button icon="person" size="3rem" variant="light" class="align-center btn-outline-secondary"></b-avatar>
                                        <b-avatar v-else="row.item.FAMILIAR == null " v-on:click="listarDocPagoDetalle(row.item, row.index, false,'individual')" title="Ver Detalle" button icon="people" size="3rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@
                                    @*<b-avatar v-on:click="listarDocPagoDetalle(row.item, row.index, false,'individual')" title="Ver Detalle" button icon="clock-history" size="3rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@

                                </template>
                            </b-table>
                        </b-row>
                        <br />

                        <!-- User Interface controls -->
                        <b-row v-if="canFilas>0">

                            <b-col sm="5" md="6" class="my-1">
                                <b-form-group label="Por Pagina"
                                              label-for="per-page-select"
                                              label-cols-sm="6"
                                              label-cols-md="4"
                                              label-cols-lg="3"
                                              label-align-sm="right"
                                              label-size="sm"
                                              class="mb-0">
                                    <b-form-select id="per-page-select"
                                                   v-model="perPage"
                                                   :options="pageOptions"
                                                   size="sm"></b-form-select>
                                </b-form-group>
                            </b-col>

                            <b-col sm="7" md="6" class="my-1">
                                <b-pagination v-model="currentPage"
                                              :total-rows="totalRows"
                                              :per-page="perPage"
                                              align="fill"
                                              size="sm"
                                              class="my-0"></b-pagination>
                            </b-col>

                        </b-row>

                    </b-container>
                </template>
            </div>
        </div>

    </div>
    <b-modal id="VerDetalle" size="lg" data-html="true" hide-footer hide-header>
        @*@@hide="salida"*@
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">Detalle de afiliados</strong>
                        </div>
                    </div>

                    <div class="card-body">
                        <div class="row">
                            <div class="col-9">Carta N° {{NUM_CARTA}}</div><div class="col-3"><b-avatar @@click="exportarDetalleExcel()" title="Exportar a Excel" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar></div>
                            <div class="col-9">Afiliado {{AFILIADO}}</div>
                        </div>
                        <div class="card-text">
                            <b-table hover :items="ListaDocPagoDet"
                                     :current-page="currentPage"
                                     @*:fields="Columnas"*@
                                     :per-page="perPage"
                                     stacked="md"
                                     head-variant="light"
                                     responsive
                                     show-empty
                                     @*sticky-header="200px"*@
                                     small
                                     @@filtered="onFiltered">
                            </b-table>
                        </div>
                    </div>


                    <!--<div class="card-body">
                        <div class="card-text">
                            <b-table hover :items="ListaDocPagoDet"
                                     :current-page="currentPage"-->
                    @*:fields="Columnas"*@
                    <!--:per-page="perPage"
                    stacked="md"
                    head-variant="light"
                    responsive
                    show-empty-->
                    @*sticky-header="200px"*@
                    <!--small
                                     @@filtered="onFiltered">
                            </b-table>


                        </div>
                    </div>-->
                </div>
            </div>
        </div>
    </b-modal>


</div>

<script>
    const configImg = {
            headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` }
        };
    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
    // 15th two months prior           216
    const minDate = new Date(today)
    minDate.setMonth(minDate.getMonth() - 1)
    //minDate.setDate(15)
    // 15th in two months
    const maxDate = new Date(today)
    maxDate.setMonth(maxDate.getMonth())
    //maxDate.setDate(15)

    var app = new Vue({
                el: '#app',
        data: {
            min: minDate,
            max: maxDate,
            graficoGeneral: [],
            selected: '3',
            options: [{ text: 'PENDIENTE', value: '1' }, { text: 'AFILIACIÓN', value: '2' }, { text: 'CONFIRMACIÓN PAGO', value: '3' } ],
            indicador: false,

            ID_USUARIO: '@User.Identity.Name',
            USUARIO: '@Session["Usuario"].ToString()',
            NOMBRE_USUARIO: '@Session["Nombres"].ToString()' +' '+ '@Session["Apellidos"].ToString()',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',
            ID_SEDE: '@Session["ID_SEDE"].ToString()',
            SEDE: '@Session["SEDE"].ToString()',

            PAGINA: '@Title',
            SELECCIONAR: 'SELECCIONAR',
            SITE: '',
            ID: 0,
            desFiltros: '',
            canFilas: '0',
            nrofac: '',
            nroserie: '',
            FEC_INI: maxDate,
            FEC_FIN: maxDate,
            SEDE_REPORTE: ' ',
            NOMBRE: '',
            AFILIADO : '',
            NUM_CARTA : '',
            FEC_ESTADO_INI: '',
            responsable: '',

            ACCION: '',
            TITULO:'',

            ListaSeleccionados:[],
            ListaDocPago: [],
            ListaDocPago_: [],
            ListaDocPagoDet: [],
            ListaSedes: [],
            Lista: [],
              //  { key: 'DNROLOTE', label: 'LOTE', sortable: true, variant: 'secondary' }
            Columnas: [
                //{ key: 'DNROLOTE', label: 'LOTE' }, { key: 'DFECHA_CAB', label: 'FECHA LOTE' }, { key: 'DRESP_CAB', label: 'RESPONSABLE' }, { key: 'DFECHA', label: 'FEC. FACTURA' }, { key: 'SNROFAC', label: 'SERIE' }, { key: 'DNROFAC', label: 'CORRELATIVO' }, { key: 'MTO_TOTC', label: 'MONTO' }, 'MOTIVO', 'OBSERVACIONES', 'ACCIONES', { key: 'FLG_EST_DOC', label: 'ESTADO' }, { key: 'DFECHA_APRO', label: 'FEC MOD' },  { key: 'SELECCIONAR', label: 'Sel.'}
                'ID', 'NUM_CARTA', 'AMPLIACION', 'NUM_COMNTRATOPF', 'SEDE', 'NRO_DOCUMENTO', 'AFILIADO', 'PLAN', 'COBERTURA', 'DEDUCIBLE', 'COASEGURO', 'CIE10', 'DIAGNOSTICO', 'MEDICO_TRATANTE', 'MEDICO_AUDITOR_PF', 'MOTIVO_CARTA', 'AREA', 'LIM_CARTA', 'LIM_CARTA_APROBADA', 'FEC_APRO_CARTA', 'FEC_APRO_CARTA_2', 'COMPLEJIDAD_CARTA', 'SEDE', 'OBS_APRUEBA_SOL', 'FEC_RECHZ_CARTA', 'OBS_RECHAZO_CARTA', 'FEC_OBS_CARTA', 'OBS_OBSERVA_SOL', 'USUARIO_APROBADOR', 'ULT_MOV', 'FEC_ULT_MOV', 'USU_ULT_MOV', 'PLAN_TRABAJO', 'ESTADO', 'FECHA_SOLICITUD', 'HORA_SOLICITUD', 'FECHA_RECIBE_SOLICITUD', 'HORA_RECIBE_SOLICITUD', 'FECHA_DEVOLUCION_SOL', 'HORA_DEVOLUCION_SOL', 'FECHA_REENVIO_SOL', 'HORA_REENVIO_SOL', 'FECHA_APRUEBA_CARTA', 'HORA_APRUEBA_CARTA', 'OBSERVACION', 'FECHA_ATENCION', 'FEC_ANULA_CARTA', 'OBS_ANULA_CARTA', 'USUARIO_ANULA', 'FECHA_SOLICITUD_MEDICO', 'MOT_CAMB_EST', 'NOMBRE_CREADOR', 'NOMBRE_VERIFICADOR','NOMBRE_APROBADOR'
            ],
            totalRows: 50,
            currentPage: 1,
            perPage: 50,
            pageOptions: [50, 100, 500, { value: 1000, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            graficoGeneral: [],
            myStyles: {
                height: '100px',
                width: '100%',
                position: 'relative',
            },
            infoModal: {
                id: 'info-modal',
                title: '',
                content: ''
            }
        },
        mounted() {
            this.totalRows = this.ListaDocPago.length
        },
        methods: {
            ocultarPantalla: function (form) {
                this.$bvModal.hide(form.PANTALLA);
            },

            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            mostrarToast(variant = null) {
                this.MensajeSistema = variant.msg;
                this.$bvToast.toast(this.MensajeSistema, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },

            exportExcel() {
                lstdocs = [];
                for (const item of this.ListaDocPago) {
                    lstdocs.push({
                        NUM_CARTA: item.NUM_CARTA,
                        AMPLIACION: item.AMPLIACION,
                        FECHA_CREACION: item.FECHA_CREACION,
                        USUARIO_CREADOR: item.USUARIO_CREADOR,
                        NUM_COMNTRATOPF: item.NUM_COMNTRATOPF,
                        NRO_DOCUMENTO: item.NRO_DOCUMENTO,
                        AFILIADO: item.AFILIADO                                     ,
                        PLAN: item.PLAN                                             ,
                        COBERTURA: item.COBERTURA,
                        DEDUCIBLE: item.DEDUCIBLE                                   ,
                        COASEGURO: item.COASEGURO,
                        CIE10: item.CIE10                                           ,
                        DIAGNOSTICO: item.DIAGNOSTICO                               ,
                        MEDICO_TRATANTE: item.MEDICO_TRATANTE                       ,
                        MEDICO_AUDITOR_PF: item.MEDICO_AUDITOR_PF                   ,
                        MOTIVO_CARTA: item.MOTIVO_CARTA                             ,
                        AREA: item.AREA                                             ,
                        LIM_CARTA: item.LIM_CARTA,
                        LIM_CARTA_APROBADA: item.LIM_CARTA_APROBADA,
                        FEC_APRO_CARTA: item.FEC_APRO_CARTA                         ,
                        FEC_APRO_CARTA_2: item.FEC_APRO_CARTA_2                     ,
                        COMPLEJIDAD_CARTA: item.COMPLEJIDAD_CARTA                   ,
                        SEDE: item.SEDE                                             ,
                        OBS_APRUEBA_SOL: item.OBS_APRUEBA_SOL                       ,
                        FEC_RECHZ_CARTA: item.FEC_RECHZ_CARTA                       ,
                        OBS_RECHAZO_CARTA: item.OBS_RECHAZO_CARTA                   ,
                        FEC_OBS_CARTA: item.FEC_OBS_CARTA                           ,
                        OBS_OBSERVA_SOL: item.OBS_OBSERVA_SOL                       ,
                        USUARIO_APROBADOR: item.USUARIO_APROBADOR                   ,
                        ULT_MOV: item.ULT_MOV                                       ,
                        FEC_ULT_MOV: item.FEC_ULT_MOV                               ,
                        USU_ULT_MOV: item.USU_ULT_MOV,
                        ULT_ESTADO: item.ULT_ESTADO,
                        ULT_FECHA: item.ULT_FECHA,
                        ULT_USUARIO: item.ULT_USUARIO,
                        ULT_NOMBRES: item.ULT_NOMBRES,
                        PLAN_TRABAJO: item.PLAN_TRABAJO                             ,
                        ESTADO: item.ESTADO,
                        SUB_ESTADO: item.SUB_ESTADO,
                        FECHA_SOLICITUD: item.FECHA_SOLICITUD                       ,
                        HORA_SOLICITUD: item.HORA_SOLICITUD                         ,
                        FECHA_RECIBE_SOLICITUD: item.FECHA_RECIBE_SOLICITUD         ,
                        HORA_RECIBE_SOLICITUD: item.HORA_RECIBE_SOLICITUD           ,
                        FECHA_DEVOLUCION_SOL: item.FECHA_DEVOLUCION_SOL             ,
                        HORA_DEVOLUCION_SOL: item.HORA_DEVOLUCION_SOL               ,
                        FECHA_REENVIO_SOL: item.FECHA_REENVIO_SOL                   ,
                        HORA_REENVIO_SOL: item.HORA_REENVIO_SOL                     ,
                        FECHA_APRUEBA_CARTA: item.FECHA_APRUEBA_CARTA               ,
                        HORA_APRUEBA_CARTA: item.HORA_APRUEBA_CARTA                 ,
                        OBSERVACION: item.OBSERVACION                               ,
                        FECHA_ATENCION: item.FECHA_ATENCION                         ,
                        FEC_ANULA_CARTA: item.FEC_ANULA_CARTA                       ,
                        OBS_ANULA_CARTA: item.OBS_ANULA_CARTA                       ,
                        USUARIO_ANULA: item.USUARIO_ANULA                           ,
                        FECHA_SOLICITUD_MEDICO: item.FECHA_SOLICITUD_MEDICO         ,
                        MOT_CAMB_EST: item.MOT_CAMB_EST,
                        SINIESTRO_CG: item.SINIESTRO_CG,
                        SINIESTRO_BI: item.SINIESTRO_BI,
                        NOMBRE_VERIFICADOR: item.NOMBRE_VERIFICADOR,
                        NOMBRE_CREADOR: item.NOMBRE_CREADOR,
                        NOMBRE_APROBADOR: item.NOMBRE_APROBADOR,
                        CODPROC1: item.CODPROC1,
                        PROCEDIMIENTO1: item.PROCEDIMIENTO1

                    });
                }
                let ahora = new Date();
                let dia = ahora.toLocaleDateString('en-GB');
                let hora = ahora.toLocaleTimeString("en-GB");

                let data = XLSX.utils.json_to_sheet(lstdocs, { origin: 5 }); //this.ListaDocPago)
                let headerGroups = [
                     { name: '' + this.PAGINA, origin: 'D1' },
                     { name: 'Empresa: ' + this.SEDE, origin: 'B3' }, { name: 'Fecha consulta: ' + dia + '_' + hora, origin: 'B4' },
                 ];
                headerGroups.forEach(({ name, origin }) => {
                    XLSX.utils.sheet_add_aoa(data, [[name]], { origin });
                });

                let filename = '@Title' ;
                let workbook = XLSX.utils.book_new()
                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename} ${dia} ${hora} .xlsx`)
            },

            onFiltered(filteredItems) {
                // Trigger pagination to update the number of buttons/pages due to filtering
                this.totalRows = filteredItems.length;
                this.currentPage = 1;
            },

            buscar: function () {
                this.graficoGeneral = [];
                if (this.NOMBRE.length > 0) {
                    let palabra = this.NOMBRE.toUpperCase();
                    this.ListaDocPago = this.ListaDocPago_.filter(x => {
                        return x.CAMPO_BUSQUEDA.includes(palabra);
                    });
                }
                else {
                    this.ListaDocPago = this.ListaDocPago_;
                }
                this.renderChart();
                this.currentPage = 1;
            },

            listarDocPago: function (item) {         //  alert(JSON.stringify(this.ListaMaestra));
                let sede = this.SEDE_REPORTE == 'SELECCIONAR' ? '' : this.SEDE_REPORTE;
                let estadoDoc = sede.length > 1 ? 'OTROS' : item.ESTADO;
                this.ListaDocPago = []; this.ListaDocPago_ = []; this.graficoGeneral = [];
                var detalleFiltros = '';
                this.show = true;
                //alert(estadoDoc);
                axios.post(this.SERVER_API + '/api/CartaGarantia/BusquedaCarta', {
                    ESTADO: estadoDoc,
                    SEDE: sede, // this.SEDE_REPORTE,
                    FEC_INI: this.FEC_INI,  // '28-02-2023', //
                    FEC_FIN: this.FEC_FIN,  // '02-03-2023', //
                }, configImg
                ).then(response => {
                    detalleFiltros = 'FILTROS APLICADOS / ';
                    detalleFiltros = detalleFiltros + ' Estado : ' + estadoDoc + ' / ';
                    this.desFiltros = detalleFiltros;
                    if (response.data.length > 0) {
                        this.ListaDocPago = response.data;
                        this.ListaDocPago_ = response.data;
                        this.renderChart();
                    }
                    this.totalRows = this.ListaDocPago.length;
                    this.canFilas = this.totalRows;
                    this.indicador = false;
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });   
            },

            renderChart: function () {    // MODIFICADO
                this.graficoGeneral = [];
                let lista = this.ListaDocPago;
                let Universo = lista; // lista.filter(x => x.USUARIO != '');
                let Torta = []; let counts = {};
                for (var tajada in Universo) {
                    Torta.push(`${Universo[tajada].ESTADO}`);   //  alert(JSON.stringify(`${lista[items].ESTADO}`));
                }
                Torta.forEach((el) => {
                    counts[el] = counts[el] ? (counts[el] += 1) : 1;
                });
                this.graficoGeneral = counts;
            },

            listarDocPagoDetalle: function (item) {         //  alert(JSON.stringify(this.ListaMaestra));
                this.show = true;
                this.AFILIADO = item.AFILIADO;
                this.NUM_CARTA = item.NUM_CARTA;
                axios.post('@apiServidor' + '/api/CartaGarantia/ListarCartaDetalle', {
                    ID: item.ID,
                }, configImg
                ).then(response => {
                    this.ListaDocPagoDet = response.data;
                    this.pantalla({ PANTALLA: 'VerDetalle' });
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            listarSedes: function () {
                //axios.defaults.headers.common['Authorization'] = 'Bearer ' + this.token;
                axios.post('@apiServidor' + '/api/CartaGarantia/ListarSedes', {
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let sedes = response.data;
                        let nuevaSede = [];
                        for (let i of sedes) {
                            nuevaSede.push({ CCOD_EMPRESA: i.CCOD_EMPRESA, CCOD_SUCURSAL: i.CCOD_SUCURSAL, SEDE: i.SEDE });
                        }
                        for (let i of sedes) {
                            nuevaSede.push({ CCOD_EMPRESA: i.CCOD_EMPRESA, CCOD_SUCURSAL: i.CCOD_SUCURSAL, SEDE: 'TOMOMEDIC '+i.SEDE });
                        }
                        this.ListaSedes = nuevaSede;
                    } else {
                        this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                    }
                }).catch(e => { });
            },
            exportarDetalleExcel() {

                let data = XLSX.utils.json_to_sheet(this.ListaDocPagoDet, { skipHeader: true, origin: "A5" }) //this.ListaDocPago)
                const workbook = XLSX.utils.book_new()
                const filename = this.NUM_CARTA;  // + this.FEC_INI ;

                XLSX.utils.sheet_add_json(data, [
                    { A: 'Afiliado', B: this.AFILIADO }, { A: 'Carta N°', B: this.NUM_CARTA }
                ], { skipHeader: true, origin: "B2" });


                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename}.xlsx`)
            },

        }
    })
    app.listarSedes();
    app.listarDocPago({ ESTADO: 'HOY', STATUS: 1 });

</script>





