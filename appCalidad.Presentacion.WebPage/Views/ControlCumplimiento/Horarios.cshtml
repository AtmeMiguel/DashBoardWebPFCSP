
@{
    string Title = "ADMIN | CUMPLIMIENTO";
    ViewBag.Title = Title;
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
}

<div id="app">
    <div class="containerSanPablo">
        <br />
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <b-container fluid>
                    <!-- User Interface controls -->
                    <div class="row">
                        <div class="col-xs-12 col-md-6 col-lg-4">
                            <div class="form-group row">
                                <label for="inputEmail3" class="col-sm-3 col-form-label">Tipo médico:</label>
                                <div class="col-sm-9">
                                    <select v-model="GRUPO" class="form-control" required disabled-field="notEnabled" v-on:change="ID_MEDICO='', ElegirGrupo(GRUPO)">
                                        <option v-for="i in ListaGrupos" v-bind:value="{ ID: i.ID, TITULO: i.TITULO }">
                                            {{ i.TITULO }}
                                        </option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="inputEmail3" class="col-sm-3 col-form-label">Médico:</label>
                                <div class="col-sm-7">
                                    <select v-model="MEDICO" class="form-control" required disabled-field="notEnabled" v-on:change="elegirMedicoHorario(MEDICO)">
                                        <option v-for="i in ListaMedicos" v-bind:value="{ ID: i.ID, NOMBRES: i.NOMBRES }">
                                            {{ i.NOMBRES }}
                                        </option>
                                    </select>
                                    <b-form-text id="password-help-block">
                                        Agrega un médico con el boton de configuración
                                    </b-form-text>
                                </div>
                                <div class="col-sm-2" v-if="ID_GRUPO != ''">
                                    <b-avatar button v-on:click="limpiar(), pantalla( { PANTALLA: 'verMedicos'})" title="Administrar médicos y tarifario" icon="gear" size="2.7rem" variant="light"></b-avatar>
                                </div>
                            </div>
                        </div>

                        <div class="col-xs-6 col-md-6 col-lg-2 cajaTexto  text-center reDim" style="padding-top:1.0rem;" v-if="ID_GRUPO != ''">
                            <div class="mt-3">
                                <b-button-group size="lg">
                                    <b-button v-if="DEL==0" variant="light"><b-avatar button title="limpiar horarios" icon="trash" size="4rem" variant="light" v-on:click="DEL=1 ,ADD=0, mostrarCalendario(month, year)"></b-avatar></b-button>
                                    <b-button v-if="DEL==1" variant="light"><b-avatar button title="limpiar horarios" icon="trash" size="4rem" variant="warning" v-on:click="DEL=0, ADD=0, mostrarCalendario(month, year)"></b-avatar></b-button>
                                    <b-button v-if="ADD==0 && ID_MEDICO>0 " variant="light"><b-avatar button title="Agregar horarios" icon="person-up" size="4rem" variant="light" v-on:click="ADD=1,DEL=0, mostrarCalendario(month, year)"></b-avatar></b-button>
                                    <b-button v-if="ADD==1 && ID_MEDICO>0 " variant="light"><b-avatar button title="Agregar horarios" icon="person-up" size="4rem" variant="warning" v-on:click="ADD=0,DEL=0, mostrarCalendario(month, year)"></b-avatar></b-button>
                                </b-button-group>
                            </div>

                        </div>
                        <div class="col-xs-12 col-md-12 col-lg-4 cajaTexto  text-center reDim" style="padding-top:1.0rem;" v-if="ADD==1">
                            <div class="row">
                                <div class="col-6">
                                    <b-form>
                                        <label for="text-password">Hora Ingreso:</label>
                                        <b-form-timepicker v-model="INI_HORA"></b-form-timepicker>
                                        <b-form-text id="password-help-block">
                                            Hora de ingreso
                                        </b-form-text>
                                    </b-form>
                                </div>
                                <div class="col-6">
                                    <b-form>
                                        <label for="text-password"># de horas</label>
                                        <b-form-input type="tel" v-model="NRO_HORA" aria-describedby="password-help-block" oninput="this.value = this.value.replace(/[^0-9]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                        <b-form-text id="password-help-block">
                                            Horas de trabajo
                                        </b-form-text>
                                    </b-form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <template v-if=" Lista.length>0">
                        <div class="row">
                            <div class="col-12 month">
                                <ul>
                                    <li id="prev" v-on:click="anterior()">&#10094;</li>
                                    <li id="month">
                                        {{MES}}
                                    </li>
                                    <li id="year">
                                        {{year}}
                                    </li>
                                    <li id="next" v-on:click="siguiente()">&#10095;</li>
                                </ul>
                            </div>
                        </div>
                        @*<div class="text-right">
                                <span id="one" v-if="item.estado=='PENDIENTE'" v-on-click="eliminarHorarioAgenda({ID: item.id })" variant="danger">Eliminar</span>
                            </div>*@
                        <div class="row noMobile">
                            <template v-for="q of ListarDias">
                                <div class="col-xs-12 col-md-12 col-lg-1 text-center month" v-if="q =='Domingo'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 text-center month" v-if="q =='Lunes'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 text-center month" v-if="q =='Martes'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 text-center month" v-if="q =='Miércoles'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 text-center month" v-if="q =='Jueves'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 text-center month" v-if="q =='Viernes'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-1 text-center month" v-if="q =='Sábado'">
                                    <span class="text-left">{{q}}</span>
                                </div>
                            </template>
                        </div>
                        <div class="row">
                            <template v-for="q of Lista">
                                <div class=" col-xs-12 col-md-12 col-lg-1 " style="padding: 1px;" v-if="q.nombre=='Domingo' || q.nombre=='Sábado'">
                                    <div :class="q.estado">
                                        <div class="row">
                                            <div class="col-6 text-left text-dark">{{q.dia}}</div>
                                            <div class="col-6 text-right"><span v-if="q.estado!='cajaHorarioGrisPress'"><b-avatar button v-on:click="verHoras(q.dia), pantalla({PANTALLA: 'verHorario' })" title="Agregar médico" icon="eye" size="2rem" variant="light"></b-avatar></span></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <template v-for="(item, index) in q.grupo">
                                                    <b-avatar button v-if="item.status==0 && ADD==1" v-on:click="elegirHorario(q.dia)" badge badge-variant="" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar button v-if="item.status==1 && DEL==1" v-on:click="eliminarHorario(item.id)" badge badge-variant="danger" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar v-if="item.status==1 && DEL==0" badge :badge-variant="item.estado" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar v-if="item.status==2" badge :badge-variant="item.estado" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-popover :target="`popover-1-${item.id}${item.horario}`" :placement="item.medico" variant="secondary" :title="`${item.medico} `" triggers="hover focus" data-html="true" :content="`${item.horario} <br /> ${item.final}`">
                                                        <div>
                                                            <b-alert show class="small">
                                                                <strong>Horario:</strong><br>
                                                                Inicio: <strong>{{item.horario}}</strong><br>Final: <strong>{{item.final}}</strong><br /><br />Estado: <strong>{{item.estado}}</strong>
                                                            </b-alert>
                                                            <div class="text-right">
                                                                <b-button v-if="item.estado!='PENDIENTE'" v-on:click="verHistorico({ID: item.id }), pantalla({PANTALLA: 'verHistorico' })" size="sm" variant="primary">Ver detalle</b-button>
                                                            </div>
                                                        </div>
                                                    </b-popover>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-12 col-md-12 col-lg-2 " style=" padding: 1px;" v-else="q.nombre=='Domingo' || q.nombre=='Sábado'">
                                    <div :class="q.estado">
                                        <div class="row">
                                            <div class="col-6 text-left text-dark">{{q.dia}}</div>
                                            <div class="col-6 text-right"><span v-if="q.estado!='cajaHorarioGrisPress'"><b-avatar button v-on:click="verHoras(q.dia), pantalla({PANTALLA: 'verHorario' })" title="Agregar médico" icon="eye" size="2rem" variant="light"></b-avatar></span></div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12">
                                                <template v-for="(item, index) in q.grupo">
                                                    <b-avatar button v-if="item.status==0 && ADD==1" v-on:click="elegirHorario(q.dia)" badge badge-variant="" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar button v-if="item.status==1 && DEL==1" v-on:click="eliminarHorario(item.id)" badge badge-variant="danger" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar v-if="item.status==1 && DEL==0" badge :badge-variant="item.estado" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-avatar v-if="item.status==2" badge :badge-variant="item.estado" :class="item.estado" size="2.5rem" :id="`popover-1-${item.id}${item.horario}`"> {{item.inicial}}</b-avatar>
                                                    <b-popover :target="`popover-1-${item.id}${item.horario}`" :placement="item.medico" variant="secondary" :title="`${item.medico} `" triggers="hover focus" data-html="true" :content="`${item.horario} <br> ${item.final}`">
                                                        <div>
                                                            <b-alert show class="small">
                                                                <strong>Horario:</strong><br>
                                                                Inicio: <strong>{{item.horario}}</strong><br>Final: <strong>{{item.final}}</strong><br /><br />Estado: <strong>{{item.estado}}</strong>
                                                            </b-alert>
                                                            <div class="text-right">
                                                                <b-button v-if="item.estado!='PENDIENTE'" v-on:click="verHistorico({ID: item.id }), pantalla({PANTALLA: 'verHistorico' })" size="sm" variant="primary">Ver detalle</b-button>
                                                            </div>
                                                        </div>
                                                    </b-popover>
                                                </template>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                        <br />
                    </template>
                </b-container>
            </div>
        </div>
    </div>

    <b-modal id="verHorario" size="lg" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">HORARIO</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-12 col-lg-12">
                                    <template v-for="q of ListaHorarios">
                                        <CENTER>
                                            <h2>{{q.dia}}</h2>
                                            <template v-for="qq of q.listaMedicos">
                                                <div>{{qq.medico}}</div>
                                                <template v-for="qqq of qq.listaHoras">
                                                    <b-avatar button v-if="qqq.status==0" badge badge-variant="" class="badge badge-light" size="1.9rem">{{qqq.hora}}</b-avatar>
                                                    <b-avatar button v-if="qqq.status==1" badge badge-variant="" :class="qqq.estado" size="1.9rem">{{qqq.hora}}</b-avatar>
                                                </template>
                                                <br />
                                                <hr />
                                                <br />
                                            </template>
                                        </CENTER>
                                    </template>

                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="verHistorico" size="lg" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">HISTORICO DE ATENCIÓN</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div class="row">
                                <div class="col-xs-12 col-md-12 col-lg-12">
                                    @*<p>Elige uno, para continuar</p>*@
                                    <p>Detalle de atenciones:</p>
                                    <b-table hover :items="listarDetalle"
                                             @*:fields="Columnas"*@
                                             stacked="md"
                                             head-variant="light"
                                             responsive
                                             show-empty
                                             small>
                                        <template #empty="scope">
                                            <h6 class="text-center">No hay filas para mostrar.</h6>
                                        </template>
                                        <template #cell(name)="row">
                                            {{ row.value.first }} {{ row.value.last }}
                                        </template>
                                        <template #cell(ESTADO)="row">
                                            <b-badge pill :class="row.item.ESTADO">{{row.item.ESTADO}}</b-badge>
                                        </template>
                                    </b-table>
                                </div>
                            </div>
                            <div class="row">
                                <br /><br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="verMedicos" size="lg" data-html="true" hide-footer hide-header @@hide="limpiar()">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header colorSanPablo" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE MÉDICOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <div>
                                <b-tabs content-class="mt-3">
                                    <b-tab title="Médicos registrados" v-on:click="limpiar()" active>
                                        <b-row style=" height: 400px; overflow: scroll; ">
                                            <b-table :items="ListaMedicos"
                                                     :fields="ColumnaMedicosRegistrados"
                                                     stacked="md" head-variant="light" small>
                                                <template #cell(name)="row">
                                                    {{ row.value.first }} {{ row.value.last }}
                                                </template>
                                                <template #cell(ID)="row">
                                                    <b-avatar title="Editar" v-on:click="eliminarMedico(row.item, row.index, $event.target)" button icon="person-x" size="3rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                                    @*<b-avatar v-on:click="editarPermiso(row.item, row.index, $event.target)" title="Editar" button icon="pencil-square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                                        <b-avatar v-on:click="eliminarPermiso(row.item, row.index, $event.target)" title="Editar" button icon="trash" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@
                                                </template>
                                            </b-table>
                                        </b-row>
                                    </b-tab>
                                    <b-tab title="Agregar médico" v-on:click="listarooMedico()">
                                        <div class="row">
                                            <div class="col-xs-12 col-md-6 col-lg-6 cajaTexto text-right reDim" style="padding-top:1.0rem;">
                                                <b-row>
                                                    <b-col lg="12" class="my-1">
                                                        <b-form-group label="Buscar"
                                                                      label-for="filter-input"
                                                                      label-cols-sm="3"
                                                                      label-align-sm="right"
                                                                      label-size="sm"
                                                                      class="mb-0">
                                                            <b-input-group size="sm">
                                                                <b-form-input id="filter-input"
                                                                              v-model="filter"
                                                                              type="search"
                                                                              v-on:keyup="buscar()"
                                                                              placeholder="Ingresar CMP o Nombres"></b-form-input>
                                                                <b-input-group-append>
                                                                    <b-button :disabled="!filter" @@click="filter = '', buscar()">Limpiar</b-button>
                                                                </b-input-group-append>
                                                            </b-input-group>
                                                        </b-form-group>
                                                    </b-col>
                                                </b-row>

                                                <b-row style=" height: 400px; overflow: scroll; ">
                                                    <b-table :items="ListaooMedicos"
                                                             :fields="ColumnasModulo"
                                                             stacked="md"
                                                             head-variant="light"
                                                             small>
                                                        <template #cell(name)="row">
                                                            {{ row.value.first }} {{ row.value.last }}
                                                        </template>
                                                        <template #cell(CMP)="row">
                                                            <b-avatar title="Editar" v-on:click="copiarMedico(row.item, row.index, $event.target)" button icon="person-plus" size="3rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                                            @*<b-avatar v-on:click="editarPermiso(row.item, row.index, $event.target)" title="Editar" button icon="pencil-square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                                                <b-avatar v-on:click="eliminarPermiso(row.item, row.index, $event.target)" title="Editar" button icon="trash" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@
                                                        </template>
                                                    </b-table>
                                                </b-row>
                                                @*<b-avatar button v-on:click="pantalla( { PANTALLA: 'verMedicos'})" title="Elegir para ver la lista de procedimientos" icon="search" size="2.5rem" variant="info"></b-avatar>*@
                                            </div>
                                            <div class="col-xs-12 col-md-1 col-lg-1 cajaTexto">

                                            </div>
                                            <div class="col-xs-12 col-md-5 col-lg-4 cajaTexto text-left reDim" style="padding-top:1.0rem;">
                                                <div v-if="CMP.length>0">
                                                    <b-form>
                                                        <br /><br />
                                                        <h3>Registro de médico</h3> <br />
                                                        <b-form-group id="input-group-1" label="CMP:" label-for="input-1">
                                                            <b-form-input id="input-1"
                                                                          v-model="CMP"
                                                                          type="tel"
                                                                          oninput="this.value = this.value.replace(/[^0-9]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"
                                                                          maxlength="8" readonly="true"
                                                                          required></b-form-input>
                                                        </b-form-group>
                                                        <b-form-group id="input-group-2" label="Nombres:" label-for="input-2" description="">
                                                            <b-form-input id="input-2"
                                                                          v-model="NOMBRES"
                                                                          placeholder="Nombres"
                                                                          type="tel" readonly="true"
                                                                          required></b-form-input>
                                                        </b-form-group>
                                                        <b-form-group id="input-group-4" label="Correo:" label-for="input-4" description="">
                                                            <b-form-input id="input-4"
                                                                          type="tel"
                                                                          v-model="CORREO"
                                                                          required></b-form-input>
                                                        </b-form-group>
                                                        <b-form-group id="input-group-4" label="Tarifa:" label-for="input-4">
                                                            <b-form-input id="input-4"
                                                                          type="tel"
                                                                          oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"
                                                                          v-model="TARIFA"
                                                                          required></b-form-input>
                                                        </b-form-group>
                                                        <div class="text-right">
                                                            <b-button v-on:click="registrarMedico()" variant="outline-info" pill><b-avatar variant="outline-info" icon="person-fill" size="2rem"></b-avatar>Guardar</b-button>
                                                        </div><br />
                                                    </b-form>
                                                </div>
                                                <div v-if="CMP.length==0">
                                                    <br /><br />
                                                    <p>Realiza la búsqueda del médico para poder iniciar</p>
                                                </div>
                                            </div>
                                        </div>

                                    </b-tab>
                                </b-tabs>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

</div>


<script>
    const configImg = {
            headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` }
        };

    const now = new Date()
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())

    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: '@User.Identity.Name',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',

            ID_SEDE: '@Session["ID_SEDE"].ToString()',
            SEDE: '@Session["SEDE"].ToString()',
            ID_GRUPO: 0,
            GRUPO: '',
            ID_MEDICO: 0,
            MEDICO: '',
            SELECCIONAR:'SELECCIONAR',
            ID: 0,
            TITULO: '',
            FINAL: '',
            INI_HORA: '08:00',
            NRO_HORA: '4',

            CMP: '',
            NOMBRES: '',
            CORREO: '',
            TARIFA: '',
            today: now,
            dayInt: '',
            month: '',
            filter: '',
            MES: '',
            year: '',
            ADD: 0,
            DEL: 0,
            Lista: [],
            ListaMeses: ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO', 'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'],
            ListarDias: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
            ListaHoras: [{
                hora: '00', hora: '01', hora: '02', hora: '03', hora: '04', hora: '05', hora: '06', hora: '07', hora: '08', hora: '09', hora: '10', hora: '11',
                hora: '12', hora: '13', hora: '14', hora: '15', hora: '16', hora: '17', hora: '18', hora: '19', hora: '20', hora: '21', hora: '22', hora: '23'
            }],
            checked: false,
            //listaAgenda: [],
            ListaGrupos: [],
            ListaooMedicos: [],
            ListaooMedicos_: [],
            listarDetalle: [],
            ListaMedicos: [],//                {ID: 1, TITULO: 'Dr. Jorge' },                {ID: 2, TITULO: 'Dr. Pedro' },                {ID: 3, TITULO: 'Dra. Carmen' },
            ListaHorarios: [],
            ListaHorarios_: [],
            Columnas: ['ID', 'TITULO', 'FECHA', { key: 'RESULTADO', label: 'ACCIONES' }],
            ColumnasModulo: ['MEDICO', 'CMP'],
            ColumnaMedicosRegistrados: ['ID', 'CMP', 'NOMBRES', 'CORREO', 'TARIFA', 'FECHA'],
        },
        mounted() {
            // this.totalRows = this.Lista.length
        },
        methods: {
            ocultarPantalla: function (form) {
                this.$bvModal.hide(form.PANTALLA);
            },

            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },

            limpiar: function () {
                this.ListaooMedicos = [];
                this.filter = '';
                this.CMP = '';
                this.NOMBRES = '';
                this.CORREO = "@@SANPABLO.COM.PE";
                this.TARIFA = '';
            },

            salida: function () {
                //this.listar();
            },

            ElegirGrupo: function (item) {
                this.ID_GRUPO = item.ID;
                this.listarMedicos();

                const now = new Date()
                //const today = new Date(now.getFullYear(), now.getMonth(), now.getDate())
                this.dayInt = now.getDate();
                this.month = now.getMonth();
                this.year = now.getFullYear();
                this.mostrarCalendario(this.month, this.year);
            },

            verHistorico: function (item) {
                axios.post(this.SERVER_API + '/api/HonorariosMedicos/ListarCumplimientoDet', {
                    ID: item.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }).then(response => {
                    this.listarDetalle = response.data;           //
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },

            verHoras: function (item) {
                let fechaCalendario = this.year + ("00" + (this.month + 1)).slice(-2) + ("00" + (item)).slice(-2);
                let listaHoras = []; let listaMedicos = []; this.ListaHorarios = [];
                let listaDia = this.ListaHorarios_.filter(x => x.dia == fechaCalendario);
                let lista = listaDia[0].listaMedicos;
                lista = lista.filter(x => x.status != 0);
                
                //alert(JSON.stringify(lista));
                for (let l in lista) {
                    let medico = lista[l].medico;
                    let estado = lista[l].estado;
                    let lh = lista[l].listaHoras;
                    let lm = listaMedicos.filter(x => x.medico == medico);
                    listaHoras = [];
                    if (lm.length > 0) {
                        for (let h in lh) {
                            let hora = lh[h].hora;
                            let lhoraA = lm[0].listaHoras.filter(x => x.hora == hora && x.status > 0);
                            if (lhoraA.length > 0) {
                                listaHoras.push({ hora: hora, status: 1, estado: lhoraA[0].estado })
                            }
                            else { listaHoras.push({ hora: hora, status: lh[h].status, estado: estado }) };
                        }
                        listaMedicos = listaMedicos.filter(x => x.medico != medico);
                        listaMedicos.push({ medico: medico, listaHoras: listaHoras }); 
                    } else {
                        for (let h in lh) {
                            listaHoras.push({ hora: lh[h].hora, status: lh[h].status, estado: estado });
                        }
                        listaMedicos.push({ medico: medico, listaHoras: listaHoras }); 
                    }
                }
                this.ListaHorarios.push({ dia: this.year + " / " + ("00" + (this.month + 1)).slice(-2) + " / " + ("00" + (item)).slice(-2), listaMedicos: listaMedicos });
            },

            mostrarCalendario: function (month, year) {          // MODIFICADO          //  alert(JSON.stringify(this.ListaMaestra));
                this.MES = this.ListaMeses[month];
                let listaAgendas = [];
                var cantidadDiasMes = new Date(year, month + 1, 0).getDate(); // - 1
                var diasSemana = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
                let dias = [];
                let position = 0;
                for (var i = 0; i <= 6; i++) {
                    let x = new Date(year, month, 1).getDay(); // - 1
                    let diaCero = diasSemana[x];
                    let dia = diasSemana[i];
                    if (dia == diaCero) {
                        i = i + 100;
                    } else {
                        position = position + 1;
                        dias.push({ estado: 'cajaHorarioGrisPress', status: 0, position: position, fecha: '', nombre: dia, grupo: '' });
                    }
                }
                let mesCalendario = year + '' + ("00" + (month + 1)).slice(-2);
                    axios.post(this.SERVER_API + '/api/HonorariosMedicos/ListarAgenda', {
                        ID: mesCalendario,
                        ID_GRUPO: this.ID_GRUPO,
                    }).then(response => {
                        listaAgendas = response.data;           //alert(JSON.stringify(listaAgendas));
                        let medicos = [];
                        const map = new Map();
                        for (const item of listaAgendas) {
                            for (let i of item.listaAgendas) {
                                if (!map.has(i.MEDICO)) {
                                    map.set(i.MEDICO, true);
                                    medicos.push({ Nombres: i.MEDICO });
                                }
                            }
                        }
                        let fechaMedico = []; let horas = [];
                        for (var dia = 1; dia <= cantidadDiasMes; dia++) {
                            let plus = 1; let correlativo = 1;   /// agregar medico  -->  fecha -->  hora posicion
                            let x = new Date(year, month, dia).getDay();
                            let fechaCalendario = year + ("00" + (month + 1)).slice(-2) + ("00" + (dia)).slice(-2);
                            let today = new Date(year, month, dia + 1);
                            let today_ = new Date();
                            if (today < today_) {
                                let gr = []; 
                                for (let a in listaAgendas) {
                                    if (listaAgendas[a].FECHA_AGENDA == fechaCalendario) {
                                        let grAnterior = listaAgendas[a].listaAgendas;
                                        for (let g in grAnterior) {
                                            horas = [];
                                            let restar = 0;
                                            let horaI = grAnterior[g].HORA_NUM;
                                            for (let hora = 0; hora <= 23; hora++) {
                                                if (horaI == hora) {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 1 });
                                                    restar = grAnterior[g].HORAS;
                                                } else if (restar > 0) {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 1 });
                                                    restar = restar - 1;
                                                } else {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 0 });
                                                }
                                            }
                                            gr.push({ id: grAnterior[g].ID, estado: grAnterior[g].ESTADO, status: 2, medico: grAnterior[g].MEDICO, inicial: grAnterior[g].MEDICO.charAt(0) + grAnterior[g].MEDICO.charAt(1) + grAnterior[g].MEDICO.charAt(2) + grAnterior[g].MEDICO.charAt(3), horario: grAnterior[g].FECHA_INI, final: grAnterior[g].FECHA_FIN, statusCierre: 1, listaHoras: horas });
                                        }
                                        fechaMedico.push({ dia: fechaCalendario, listaMedicos: gr });
                                    }
                                }
                                dias.push({ estado: 'cajaHorarioWhitePress', status: 0, position: position, fecha: fechaCalendario, nombre: diasSemana[x], dia: dia, grupo: gr });
                            } else {
                                let gr = [];
                                for (let a in listaAgendas) {
                                    if (listaAgendas[a].FECHA_AGENDA == fechaCalendario) {
                                        let grAnterior = listaAgendas[a].listaAgendas;
                                        for (let g in grAnterior) {
                                            horas = [];
                                            let restar = 0;
                                            let horaI = grAnterior[g].HORA_NUM;
                                            for (let hora = 0; hora <= 23; hora++) {
                                                if (horaI == hora) {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 1 });
                                                    restar = grAnterior[g].HORAS;
                                                } else if (restar > 0) {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 1 });
                                                    restar = restar - 1;
                                                } else {
                                                    horas.push({ hora: ("00" + (hora)).slice(-2), status: 0 });
                                                }
                                            }
                                            let status = (grAnterior[g].ESTADO == 'PENDIENTE' ? 1 : grAnterior[g].ESTADO == 'NUEVO' ? 0 : 2);
                                            gr.push({ id: grAnterior[g].ID, estado: grAnterior[g].ESTADO, status: status, medico: grAnterior[g].MEDICO, inicial: grAnterior[g].MEDICO.charAt(0) + grAnterior[g].MEDICO.charAt(1) + grAnterior[g].MEDICO.charAt(2) + grAnterior[g].MEDICO.charAt(3), horario: grAnterior[g].FECHA_INI, final: grAnterior[g].FECHA_FIN, statusCierre: 0, listaHoras: horas });
                                        }
                                        fechaMedico.push({ dia: fechaCalendario, listaMedicos: gr });
                                    }
                                }
                                if (plus == 1) {
                                    correlativo = correlativo + 1;
                                    secuencial = correlativo + '_';
                                    gr.push({ id: secuencial, estado: 'NUEVO', status: 0, medico: '', inicial: ' + ', horario: '', final: '' });
                                    plus = 0;
                                }
                                dias.push({ estado: 'cajaHorarioNaranjaPress', status: 1, position: position, fecha: fechaCalendario, nombre: diasSemana[x], dia: dia, grupo: gr });
                            }

                            this.ListaHorarios_ = fechaMedico;
                        }
                    }).catch(e => {
                        this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                    });
                this.Lista = dias;
            },

            inicio: function () {
                axios.defaults.headers.common['Authorization'] = 'Bearer ' + '@Session["Token"].ToString()';
                this.listarGrupos();
            },

            buscar: function () {
                this.filter = this.filter.toUpperCase();
                if (this.filter.length > 0) {
                    let palabra = this.filter;
                    this.ListaooMedicos = this.ListaooMedicos_.filter(x => {
                        return x.CAMPO_BUSQUEDA.includes(palabra);
                    });
                } else {
                    this.ListaooMedicos = [];
                }
            },

            copiarMedico: function (i) {
                this.CMP = i.CMP;
                this.NOMBRES = i.MEDICO;
            },

            registrarMedico: function () {
                this.show = true;
                axios.post(this.SERVER_API + '/api/HonorariosMedicos/RegistrarMedico', {
                    ID: this.ID,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_USUARIO: this.ID_USUARIO,
                    CORREO: this.CORREO,
                    CMP: this.CMP,
                    NOMBRES: this.NOMBRES,
                    ESPECIALIDAD: '',  //this.ESPECIALIDAD,
                    INICIAL: this.INICIAL,
                    TARIFA: this.TARIFA,
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.mostrarToast({ toast: 'info', msg: 'Se guardo correctamente ...' });
                        this.$bvModal.hide('verMedicos');
                        this.listarMedicos();
                    }
                }).catch(e => {
                });
            },

            eliminarMedico: function (i) {
                this.show = true;
                axios.post(this.SERVER_API + '/api/HonorariosMedicos/EliminarMedico', {
                    ID: i.ID,
                    ID_USUARIO: this.ID_USUARIO,
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.mostrarToast({ toast: 'info', msg: 'Se guardo correctamente ...' });
                        this.listarMedicos();
                    }
                }).catch(e => {
                });
            },

            listarMedicos() {   // ID: i.ID, TITULO: i.TITULO
                this.ListaMedicos = [];
                if (this.ID_GRUPO > 0) {
                    this.show = true;
                    axios.post(this.SERVER_API + '/api/HonorariosMedicos/ListarMedico', {
                        ID_GRUPO: this.ID_GRUPO,
                    }).then(response => {
                        if (response.data.length > 0) {
                            this.ListaMedicos = response.data;
                            this.show = false;
                        }
                    }).catch(e => {
                        this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                    });
                }
            },

            elegirMedicoHorario: function (item) {
                this.ID_MEDICO = item.ID;
            },

            elegirHorario: function (i) {                      //alert(JSON.stringify(nDias));
                let fechaCalendario = this.year + ("00" + (this.month + 1)).slice(-2) + ("00" + (i)).slice(-2);
                let horario = this.ListaHorarios_.filter(x => x.dia == fechaCalendario);
                let medicoss = horario.length>0 ? horario[0].listaMedicos : [];
                let nombres = this.MEDICO.NOMBRES;
                let horarioss = horario.length > 0 ? medicoss.filter(x => x.medico == nombres) : [];
                //alert(JSON.stringify(horarioss));

                let contar = 0;
                let hora = parseFloat(this.INI_HORA.slice(0, 2));
                let cantHoras = (parseFloat(hora) + parseFloat(this.NRO_HORA)).toFixed(0);
                //alert(hora + ' - ' + cantHoras);
                for (let horaT in horarioss) {
                    let hor = horarioss[horaT].listaHoras;
                    for (var h = hora; h <= cantHoras; h++) {
                        let listaHoras = hor.filter(x => x.hora == ("00" + (h + 1)).slice(-2) && x.status == 1);
                        //alert(JSON.stringify(listaHoras));
                        if (listaHoras.length > 0) { contar = contar + 1; }
                    }
                }
                if (contar == 0) {
                    if (this.ID_MEDICO != '' && this.ADD == 1) {
                        let dias = this.Lista;
                        for (let d in dias) {
                            if (dias[d].dia == i && dias[d].status == 1) {
                                let hora = this.INI_HORA.slice(0, 2);
                                let min = this.INI_HORA.slice(3, 5);
                                let date = new Date(this.year, this.month, i, hora, min, 0);
                                let dateIni = date.getFullYear() + "-" + ("00" + (date.getMonth() + 1)).slice(-2) + "-" + ("00" + date.getDate()).slice(-2) + " " + ("00" + date.getHours()).slice(-2) + ":" + ("00" + date.getMinutes()).slice(-2); //+ ":" + ("00" + date.getSeconds()).slice(-2);
                                let numberOfMlSeconds = date.getTime();
                                let intHours = this.NRO_HORA;
                                let addMlSeconds = (intHours * 60) * 60000;
                                let dateF = new Date(numberOfMlSeconds + addMlSeconds);
                                let dateFin = dateF.getFullYear() + "-" + ("00" + (dateF.getMonth() + 1)).slice(-2) + "-" + ("00" + dateF.getDate()).slice(-2) + " " + ("00" + dateF.getHours()).slice(-2) + ":" + ("00" + dateF.getMinutes()).slice(-2); //+ ":" + ("00" + dateF.getSeconds()).slice(-2);
                                this.registrarHorario({ dateIni: dateIni, dateFin: dateFin });
                            }
                        }
                    } else { this.mostrarToast({ toast: 'warning', msg: 'Debe elegir un médico para continuar ...' }); }
                } else { this.mostrarToast({ toast: 'warning', msg: 'Revisar el horario del médico de ' + hora + ' - ' + cantHoras  }); }
            },

            registrarHorario: async function (i) {
                await axios.post(this.SERVER_API + '/api/HonorariosMedicos/RegistrarHorario', {
                    ID: 0,
                    ID_MEDICO: this.ID_MEDICO,
                    ID_AGENDA: this.ID_GRUPO,
                    FEC_INI: i.dateIni,
                    FEC_FIN: i.dateFin,
                    TARIFA: 0,
                    HORAS: this.NRO_HORA,
                    ID_USUARIO: this.ID_USUARIO
                }, configImg).then(response => {
                    if (response.data.ID > 0) {
                        this.mostrarToast({ toast: 'info', msg: 'Se registró correctamente' });
                        this.mostrarCalendario(this.month, this.year);
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Ocurrio un error al intentar registrar...' });
                });
            },

            eliminarHorario: function (i) {
                if (i != '' && this.DEL == 1) {
                    axios.post(this.SERVER_API + '/api/HonorariosMedicos/EliminarHorario', {
                        ID: i,
                        ID_USUARIO: this.ID_USUARIO,
                        ID_SEDE: this.ID_SEDE,
                    }).then(response => {
                        if (response.data.ID > 0) {
                            this.mostrarToast({ toast: 'info', msg: 'Registro eliminado correctamente' });
                            this.mostrarCalendario(this.month, this.year);
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'Ocurrio un error inesperado' });
                        }
                    }).catch(e => {
                        this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                    });
                }
            },

            elegirMedico: function (medico, horario) {
                this.MEDICO = medico;
                this.HORARIO = horario;
            },

            anterior: function () {
                this.year = this.month === 0 ? this.year - 1 : this.year;
                this.month = this.month === 0 ? 11 : this.month - 1;
                this.mostrarCalendario(this.month, this.year);
            },

            siguiente: function () {
                this.year = this.month === 11 ? this.year + 1 : this.year;
                this.month = (this.month + 1) % 12;
                this.mostrarCalendario(this.month, this.year);
            },

            listarGrupos: function () {
                axios.post(this.SERVER_API + '/api/Grupo/ListarGruposxSedexUsuario', {
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                }).then(response => {
                    this.ListaGrupos = response.data;
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },

            listarooMedico: async function () {
                this.listarMedicos();
                await axios.post(this.SERVER_API + '/api/HonorariosMedicos/ListarMedicosHM', {
                        CMP: '',
                        MEDICO: '',
                        ID_SEDE: this.ID_SEDE,
                    }, configImg).then(response => {
                        if (response.data.length > 0) {
                            this.ListaooMedicos_ = response.data;
                            this.$bvModal.show('solicitarMedico');
                        } else {
                            this.mostrarToast({ toast: 'warning', msg: 'No encontramos información ...' });
                        }
                    }).catch(e => { });
            },
        }
    })
    app.inicio();

</script>
