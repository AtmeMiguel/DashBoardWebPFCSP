@{
    ViewBag.Title = "Registrar Cuenta";
    Layout = "~/Views/Shared/_MasterExternoPagosPF.cshtml";
    string SERVIDOR = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];
}


<style>


    .form-group-rc {
        /*      max-width: 300px;*/
        width: 80%;
        margin: auto;
    }

        .form-group-rc label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            font-size: 16px;
        }

    .form-row-rc {
        display: flex;
        border: 1px solid #ccc;
        border-radius: 6px;
        overflow: hidden;
        background-color: #fff;
    }

    .select-rc {
        border: none;
        padding: 10px 12px;
        background-color: #fff;
        font-size: 15px;
        /*   appearance: none;*/
        border-right: 1px solid #ccc;
        width: 80px;
    }

    input[type="text"] {
        border: none;
        padding: 10px 12px;
        flex-grow: 1;
        font-size: 15px;
    }

    input:focus, select:focus {
        outline: none;
    }

    /* desplegables */

    /* contenedor recuperar contraseña */

    .account-content {
        width: 450px; /* Ancho del elemento */
        height: 700px; /* Alto del elemento */
        transform: rotate(0deg); /* Rotación en 0 grados */
        opacity: 1; /* Opacidad completa (sin transparencia) */
        position: absolute; /* Necesario para 'top' y 'left' */
        /*  top: 200px; Distancia desde la parte superior */
        /*   left: 840px; Distancia desde la parte izquierda */
        border-radius: 16px; /* Bordes redondeados */
        background-color: #FFFFFF33;
        top: 115px;
        left: 15px;
    }

    .account-text-titulo {
        font-family: 'Inter', sans-serif; /* Asumiendo que la fuente 'Inter Tight' está disponible */
        font-weight: 700; /* Negrita (Bold) */
        line-height: 32px;
        letter-spacing: 0;
        text-align: center;
        font-size: 27px;
        /* padding-left:21px;*/
    }


    .msgAlerta {
        font-family: 'Inter', sans-serif; /* Asegúrate de tener esta fuente disponible */
        font-weight: 200; /* Peso normal */
        font-style: normal; /* Estilo regular */
        font-size: 14px; /* Tamaño de la fuente */
        line-height: 24px; /* Altura de línea */
        letter-spacing: 0; /* Espaciado de letras */
        /*   font-size: 18px;
        margin-bottom: 15px;*/
        color: #FFEB3B;
        /*text-transform: lowercase;*/
        padding-top: 10px;
    }

    .enlacePol {
        font-family: 'Inter', sans-serif; /* Asegúrate de tener esta fuente disponible */
        font-weight: 300; /* Peso normal */
        font-style: normal; /* Estilo regular */
        font-size: 15px; /* Tamaño de la fuente */
        line-height: 24px; /* Altura de línea */
        letter-spacing: 0; /* Espaciado de letras */
        /*   font-size: 18px;
        margin-bottom: 15px;*/
        color: white;
        text-decoration:underline;
        /*text-transform: lowercase;*/
    }


    .cta-button-ini {
        font-family: 'Inter', sans-serif; /* Asumiendo que la fuente 'Inter Tight' está disponible */
        background-color: #ED6A00;
        border: none;
        color: white;
        padding: 12px 24px;
        cursor: pointer;
        font-size: 15px;
        border-radius: 15px;
    }


   

    /* Ocultando vector y otros*/
    .vector-botton-right {
        display: none;
    }

    .content-mobile {
        display: none;
    }

    .content1-btn-login {
        /* display: none;*/
        visibility: hidden;
    }

    .checkbox-politicas {
        color: white;
        cursor: pointer;
    }

        .checkbox-politicas label {
            cursor: pointer;
        }

    /* media querys */
    @@media screen and (max-width: 768px) {

        .account-content {
            width: 100%; /* Ancho del elemento */
            top: 0;
            left: 0;
        }

        .hero-content2 {
            position: relative;
            width: 100%;
            height: 100%;
        }

        .hero-content1 {
            display: none;
        }


        .content-mobile {
            display: none;
        }
    }

</style>
<div id="app">

    <div v-if="v_paso=='1'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">1. Identificación de cliente</p>

        <p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 9px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300;">Identificate ingresando los siguientes datos:</p><br />
        <br />

        <div class="form-group-rc">

            <label for="tipoDocumento" style="font-size: 13px; padding-bottom: 4px;padding-top:2px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Tipo documento</label>
            @*<div class="form-row-rc">*@

            <b-form-select id="tipoDocumento" name="tipoDocumento"
                           v-model="selectedDOC"
                           :options="optionsDOC" class="select-rc" style="line-height: initial; height: initial; width: 100%;border-radius:15px; "></b-form-select>
            <span class="msgAlerta" v-if="msgAlertaTipo != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaTipo != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaTipo}}</span>

            <label for="documento" style="font-size: 13px; padding-bottom: 4px; padding-top: 17px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Nro. de Documento</label>
            <b-form-input id="documento"
                          v-model="documento"
                          type="text"
                          placeholder="Ingrese número" style="border-radius:15px;"></b-form-input>
            <span class="msgAlerta" v-if="msgAlertaNro != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaNro != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaNro}}</span>

            <br />
            <br />

            <div>

                <span class="textoGen">Al continuar acepto las&nbsp;</span><b-link v-on:click="mostrarPoliticas()" class="enlacePol">Politicas de Privacidad</b-link>
            </div>
            @*<br />*@
            <b-form-checkbox id="chkPoliticas"
                             v-model="estPoliticas"
                             name="chkPoliticas"
                             value="aceptado"
                             unchecked-value="no_aceptado" style="color:white;display:none;" class="checkbox-politicas">
                Declaro haber leido los terminos y condiciones.
            </b-form-checkbox>

            @*</div>*@
            <span class="msgAlerta" v-if="estPoliticas == 'no_aceptado'" style="width: 80%; text-align: center;">
                <span v-if="estPoliticas == 'no_aceptado'" class="bi bi-exclamation-circle"></span>
                &nbsp;Acepte terminos y condiciones
            </span>

        </div>

        <br />



        <div class="div-flex-center">
            <p class="msgAlerta" v-if="msgAlerta != ''" style="width: 80%; text-align: center;"><span v-if="msgAlerta != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlerta}}</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" v-on:click="paso1()" v-if="stateloader=='Comenzar'">Continuar</button>
            <button class="cta-button-ini" style="width:80%;" disabled v-if="stateloader=='Cargando'">Cargando...&nbsp;<b-spinner small></b-spinner></button>

        </div>

        <div class="div-flex-center" style="padding-top:10px;">
            <input class="cta-button-reg" style="width:80%;" onclick="window.location.href ='@Url.Content("~/Seguridad/Login")';" type="button" value="Regresar">
        </div>

        @*</form>
        }*@
    </div>

    <div v-if="v_paso=='2'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">2. Envio de codigo de verificación.</p>

        <p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 9px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">Ingresa un correo electronico para el envio del codigo de verificación.</p><br />

        <div class="form-group-rc">

            <label for="correo" style="font-size: 13px; padding-bottom: 4px; padding-top: 17px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Correo</label>
            <b-form-input id="correo"
                          v-model="correo"
                          name="correo"
                          type="email"
                          placeholder="Ingrese correo" style="border-radius:15px;"></b-form-input>
            <span class="msgAlerta" v-if="msgAlertaCorreo != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaCorreo != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaCorreo}}</span>
            <br />

        </div>





        <div class="div-flex-center">
            <p class="msgAlerta" v-if="msgAlerta != ''" style="width: 80%; text-align: center;"><span v-if="msgAlerta != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlerta}}</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" v-on:click="paso2()" v-if="stateloader=='Comenzar'">Continuar</button>
            <button class="cta-button-ini" style="width:80%;" disabled v-if="stateloader=='Cargando'">Cargando...&nbsp;<b-spinner small></b-spinner></button>

        </div>

        <div class="div-flex-center" style="padding-top:10px;">
            <input class="cta-button-reg" style="width:80%;" @@click="v_paso='1';msgAlerta='';" type="button" value="Regresar">
        </div>


        @*</form>
            }*@
    </div>


    <div v-if="v_paso=='3'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">3. Validación de cliente.</p>

        <p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 15px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">Se envio un codigo de verificación al correo : <br /><strong><span style="word-break: break-all; text-decoration: underline; ">{{correo}}</span></strong> para validar tu identidad.</p><br />

        <div class="form-group-rc">

            <label for="codAut" style="font-size: 13px; padding-bottom: 4px; padding-top: 17px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Ingrese codigo de verificación</label>
            <b-form-input id="codAut"
                          v-model="codAut"
                          name="codAut"
                          type="text"
                          placeholder="Ingrese codigo" style="border-radius:15px;"></b-form-input>
            <span class="msgAlerta" v-if="msgAlertaCodAut != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaCodAut != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaCodAut}}</span>
            <br />

        </div>





        <div class="div-flex-center">
            <p class="msgAlerta" v-if="msgAlerta != ''" style="width: 80%; text-align: center;"><span v-if="msgAlerta != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlerta}}</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" v-on:click="paso3()" v-if="stateloader=='Comenzar'">Continuar</button>
            <button class="cta-button-ini" style="width:80%;" disabled v-if="stateloader=='Cargando'">Cargando...&nbsp;<b-spinner small></b-spinner></button>

        </div>

        <div class="div-flex-center" style="padding-top:10px;">
            <input class="cta-button-reg" style="width:80%;" @@click="v_paso='2';msgAlerta='';" type="button" value="Regresar">
        </div>


        @*</form>
            }*@
    </div>

    <div v-if="v_paso=='4'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">4. Creación contraseña.&nbsp;</p>

        <p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 15px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">La contraseña que ingreses la usaras para acceder a tu cuenta.</p>


        <br />
        <div class="form-group-rc">

            <label for="clave" style="font-size: 13px; padding-bottom: 4px; padding-top: 17px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Contraseña</label>
            <b-form-input id="clave"
                          v-model="clave"
                          name="clave"
                          type="password"
                          placeholder="" style="border-radius:15px;"></b-form-input>
            <span class="msgAlerta" v-if="msgAlertaClave != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaClave != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaClave}}</span>
            <br />

        </div>

        <div class="form-group-rc">

            <label for="clave2" style="font-size: 13px; padding-bottom: 4px; padding-top: 5px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif; font-weight: 400;">Confirmar contraseña</label>
            <b-form-input id="clave2"
                          v-model="clave2"
                          name="clave2"
                          type="password"
                          placeholder="" style="border-radius:15px;"></b-form-input>
            <span class="msgAlerta" v-if="msgAlertaClave2 != ''" style="width: 80%; text-align: center;"> <span v-if="msgAlertaClave2 != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlertaClave2}}</span>
            <br />

        </div>

        <div class="div-flex-center">
            <p class="msgAlerta" v-if="msgAlerta != ''" style="width: 80%; text-align: center;"><span v-if="msgAlerta != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlerta}}</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" v-on:click="paso4()" v-if="stateloader=='Comenzar'">Continuar</button>
            <button class="cta-button-ini" style="width:80%;" disabled v-if="stateloader=='Cargando'">Cargando...&nbsp;<b-spinner small></b-spinner></button>

        </div>

        <div class="div-flex-center" style="padding-top:10px;">
            <input class="cta-button-reg" style="width:80%;" @@click="v_paso='3';msgAlerta='';" type="button" value="Regresar">
        </div>
        @*</form>
            }*@
    </div>

    <div v-if="v_paso=='5'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">5. Confirmacion de Datos.&nbsp;</p>

        <p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 15px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">Verifica la información que se detalla a continuación.</p>


        <br /> <br />
        <div class="form-group-rc">
            <p style="font-weight:bold;">Tipo documento:</p>
        </div>

        <div class="form-group-rc">
            <p>&nbsp;&nbsp;&nbsp;{{tipoDoc}}</p>
        </div>

        <div class="form-group-rc">
            <p style="font-weight:bold;">Nro. documento:</p>
        </div>

        <div class="form-group-rc">
            <p>&nbsp;&nbsp;&nbsp;{{documento}}</p>
        </div>


        <div class="form-group-rc">
            <p style="font-weight:bold;">Correo:</p>
        </div>

        <div class="form-group-rc">
            <p>&nbsp;&nbsp;&nbsp;{{correo}}</p>
        </div>

        @*<div class="form-group-rc">
            <p style="font-weight:bold;">Usuario:</p>
        </div>

        <div class="form-group-rc">
            <p>&nbsp;&nbsp;&nbsp;{{documento}}</p>
        </div>*@

        <div class="div-flex-center">
            <p class="msgAlerta" style="width: 80%;"><span class="bi bi-exclamation-circle"></span>&nbsp;Recuerda que tu usuario sera tu número de documento de identidad.</p>   @*@ViewBag.Message*@
        </div>
        <br />
        @*<p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 15px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">Recuerda que debes ingresar con tu DNI o Carnet de Extranjeria y la contraseña que creaste.</p>*@

        <div class="div-flex-center">
            <p class="msgAlerta" v-if="msgAlerta != ''" style="width: 80%; text-align: center;"><span v-if="msgAlerta != ''" class="bi bi-exclamation-circle"></span>&nbsp;{{msgAlerta}}</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" v-on:click="paso5()" v-if="stateloader=='Comenzar'">Confirmar</button>
            <button class="cta-button-ini" style="width:80%;" disabled v-if="stateloader=='Cargando'">Cargando...&nbsp;<b-spinner small></b-spinner></button>

        </div>

        <div class="div-flex-center" style="padding-top:10px;">
            <input class="cta-button-reg" style="width:80%;" @@click="v_paso='4';msgAlerta='';" type="button" value="Regresar">
        </div>
        @*</form>
        }*@
    </div>


    <div v-if="v_paso=='6'" class="account-content">

        @*@using (Html.BeginForm("RecuperarCuenta", "Seguridad", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
        <form>*@

        <br /><br /><br />
        <p class="account-text-titulo">Registrate</p><br />

        <p style="font-size: 16px; text-align: left; padding-left: 0px; font-family: 'Inter', sans-serif;margin:auto;width:80%;font-weight:500;">6. Registro Finalizado.&nbsp;</p>

        <br />
        @*<p style="font-size: 15px; text-align: left; padding-left: 0px; padding-top: 15px; font-family: 'Inter', sans-serif; margin: auto; width: 80%; font-weight: 300; line-height:24px;">Recuerda que debes ingresar con tu DNI o Carnet de Extranjeria y la contraseña que creaste.</p>*@
        <br />
        <br />
        <br />
        <br />
        <br />

        <div class="div-flex-center">
            <span style="font-size:100px;width:100%;text-align:center;" class="bi bi-check-circle-fill"></span>
        </div>
        <br />
        
        <div class="div-flex-center">
            <p style="width: 80%; text-align: center;">Usuario registrado inicia sesion</p>   @*@ViewBag.Message*@
        </div>

        <div class="div-flex-center" style="padding-top:10px;">

            <button class="cta-button-ini" style="width:80%;" onclick="window.location.href='@Url.Content("~/Seguridad/Login")';">Iniciar Sesion</button>
       
        </div>
        @*</form>
        }*@
    </div>


    @*centered  hide-footer hide-header  *@
    <b-modal id="mdPoliticas" centered size="lg" title="POLITICAS DE PRIVACIDAD DE DATOS PERSONALES"
             ok-title="Aceptar"
             cancel-title="Cancelar"
             ok-variant="custom-ok"
             cancel-variant="custom-cancel"
             header-class="custom-modal-header"
             data-html="true" @@hide="salida">

        <br />

        <p class="p-body-modal">1. Objetivo La presente política de privacidad de Datos Personales, tiene por finalidad informarle cómo las empresas / unidades de negocio del Grupo San Pablo</p>
        <p class="p-body-modal">2. Alcance La presente política aplica para todas las empresas/unidades de negocio del Grupo San Pablo: Operaciones y Proyectos Integrales (OPI), Red de Salud de Clínicas, Aranwa Hotels (Peruvian), Instituto Tecnológico, Inmobiliaria Magnopata, Tomomedic, Centro de Salud Ocupacional (CSO), Cardiomóvil (Servial),Laboratorios Qualab y Estacionamientos Templo, grupo empresarial que en adelante denominaremos Grupo San Pablo.</p>
        <p class="p-body-modal">3. Definición de Datos Personales Toda información sobre una persona natural que la identifica o la hace identificable a través de medios que pueden ser razonablemente utilizados.</p>
        <p class="p-body-modal">4. El banco de datos de titularidad del Grupo San Pablo Conjunto organizado de datos personales, automatizado o no, y con una determinada finalidad, cualquiera que sea la forma de su creación, formación, almacenamiento, organización y acceso; pudiendo inclusive pertenecer los mismos datos personales a más de un banco de datos personales.</p>
        <p class="p-body-modal">5. Uso autorizado de datos personales Con la finalidad de brindar el Servicio, el Grupo San Pablo informa al Usuario que, bajo las normas vigentes (Ley No.29733 y su reglamento), se encuentra autorizada para tratar aquellos datos personales otorgados de forma física o digital por el Usuario o a los que el Grupo San pablo accede de manera legítima sobre su situación personal, médica y de salud (“Información”). Esto incluye los datos personales proporcionados a futuro por el Usuario, o los que sean generados por el Grupo San Pablo bajo la prestación de los Servicios. En ese sentido, el Grupo San Pablo requiere del consentimiento libre, previo, expreso, inequívoco e informado del titular de los datos personales para el tratamiento de los mismos, salvo en los casos de excepción expresamente establecidos por Ley. El Grupo San Pablo no requiere consentimiento para tratar la Información del Usuario obtenida de fuentes accesibles al público, gratuitas o no; asimismo, podrá usar sus datos personales de fuentes no públicas, siempre que dichas fuentes cuenten con el consentimiento del Usuario para tratar y transferir dichos datos personales. El Usuario se compromete a mantener permanentemente actualizada su Información mientras dure su relación con el Grupo San Pablo, para la correcta ejecución de los Servicios.</pclass="p-body-modal">
        <p class="p-body-modal">6. Resguardo de la información del Usuario El Grupo San Pablo deberá almacenar los datos personales de manera tal que posibilite el ejercicio de los derechos de información, acceso, rectificación, cancelación y oposición de sus titulares. El Grupo San Pablo pondrá a disposición todos los recursos humanos y tecnológicos necesarios, aplicándolos en proporción a la naturaleza de los datos almacenados y los riesgos a los que se encuentran expuestos, a fin de garantizar la seguridad e integridad de los datos personales almacenados en sus bancos de datos personales. El Grupo San Pablo sólo realizará tratamiento sobre datos personales que estén almacenados en repositorios que reúnan las condiciones de seguridad exigidas por la Ley de Protección de Datos Personales y su Reglamento.</p>

        <p class="p-body-modal">7. Transferencias, destinatarios y encargados El Grupo San Pablo podrá transferir la Información del Usuario, para los usos autorizados, a nivel nacional a las empresas filiales, asociadas o miembros del Grupo San Pablo, sujetándose a las mismas obligaciones y medidas de seguridad, técnicas y legales descritas en la presente Política de Privacidad.</p>
        <p class="p-body-modal">8. Ejercicio de derechos El Usuario tendrá derecho a revocar el consentimiento otorgado en cualquier momento. Asimismo, puede ejercer los derechos de acceso, rectificación, cancelación y oposición reconocidos por la Ley No. 29733 y su reglamento (o aquellas que las modifiquen o sustituyan), cumpliendo con los requisitos exigidos por las referidas normas. El Usuario podrá dirigir su solicitud de ejercicio de los derechos acercándose a cualquiera de las sedes del Grupo San Pablo; comunicarse a la lista de correos electrónicos que figuran en las respectivas páginas web del Grupo San Pablo. Para estos efectos, la Información referida en esta Política corresponde al banco de datos de Pacientes que se encuentra registrado ante la Autoridad de Protección de Datos Personales.</p>

        <p class="p-body-modal">
            9. Edad de consentimiento Al brindar sus datos personales al Grupo San Pablo, el usuario declara tener al menos catorce años de edad o ser tutor de un menor de edad para otorgar el consentimiento de forma válida de acuerdo a la Ley. El Grupo San Pablo no llevará a cabo voluntariamente el tratamiento de Datos Personales relativos a menores de edad, salvo que se cuente con el debido consentimiento de acuerdo a la norma aplicable. En el supuesto de que se tenga conocimiento que los Datos Personales recogidos corresponden a un menor de edad sin autorización de su tutor legal, se adoptarán las medidas oportunas para eliminarlos.
        </p>

        <p class="p-body-modal">
            10. Modificaciones El Grupo San Pablo se reserva expresamente el derecho a modificar, actualizar o completar en cualquier momento la presente Política de Privacidad. Cualquier modificación, actualización o ampliación producida en la presente Política será inmediatamente publicada en el sitio web y en la aplicación, por lo cual estarás enterado de qué información recopilamos, cómo y bajo qué circunstancias utilizamos y tratamos tu información.
        </p>

        <br />
        <p class="p-body-modal">(*) No se admitirán devoluciones una vez usted haya registrado un pago, pues no se aplica ningún tipo de comisión ni cargos distintos al monto de su cuota.</p>
        <p class="p-body-modal">(**) De ser el caso que su tarjeta no cuente con el saldo suficiente para realizar el pago, el sistema anulara el pago y se le comunicara vía correo electrónico o por teléfono, que vuelva a realizar el pago de la cuota anulada, pues el detalle de la misma figurara en el sistema.</p>

    </b-modal>
</div>

<style scoped>


    
    /*botones modal*/

    .btn-custom-cancel {
        background-color: #ebebeb;
        /* border: 1px solid;*/
        color: black;
        /* box-shadow: none;*/
    }

        .btn-custom-cancel:hover {
            background-color: #d2d1d1;
        }

    .btn-custom-ok {
        background-color: #ED6A00;
     /*   border: none;*/
        color: white;
        /*box-shadow: none;*/
    }

        .btn-custom-ok:hover {
            color: white;
            background-color: #ba580a;
        }



    .custom-modal-header h5{
        color: #3f3f3f;
        font-family: 'Inter',sans-serif;
        font-size:25px;
        font-weight:300;
    }

    .p-body-modal {
        color: #3f3f3f; /* texto blanco */
        font-family: 'Inter',sans-serif;
        line-height: 25px;
    }

</style>

<script>

    var app = new Vue({
                el: '#app',
        data: {
                    //loader
                    stateloader: 'Comenzar',
                    disabledComenzar: true,
                    //variables pasos de registro
                    v_paso: '1',
                    msgAlerta: '',
                    msgAlertaTipo: '',
                    msgAlertaNro: '',
                    msgAlertaPol: '',
                    msgAlertaCorreo: '',
                    msgAlertaCodAut: '',
            msgAlertaClave: '',
            msgAlertaClave2: '',
            nombres: '',
            ape_paterno: '',
            ape_materno: '',
            fec_nacimiento: '',
                    estPoliticas: '',
                    codAut:'',
                    correo: '',
            clave: '',
            clave2:'',
                    //documento identidad
            selectedDOC: '0',
                     tipoDoc:'',
                    //{ text: 'Seleccione', value: '0' },
                      optionsDOC: [{ text: 'Seleccione', value: '0' },{ text: 'DNI', value: '2' }, { text: 'CE', value: '1' }],
                    //-----------------
                    indicador: false,
                    documento : '',
                    PAGINA: '@ViewBag.Title',
                    SITE: '',
                    ID: 0,
                    desFiltros: '',
                    canFilas: '0',

                    ACCION: '',
                    TITULO:'',

                    ListaSeleccionados:[],
                    ListaDocPago: [],

                    infoModal: {
                        id: 'info-modal',
                        title: '',
                        content: ''
                    }
                },
                mounted() {
                    estPoliticas: 'no_aceptado'
                },
                    methods: {

                    // Función para validar el correo
                    validarCorreo(correo) {
                      const regexCorreo = /^[a-zA-Z0-9._-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                      return regexCorreo.test(correo);
                    },

                    ocultarPantalla: function (form) {
                        this.$bvModal.hide(form.PANTALLA);
                    },
                    pantalla: function (form) {
                        this.$bvModal.show(form.PANTALLA);
                    },
                    salida: function () {
                        //this.listarDocPago();
                       // this.listarComunicados({ ID_GRUPO: this.ID_GRUPO, GRUPO: this.GRUPO });  // listarComunicados({ ID_GRUPO: item.ID, GRUPO: item.TITULO })
                    },
                    resetInfoModal() {
                        this.infoModal.title = '';
                        this.infoModal.content = '';
                    },
                    onFiltered(filteredItems) {
                        // Trigger pagination to update the number of buttons/pages due to filtering
                        this.totalRows = filteredItems.length;
                        this.currentPage = 1;
                    },

              mostrarPoliticas: function (item) {
                this.pantalla({ PANTALLA: 'mdPoliticas' });
            },


    valAfiliado: async function (item) {
        this.msgAlerta = '';
        try {
            const response = await axios.post('@SERVIDOR' + '/api/Usuarios/VerificarAfiliadoPagoPF', {
                USUARIO: this.documento,
                PASSWORD: '',
                TIPODOC: this.selectedDOC,
                TIPOVAL: 'registro_cuenta'
            });

            if (response.data.MSG == null) {
                this.msgAlerta = 'Ocurrio un error....';
            } else {
                if (response.data.MSG == 'OK') {
                    /*ACTIVAR PASO 2 */
                    this.v_paso = '2';
                    this.tipoDoc = this.selectedDOC == '2' ? 'DNI' : (this.selectedDOC == '1' ? 'CARNET EXTRANJERIA' : 'ERROR');
                    this.nombres = response.data.NOMBRES;
                    this.ape_paterno = response.data.APELLIDO_PATERNO;
                    this.ape_materno = response.data.APELLIDO_MATERNO;
                    this.fec_nacimiento = response.data.FECHA_NACIMIENTO;
                } else {
                    this.msgAlerta = response.data.MSG;
                }
            }

        } catch (e) {
            this.msgAlerta = 'Error en la conexión contacte con soporte...';
        } finally {

        }
},

paso1: async function (item) {


                this.msgAlerta = '';
                this.msgAlertaTipo = '';
                this.msgAlertaNro = '';
                this.msgAlertaPol = '';
                var canErrores = 0;
            /*   alert(JSON.stringify(this.selectedDOC + '-' + this.documento + '-' + this.estPoliticas ));*/
                const tipoDoc = {
                            0: 'Seleccione',
                            2: 'DNI',
                            1: 'CARNET DE EXTRANJERIA'
                }

                var estadoDoc = '';
                var detalleFiltros = '';

                if (this.selectedDOC == '0') {

                    this.msgAlertaTipo = 'Seleccione tipo de documento.';
                    canErrores++;
                    if (this.documento.length == 0) {
                        this.msgAlertaNro = 'Ingrese nro. de documento.';
                        /*  return;*/
                        canErrores++;
                    }
                }

                if (this.selectedDOC == '2') {

                    if (this.documento.length==0) {
                        this.msgAlertaNro = 'Ingrese número de DNI.';
                        canErrores++;
                      /*  return;*/
                    }else if (this.documento.length != 8) {
                        this.msgAlertaNro = 'DNI debe tener 8 digitos.';
                        canErrores++;
                       /* return;*/
                    }
                }

                if (this.selectedDOC == '1') {
                    if (this.documento.length == 0) {
                        this.msgAlertaNro = 'Ingrese carnet de extrangeria.';
                        canErrores++;
                      

                    } else if (this.documento.length != 9) {
                        this.msgAlertaNro = 'carnet de extrangeria debe tener 9 digitos.';
                        canErrores++;
                       
                    }
                }

    /*
                if (this.estPoliticas == '' || this.estPoliticas == 'no_aceptado') {
                    this.estPoliticas = 'no_aceptado';
                    canErrores++;
                }
                */
                if (canErrores>0) {
                    return;
                }


                 this.stateloader = 'Cargando';

                    try {


                    await new Promise(resolve => setTimeout(resolve, 60));

                        this.documento = this.documento.trim();
                      
                     const response = await axios.post('@SERVIDOR' + '/api/Usuarios/VerificarUsuarioPagoPF', {
                         USUARIO: this.documento,
                         PASSWORD: '',
                         TIPODOC: this.selectedDOC,
                         TIPOVAL: 'registro_cuenta'
                     });


                     console.log(JSON.stringify(response.data));

                     if (response.data.MSG == null) {
                         this.msgAlerta = 'Ocurrio un error....';
                     } else {
                         if (response.data.MSG == 'OK') {
                             /*validar si existe afiliado*/

                             var item = {
                                 USUARIO: this.documento,
                                 PASSWORD: '',
                                 TIPODOC: this.selectedDOC,
                                 TIPOVAL: 'registro_cuenta'
                             };


                            await this.valAfiliado(item);


                         } else {
                             this.msgAlerta = response.data.MSG;
                         }


                     }

                 } catch (e) {

                     this.msgAlerta = 'Error en la conexión contacte con soporte...';
                 } finally {
                     this.stateloader = 'Comenzar';
                 }
},

paso2: async function (item) {



    this.msgAlerta = '';
    this.msgAlertaCorreo = '';
    var canErrores = 0;

    var estadoDoc = '';
    var detalleFiltros = '';

    //si es incorrecto false
    if (!this.validarCorreo(this.correo)) {
        this.msgAlertaCorreo = 'Verifique formato de correo.';
        canErrores++;
    }

    // Si hay errores, salimos
    if (canErrores > 0) {
        return;
    }

    this.stateloader = 'Cargando';

    try {
        await new Promise(resolve => setTimeout(resolve, 60));

        this.correo = this.correo.trim().toLowerCase();

        // Llamada a la API para verificar el correo
        const response = await axios.post('@SERVIDOR' + '/api/Usuarios/VerificarCorreoPagoPF', {
            CORREO: this.correo,
            TIPOVAL: 'registro_cuenta'
        });

        console.log(JSON.stringify(response.data));

        // Comprobamos el mensaje de la respuesta
        if (response.data.MSG == null) {
            this.msgAlerta = 'Ocurrio un error....';
        } else {
            if (response.data.MSG == 'OK') {
                // Si la respuesta es OK, generamos el código de autorización
                var item = {
                    LLAVE_ORIGEN: this.documento,
                    TIPO_AUT: 'registro_cuenta',
                    TIPODOC: this.selectedDOC,
                    TIPO_ENV: 'correo',
                    DESTINATARIO: this.correo
                };

                // Llamamos a generarCodigo y esperamos que termine
                await this.generarCodigo(item);
            } else {
                // Si la respuesta es otro mensaje, lo mostramos
                this.msgAlerta = response.data.MSG;
            }
        }
    } catch (e) {
        // En caso de error en la conexión
        this.msgAlerta = 'Error en la conexión contacte con soporte...';
    } finally {
        // Esto se ejecuta independientemente de si hay error o no
        this.stateloader = 'Comenzar';
    }
},

generarCodigo: async function (item) {
            /*    await new Promise(resolve => setTimeout(resolve, 4000));*/
    this.msgAlerta = '';

    try {
        // Llamada a la API para generar el código
        const response = await axios.post('@SERVIDOR' + '/api/Usuarios/GenerarEnlacePagPF', {
            LLAVE_ORIGEN: item.LLAVE_ORIGEN,
            TIPO_AUT: item.TIPO_AUT,
            TIPODOC: item.TIPODOC,
            TIPO_ENV: item.TIPO_ENV,
            DESTINATARIO: item.DESTINATARIO
        });

        // Verificamos la respuesta
        if (response.data.MSG == null) {
            this.msgAlerta = 'Ocurrio un error....';
        } else {
            if (response.data.MSG == 'OK') {
                this.v_paso = '3';  // Código generado con éxito
            } else {
                if (response.data.MSG == 'Ya existe un codigo activo para este correo.') {
                    this.v_paso = '3';  // El código ya existe
                } else {
                    this.msgAlerta = response.data.MSG;  // Error en el mensaje
                }
            }
        }
    } catch (e) {
        // Capturamos errores de la conexión o cualquier otro error
        this.msgAlerta = 'Error en la conexión contacte con soporte...';
    } finally {
        // Aquí podrías resetear el loader o hacer otras tareas si es necesario
        // this.stateloader = 'Comenzar';
    }
},

paso3: async function (item) {


    this.msgAlerta = '';
    this.msgAlertaCodAut = '';
    var canErrores = 0;

    //si es incorrecto false
    if (this.codAut.length != 6) {
        this.msgAlertaCodAut = 'Codigo de verificación debe tener 6 digitos.';
        canErrores++;
    }

    // Si hay errores, salimos
    if (canErrores > 0) {
        return;
    }

    this.stateloader = 'Cargando';

    try {
        await new Promise(resolve => setTimeout(resolve, 60));


        // Llamada a la API para verificar el correo
        const response = await axios.post('@SERVIDOR' + '/api/Usuarios/VerificarCodigoPagoPF', {
            LLAVE_ORIGEN: this.documento,
            TIPO_AUT: 'registro_cuenta',
            DESTINATARIO: this.correo,
            CODIGO: this.codAut
        });

        // Comprobamos el mensaje de la respuesta
        if (response.data.MSG == null) {
            this.msgAlerta = 'Ocurrio un error....';
        } else {
            if (response.data.MSG == 'OK') {
                this.v_paso = '4';
            } else {
                // Si la respuesta es otro mensaje, lo mostramos
                this.msgAlerta = response.data.MSG;
            }
        }
    } catch (e) {
        // En caso de error en la conexión
        this.msgAlerta = 'Error en la conexión contacte con soporte...';
    } finally {
        // Esto se ejecuta independientemente de si hay error o no
        this.stateloader = 'Comenzar';
    }
},

paso4: async function (item) {
    this.msgAlerta = '';
    this.msgAlertaClave = '';
    this.msgAlertaClave2 = '';
    var canErrores = 0;


    if (this.clave.length < 6) {
        this.msgAlertaClave = 'Contraseña debe tener minimo 6 digitos.';
        canErrores++;
    }


    if (this.clave.length > 12) {
        this.msgAlertaClave = 'Contraseña debe tener maximo 12 digitos.';
        canErrores++;
    }


    if (this.clave != this.clave2) {
        this.msgAlertaClave2 = 'Debe ser igual a contraseña.';
        canErrores++;
    }


    // Si hay errores, salimos
    if (canErrores > 0) {
        return;
    }

    this.stateloader = 'Cargando';

    try {
        await new Promise(resolve => setTimeout(resolve, 500));
        this.v_paso = '5';
    } catch (e) {
        // En caso de error en la conexión
        this.msgAlerta = 'Error en la conexión contacte con soporte...';
    } finally {
        // Esto se ejecuta independientemente de si hay error o no
        this.stateloader = 'Comenzar';
    }


},

paso5: async function (item) {
    /*Confirmacion de datos*/ 

    this.msgAlerta = '';
    var canErrores = 0;

    // Si hay errores, salimos
    if (canErrores > 0) {
        return;
    }

    this.stateloader = 'Cargando';

    try {
        await new Promise(resolve => setTimeout(resolve, 10));

        // Llamada a la API para verificar el correo
        const response = await axios.post('@SERVIDOR' + '/api/Usuarios/InsertarUsuarioPagosPF', {
             USUARIO: this.documento ,
             TIPODOC:this.selectedDOC,
             NOMBRES:this.nombres,
             APELLIDO_PATERNO:this.ape_paterno,
             APELLIDO_MATERNO:this.ape_materno,
             FECHA_NACIMIENTO:this.fec_nacimiento,
             PASSWORD:this.clave,
            CORREO: this.correo
        });

        // Comprobamos el mensaje de la respuesta
        if (response.data.MSG == null) {
            this.msgAlerta = 'Ocurrio un error....';
        } else {
            if (response.data.MSG == 'OK') {
                this.v_paso = '6';
            } else {
                // Si la respuesta es otro mensaje, lo mostramos
                this.msgAlerta = response.data.MSG;
            }
        }
    } catch (e) {
        // En caso de error en la conexión
        this.msgAlerta = 'Error en la conexión contacte con soporte...';
    } finally {
        // Esto se ejecuta independientemente de si hay error o no
        this.stateloader = 'Comenzar';
    }
}


        }
    })
</script>










