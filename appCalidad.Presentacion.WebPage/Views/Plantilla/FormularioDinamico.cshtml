
@{
    ViewBag.Title = "Formulario dinamico";
    Layout = "~/Views/Shared/_ImageUpload.cshtml";
}
<div id="app"> 
    <div class="containerClaro">
        <br />
        <div class="row">
            <div class="col-xs-10 col-sm-10 col-lg-10">
                <div v-for="(q, name) of CAMPOS">
                    @*v-if="doShow( name )"*@

                    <template v-if="q.type == 'input'">
                        <div class="form-group row">
                            <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.question }}</b> <em v-if="q.comment">({{ q.comment }})</em> <span class="badge badge-danger" v-if="q.min"><b v-if="q.value.length < q.min"> ! </b></span></label>
                            <div class="col-sm-6">
                                <template v-if="q.subtype == 'text'">
                                    <b-form-input v-model="q.value" class="form-control" :maxlength="q.max" :type="q.subtype" placeholder="Ingresar letras ..."></b-form-input>
                                </template>
                                <template v-if="q.subtype == 'tel'">
                                    <b-form-input v-model="q.value" class="form-control" :maxlength="q.max" :type="q.subtype" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                </template>
                            </div>
                        </div>
                    </template>

                    <template v-if="q.type == 'select'">
                        <div class="form-group row">
                            <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.question }} <span class="badge badge-danger" v-if="q.value.length < q.max"> ! </span></b></label>
                            <div class="col-sm-6">
                                <b-form-select v-model="q.value" :options="q.options"></b-form-select>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
            <div class="col-xs-2 col-sm-2 col-lg-2">
                <div style=" position: fixed;  bottom: 40px;right: 40px; z-index:10">
                    <b-button-group vertical>
                        <span class="btn btn-link text-info" style="width:70px" title="Copiar al portapapeles" v-on:click="copiarPortaPreventiva">
                            <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Copiar</span>
                            <i class="fas fa-copy fa-3x"></i>
                        </span>
                    </b-button-group>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: sessionStorage.getItem('ID_USUARIO'),
            USUARIO: sessionStorage.getItem('USUARIO'),
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            ID_SEDE: sessionStorage.getItem('ID_SEDE'),
            ID_GRUPO: sessionStorage.getItem('IMAGE'),
            PLANTILLA: '',
            ID: 0,
            CAMPOS: {},
        },
        methods: {
            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },
            doShow: function (field) {
                for (var obj in this.CAMPOS[field].if) {
                    var ifObj = this.CAMPOS[field].if[obj];
                    if (ifObj.equals !== undefined && this.CAMPOS[ifObj.object].value != ifObj.equals)
                        return false;
                    if (ifObj.notequal !== undefined && this.CAMPOS[ifObj.object].value == ifObj.notequal)
                        return false;
                    if (ifObj.largerthan !== undefined && this.CAMPOS[ifObj.object].value <= ifObj.largerthan)
                        return false;
                    if (ifObj.smallerthan !== undefined && this.CAMPOS[ifObj.object].value >= ifObj.smallerthan)
                        return false;
                }
                return true;
            },
            submit: function () {
                console.log('Submit form, send back data via Axios')
            },
            generarPlantilla: function () {
                let CAMPOS = '';
                //for (var obj in this.CAMPOS) {
                //if (`${this.CAMPOS[obj].value}`.length < `${this.CAMPOS[obj].min}`) {
                //   CAMPOS = 'NECESITA COMPLETAR DE LLENAR';
                //    this.PLANTILLA = CAMPOS;
                //    return false;
                //}
                //}
                for (var obj in this.CAMPOS) {
                    CAMPOS = CAMPOS + `${this.CAMPOS[obj].question}` + ': ' + `${this.CAMPOS[obj].value}` + '  |  ';
                }
                axios.post(this.SERVER_URL + '/api/Formulario/MantenimientoFormulario', {
                    ID: this.ID,
                    TITULO: CAMPOS,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 51
                }).then(response => {
                }).catch(e => {
                });
                this.PLANTILLA = CAMPOS;
            },
            copiarPortaPreventiva: function () {
                this.PLANTILLA = '';
                var aux = document.createElement("input");
                this.generarPlantilla();
                aux.setAttribute("value", this.PLANTILLA);
                document.body.appendChild(aux);
                window.getSelection().removeAllRanges();
                aux.select();
                try {
                    document.execCommand('copy');
                    this.mostrarToast({ toast: 'info', msg: 'Plantilla copiada...' });
                }
                catch (ex) {
                    //this.mostrarToast({ toast: 'danger', msg: 'Plantilla no copiada...' });
                    // excepcion();
                }
            },

            iniciar: function () {
                axios.post(this.SERVER_URL + '/api/Formulario/ListarPlantilla', {
                    ID: this.ID,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 50
                }).then(response => {

                    if (response.data.length > 0) {
                        let CAMPOS = {};
                        let lista = response.data
                        //alert(JSON.stringify(lista));
                        for (i in lista) {
                            this.ID = lista[i].ID;
                            let separado = lista[i].PLANTILLA.split("|");
                            let columnas = { value: "" };
                            for (var f in separado) {
                                let col = separado[f].split("°");
                                if (col[0] == 'options') {
                                    let items = col[1].split(",");
                                    let item = [];
                                    for (var ite in items) {
                                        item.push({ text: items[ite], value: items[ite] });
                                    }
                                    columnas['options'] = item;
                                } else {
                                    columnas[col[0]] = col[1];
                                }
                            }
            
                            CAMPOS[lista[i].RESULTADO] = columnas;
                        }
                        this.CAMPOS = CAMPOS;
                    }
                }).catch(e => {
                });
            }
        }
    })
    app.iniciar();
</script>


@*
    //let CAMPOS = {};
                        //let items = {};
                        //items['SN'] = valores;
                        //items['NOMBRE'] = valores;
                        //CAMPOS.push(items);


    axios.post(this.SERVER_URL + '/api/Formulario/ListarPlantilla', {
                    ID: this.ID,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 50
                }).then(response => {
                    if (response.data.ID > 0) {






                        //this.CAMPOS = 'SN:{value: '',question: 'SN',comment: '',type: 'input',subtype: 'tel',max: 16,range: [18, 99]} '; // response.data.PLANTILLA;
                        //this.CAMPOS.push("SN": { "value": "", "question": "SN", "comment": "", "type": "input", "subtype": "tel", "max": "16" });
                        //for (var i = 0; i < lat.length; i++) {
                        //}
                    }
                }).catch(e => {
                    //this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });


    SN: {
        value: '',
        question: 'SN',
        placeholder: 'Ingresar ...',
        type: 'input',
        subtype: 'tel',
        max: 16,
    },
    NOMBRE_CLIENTE: {
        value: ',
        question: 'Nombre del cliente',
        placeholder: 'Ingresar ...',
        comment: 'ssssssssss',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    CUSTOMER_ID: {
        value: ',
        question: 'Customer ID',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'tel',
        max: 16,
        range: [18, 99],
    },
    PLAN_MIGRAR: {
        value: ',
        question: 'Nuevo Plan a Migrar?',
        type: 'select',
        max: 1,
        options: [
            { text: 'Velocidad de internet', value: 'Velocidad de internet' },
            { text: 'Minutos telefonía', value: 'Minutos telefonía' },
            { text: 'Tipo de cable', value: 'Tipo de cable' },
        ],
        if: [{ object: 'age', largerthan: 30, smallerthan: 35, equals: 31, notequal: 32 }],
    },
    NOMBRE_CAMPANIA: {
        value: ',
        question: 'Nombre de la campaña',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    SERVICIOS_ADICIONALES: {
        value: ',
        question: 'Indicar servicios adicionales',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    PUNTOS_TV_ADICIONALES: {
        value: ',
        question: 'Indicar puntos de TV adicionales',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    NUEVO_CARGO_FIJO: {
        value: ',
        question: 'Nuevo Cargo Fijo Total (Incluido adicionales)',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    TELEFONO_REFERENCIA: {
        value: ',
        question: 'Teléfonos Referencia (Fijo/movil vigentes)',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },
    HORARIO_DISPONIBILIDAD: {
        value: ',
        question: 'Horario de disponibilidad (Solo atención en campo):',
        placeholder: 'Ingresar ...',
        comment: ',
        type: 'input',
        subtype: 'text',
        max: 16,
        range: [18, 99],
    },*@
















@*CUSTOMER_ID: {
        value: null,
        question: 'How old are you?',
        placeholder: 'Your age...',
        comment: 'years since you were born',
        type: 'input',
        subtype: 'number',
        range: [18, 99],
        options: [
            { text: 'Yes', value: '0' },
            { text: 'No', value: '1' },
        ],
    },*@

@*<b>{{ q.question }} <span class="badge badge-danger" v-if="q.value.length < q.max"> ! </span></b>
    <em v-if="q.comment"><br />{{ q.comment }}</em>
    <template v-if="q.subtype == 'text'">
        <b-form-input v-model="q.value" :maxlength="q.max" :type="q.subtype" :placeholder="q.placeholder"></b-form-input>
    </template>
    <template v-if="q.subtype == 'tel'">
        <b-form-input v-model="q.value" :maxlength="q.max" :type="q.subtype" maxle :placeholder="q.placeholder" oninput="this.value = this.value.replace(/[^0-9.]/g, '); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
    </template>*@


@*<template v-if="q.type == 'radio'">
        <b>{{ q.question }}</b>
        <em v-if="q.comment"><br />{{ q.comment }}</em>
        <b-form-group>
            <b-form-radio-group buttons
                                button-variant="outline-info"
                                name="radio-btn-outline"
                                v-model="q.value"
                                :options="q.options" />
        </b-form-group>
    </template>*@
