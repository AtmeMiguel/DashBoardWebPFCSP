@{
    ViewBag.Title = "Pagar";
    Layout = "~/Views/Shared/_MasterInternoPagosPF.cshtml";
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
    string SERVIDOR = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];
}



<div id="app">
    <div class="container-fluid">

        <div class="row justify-content-center">


            <div v-if="v_paso=='1'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">
                <div style="height:350px;">
                    <br />
                    <br />
                    <br />
                    <p style="font-size:28px;font-weight:600;">Cuotas pendientes por pagar</p>
                    <br />
                    <p style="color:#818181;font-size:14px;">Seleccione contrato y cantidad de cuotas a pagar.</p>
                    <br />
                    <br />

                    <p style="font-size: 19px;" class="msgAlertaInt">{{msgAlerta}}</p>
                    <br />
                    <br />
                </div>
            </div>



            <div v-if="v_paso=='2'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">




                <br />
                <br />
                <br />
                <p style="font-size:28px;font-weight:600;">Cuotas pendientes por pagar</p>
                @*<br />
            <p style="color:#818181;font-size:14px;">Seleccione contrato y cantidad de cuotas a pagar.</p>*@
                <br />
                <br />

                <div class="container">
                    <div class="form">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="cboContrato">Seleccione contrato</label>
                                <b-form-select id="cboContrato" name="cboContrato"
                                               v-model="selectedContrato"
                                               :options="optContratos" class="form-control" style="font-size: 1.2rem; border-color: #5A1160; width: 100%; border-radius: 15px; "></b-form-select>
                                <span class="msgAlertaInt" v-if="msgAlertaCon != ''">{{msgAlertaCon}}</span>
                            </div>
                            <div class="form-group col-md-3">
                                <label for="cboCuotas">N° de cuotas</label>
                                <b-form-select id="cboCuotas" name="cboCuotas"
                                               v-model="selectedCuota"
                                               :options="optCuotas" class="form-control" style="font-size: 1.2rem; border-color: #5A1160; width: 100%; border-radius: 15px; "></b-form-select>
                                <span class="msgAlertaInt" v-if="msgAlertaCuo != ''">{{msgAlertaCuo}}</span>
                            </div>


                            <div class="form-group col-md-3">
                                <div style="padding-top:2rem;">
                                    <button class="btn btn-primary" style="padding:.7rem 2.5rem;" type="button" v-on:click="seleccionarCuotas()" v-if="stateloader=='Comenzar'">Seleccionar</button>
                                </div>
                            </div>
                        </div>

                    </div>

                    <br />
                    <br />

                </div>

                <div class="container">
                    <b-table hover :items="ListaDocPago"
                             :current-page="currentPage"
                             :fields="Columnas"
                             :per-page="perPage"
                             stacked="md"
                             head-variant="light"
                             responsive
                             show-empty
                             @*sticky-header="200px"*@
                             small
                             @@filtered="onFiltered">
                        <template #empty="scope">
                            <h6 class="text-center">No hay filas para mostrar.</h6>
                        </template>
                        @*<template #cell(Seleccionar)="row">
            </template>*@
                        <template #cell(name)="row">
                            {{ row.value.first }} {{ row.value.last }}
                        </template>

                        <template #cell(SELECCIONAR)="row">
                            <b-avatar v-if="row.item.MARCADO=='Seleccionado' && row.item.FLG_EST_DOC == 'PENDIENTE'" v-on:click="marcar(row.item, row.index, false,'individual')" title="Ver Detalle" button icon="check-square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                            <!--  <b-avatar v-on:click="pantallaExterna( row.item)" title="imagen" button icon="file-image" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>-->

                            <b-avatar v-if="row.item.MARCADO=='No Seleccionado' && row.item.FLG_EST_DOC == 'PENDIENTE'" v-on:click="marcar(row.item, row.index, true,'individual')" title="Ver Detalle" button icon="square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                            <!--  <b-avatar v-on:click="pantallaExterna( row.item)" title="imagen" button icon="file-image" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>-->

                        </template>

                    </b-table>
                </div>


            </div>


            <br />
            <br />
            <br />
            <br />
        </div>
    </div>

    <b-modal id="mdConfirmacion" centered size="md" title="Confirmación"
             ok-title="Aceptar"
             cancel-title="Cancelar"
             ok-variant="custom-ok"
             cancel-variant="custom-cancel"
             header-class="custom-modal-header"
             data-html="true" @@ok="handleAceptar" ok-first>

        <br />
        <p class="p-body-modal" style="line-height:25px;text-align:center;">Se actualizara los datos de tu cuenta.</p>
        <p class="p-body-modal" style="line-height:25px;text-align:center;">¿Desea continuar?</p>
    </b-modal>

</div>


@section scripts {

    <script>

    var app = new Vue({
                el: '#app',
        data: {

                    v_paso: '1',
                    msgAlerta: '',
                    msgAlertaTel: '',
                    msgAlertaCel: '',
                    msgAlertaClave: '',
            msgAlertaClaveRe: '',

            msgAlertaCon: '',
            msgAlertaCuo:'',
                    //model
            correo: '',
            telefono: '',
            celular: '',
            clave: '',
            claveRe: '',
            lstCuotas: [],
            Columnas: [
                { key: 'Tipo de plan', label: 'Tipo de plan' }, { key: 'Cuota', label: 'Cuota' },
                { key: 'Contrato', label: 'Contrato' }, { key: 'Vencimiento', label: 'Vencimiento' },
                { key: 'Monto', label: 'Monto' }, { key: 'Estado', label: 'Estado' }, { key: 'Emisión', label: 'Emisión' },
                { key: 'Emicuota', label: 'Emicuota' }, { key: 'N.Renovación', label: 'N.Renovación' }, { key: 'SELECCIONAR', label: 'Selec.' }
            ],
            totalRows: 100,
            currentPage: 1,
            perPage: 100,
            pageOptions: [100, 200, 400, { value: 1000, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            //selectedContrato: '101',
            //optContratos: [{ text: 'PLUS-102458', value: '101' }, { text: 'GOLD-102587', value: '102' }, { text: 'ONCO-789456', value: '103' }],
            selectedContrato: '',
            optContratos: [],
            selectedCuota:'1',
            optCuotas: [{ text: '1', value: '1' }, { text: '2', value: '2' }, { text: '3', value: '3' }, { text: '4', value: '4' }, { text: '5', value: '5' }],
                    //loader
                    stateloader: 'Comenzar',
                    disabledComenzar: true,
                    ID_USUARIO: '@User.Identity.Name',

                    NOMBRES: '@Html.Raw(Session["Nombres"].ToString())' ,
                    APELLIDOS : '@Html.Raw(Session["Apellidos"].ToString())',
                    USUARIO: '@Session["Usuario"].ToString()',
                    SERVER_URL: '@apiServidor',


        },
        methods: {
            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            cargarContratos: async function (item) {
                        this.msgAlerta = '';
                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarContratosPagoPF', {
                                DOCUMENTO : '@Session["Usuario"].ToString()'
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.optContratos = response.data.map(p => ({
                                    value: p.CONTRATO,
                                    text: p.NOMBREPLAN
                                }));

                                if (this.optContratos.length >= 1) {
                                    this.selectedContrato = this.optContratos[0].value;  // El primer país en la lista
                                }

                         
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            cargarCuotas: async function (item) {
                        this.msgAlerta = '';
                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarCuotasPagoPF', {
                        DOCUMENTO: '@Session["Usuario"].ToString()',
                        CONTRATO : this.selectedContrato
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.lstCuotas = response.data;
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            paso1: async function (item) {


                this.msgAlerta = '';
                await this.cargarContratos();
                await this.cargarCuotas();
                this.v_paso = '2';
                return;
                try {

                            const response = await axios.post('@SERVIDOR' + '/api/Usuarios/ActualizaUsuPagoPF', {
                                USUARIO: '@Session["Usuario"].ToString()',
                                PASSWORD: '',
                                TIPODOC: '',
                                TIPOVAL: 'consulta',
                                TEL_AFI: '',
                                CEL_AFI: '',
                                CORREO :  ''
                            });


                            if (response.data.MSG == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                if (response.data.MSG == 'OK') {
                                    /*ACTIVAR PASO 2 */
                                    this.correo = response.data.CORREO;
                                    this.telefono = response.data.TEL_AFI;
                                    this.celular = response.data.CEL_AFI;
                                    this.v_paso = '2';
                                } else {
                                    this.msgAlerta = response.data.MSG;
                                }
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },
            paso2: async function (item) {
                this.telefono = this.telefono.trim();
                this.celular = this.celular.trim();
                this.clave = this.clave.trim();
                this.claveRe = this.claveRe.trim();

                this.msgAlerta = '';
                this.msgAlertaTel = '';
                this.msgAlertaCel = '';
                this.msgAlertaClave = '';
                this.msgAlertaClaveRe = '';
                var canErrores = 0;
                var tipoVal = '';


                if (this.telefono != '' ) {

                    if (this.telefono.length < 7) {
                        this.msgAlertaTel = 'Telefono debe tener minimo 7 digitos.';
                        canErrores++;
                    } else if (this.telefono.length > 15) {
                        this.msgAlertaTel = 'Telefono debe tener maximo 15 digitos.';
                        canErrores++;
                    }
                }

                if (this.celular != '') {

                    if (this.celular.length < 9) {
                        this.msgAlertaCel = 'Celular debe tener minimo 9 digitos.';
                        canErrores++;
                    } else if (this.celular.length > 15) {
                        this.msgAlertaCel = 'Celular debe tener maximo 15 digitos.';
                        canErrores++;
                    }
                }
                //-------------------------

                if (this.clave != '') {

                    if (this.clave.length < 6) {
                        this.msgAlertaClave = 'Contraseña debe tener minimo 6 digitos.';
                        canErrores++;
                    } else if (this.clave.length > 12) {
                        this.msgAlertaClave = 'Contraseña debe tener maximo 12 digitos.';
                        canErrores++;
                    } else {
                        if (this.clave != this.claveRe) {
                            this.msgAlertaClaveRe = 'Debe ser igual a contraseña.';
                            canErrores++;
                        }
                    }

                }

               if (this.claveRe != '') {
                    if (this.clave != this.claveRe) {
                            this.msgAlertaClaveRe = 'Debe ser igual a contraseña.';
                            canErrores++;
                    }
               }

                // Si hay errores, salimos
                if (canErrores > 0) {
                    return;
                } else {
                    this.pantalla({ PANTALLA: 'mdConfirmacion' });
                }

            },

            handleAceptar: async function (item) {

                if (this.clave !='' && this.claveRe!='') {
                    this.tipoVal = 'actualiza_data_clave';
                } else {
                    this.tipoVal = 'actualiza_data';
                }


                try {
                      this.stateloader = 'Cargando';

                       await new Promise(resolve => setTimeout(resolve, 60));

                       const response = await axios.post('@SERVIDOR' + '/api/Usuarios/ActualizaUsuPagoPF', {
                                USUARIO: '@Session["Usuario"].ToString()',
                                PASSWORD: this.clave,
                                TIPODOC: '',
                                TIPOVAL: this.tipoVal,
                                TEL_AFI: this.telefono,
                                CEL_AFI: this.celular,
                                CORREO :  this.correo
                            });


                        // Comprobamos el mensaje de la respuesta
                        if (response.data.MSG == null) {
                            this.msgAlerta = 'Ocurrio un error....';
                        } else {
                            if (response.data.MSG == 'OK') {
                                this.v_paso = '3';
                            } else {
                                // Si la respuesta es otro mensaje, lo mostramos
                                this.msgAlerta = response.data.MSG;
                            }
                        }

                } catch (e) {
                        // En caso de error en la conexión
                        this.msgAlerta = 'Error en la conexión...';
                } finally {
                        // Esto se ejecuta independientemente de si hay error o no
                        this.stateloader = 'Comenzar';
                }


            }


        }

})

app.paso1();
    </script>

}