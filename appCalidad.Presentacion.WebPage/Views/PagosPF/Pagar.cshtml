@{
    ViewBag.Title = "Pagar";
    Layout = "~/Views/Shared/_MasterInternoPagosPF.cshtml";
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
    string SERVIDOR = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];
    string payEnvironment = System.Configuration.ConfigurationManager.AppSettings["PAY_ENVIRONMENT"];

}
<link rel="stylesheet" href="~/Content/Galerias/StyleSynap.css" />


<div id="app">
    <div class="container-fluid">

        <div class="row justify-content-center">


            <div v-if="v_paso=='1'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">
                <div style="height:350px;">
                    <br />
                    <br />
                    <br />
                    <p style="font-size:28px;font-weight:600;">Cuotas pendientes por pagar</p>
                    <br />

                    <template v-if="msgAlerta == ''">
                        <p style="color:#818181;font-size:14px;">Obteniendo información...</p>
                        <br />
                        <br />
                    </template>
                    <template v-else>
                        <p style="font-size: 19px;" class="msgAlertaInt">{{msgAlerta}}</p>
                        <br />
                        <br />
                    </template>
                </div>
            </div>



            <div v-if="v_paso=='2'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">




                <br />
                <br />
                <br />
                <p style="font-size:28px;font-weight:600;">Cuotas pendientes por pagar</p>
                @*<br />
                    <p style="color:#818181;font-size:14px;">Seleccione contrato y cantidad de cuotas a pagar.</p>*@
                <br />
                <br />

                <div class="container">
                    <div class="form">
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="cboContrato">Seleccione contrato</label>
                                <b-form-select id="cboContrato" name="cboContrato" @@change="cargarCuotas"
                                               v-model="selectedContrato"
                                               :options="optContratos" class="form-control" style="font-size: 1.2rem; border-color: #5A1160; width: 100%; border-radius: 15px; "></b-form-select>
                                <span class="msgAlertaInt" v-if="msgAlertaCon != ''">{{msgAlertaCon}}</span>
                            </div>
                            <div class="form-group col-md-3">
                                <label for="cboCuotas">N° de cuotas</label>
                                <b-form-select id="cboCuotas" name="cboCuotas"
                                               v-model="selectedCuota"
                                               :options="optCuotas" class="form-control" style="font-size: 1.2rem; border-color: #5A1160; width: 100%; border-radius: 15px; "></b-form-select>
                                <span class="msgAlertaInt" v-if="msgAlertaCuo != ''">{{msgAlertaCuo}}</span>
                            </div>


                            <div class="form-group col-md-3">
                                <div style="padding-top:2rem;">
                                    <button class="btn btn-primary" style="padding:.7rem 2.5rem;" type="button" v-on:click="Seleccionar()" v-if="stateloader=='Comenzar'">Seleccionar</button>

                                </div>
                            </div>
                        </div>

                    </div>

                    <br />


                </div>

                <div class="container">

                    <p style="color: #dc3545">{{msgSelCuotas}}</p>
                    <br />
                    <b-table hover :items="lstCuotas"
                             :current-page="currentPage"
                             :fields="Columnas"
                             :per-page="perPage"
                             stacked="md"
                             head-variant="light"
                             responsive
                             show-empty
                             @*sticky-header="200px"*@
                             small
                             @*@@filtered="onFiltered"*@>
                        <template #empty="scope">
                            <h6 class="text-center">No hay filas para mostrar.</h6>
                        </template>
                        @*<template #cell(Seleccionar)="row">
                            </template>*@
                        <template #cell(name)="row">
                            {{ row.value.first }} {{ row.value.last }}
                        </template>

                        <template #cell(SELECCIONAR)="row">
                            <b-avatar disabled v-if="row.item.MARCADO=='Seleccionado'" button icon="check-square" size="2rem" variant="light" class="align-center btn-outline-secondary"></b-avatar>

                            <b-avatar disabled v-if="row.item.MARCADO=='No Seleccionado'" button icon="square" size="2rem" variant="light" class="align-center btn-outline-secondary"></b-avatar>
                        </template>

                    </b-table>

                    <br />
                    <hr />
                    <p style="font-weight:bold;font-size:13px;">Total a pagar: S/&nbsp;{{monto}}</p>

                    <template v-if="indPagar">
                        <div style="padding-top:2rem;">
                            <button class="btn btn-primary" style="padding:.7rem 2.5rem;" type="button" v-on:click="PagarPF()" v-if="stateloader=='Comenzar'">Ir a pagar</button>
                            <button class="btn btn-primary" style="padding:.7rem 2.5rem;" type="button" disabled v-if="stateloader=='Cargando'">Validando...</button>
                        </div>
                    </template>
                    <br />
                </div>


            </div>


            <br />
            <br />
            <br />
            <br />
        </div>
    </div>

    <b-modal id="mdConfirmacion" centered size="md" title="Confirmación"
             ok-title="Aceptar"
             cancel-title="Cancelar"
             ok-variant="custom-ok"
             cancel-variant="custom-cancel"
             header-class="custom-modal-header"
             data-html="true" @@ok="handleAceptar" ok-first>

        <br />
        <p class="p-body-modal" style="line-height:25px;text-align:center;">Se actualizara los datos de tu cuenta.</p>
        <p class="p-body-modal" style="line-height:25px;text-align:center;">¿Desea continuar?</p>
    </b-modal>

    @* SYNP *@
    <input type="button" id="btnPayment" class="btnPayment" style="display: none;" data-toggle="modal" data-target="#popupPagar" />

    <div class="modal fade" id="popupPagar" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">

            <div class="modal-content" style="max-height: 680px; max-width: 465px; margin-left: 0px; padding:10px; background-color: white; border-radius: 1.0rem;">
                <div class="modal-header" style="background-color: white; border-radius: 1rem;">
                    <img id="logopago" src="~/Recursos/PagosPF/Logotipo.svg" style="height: 35px" />
                    <div style="color:white;font-size:15px;font-weight:bold;">{{MNTPAG}}</div>
                  
                </div>
                <div class="modal-body" style="padding-top:10px;">
                    <div id="cart-container" class="synap-container ">
                        <!-- Contenedor donde se apertura el widget de pago -->
                    </div>
                </div>
                <div class="modal-msg">

                </div>
                <div class="modal-footer">
                    <a style='cursor: pointer;' v-on:click="fn_cerrarPayment()">Cerrar</a>
                </div>
            </div>
        </div>
    </div>

</div>


@section scripts {

    <script src="https://button.pay.synapsolutions.com/web/latest/sdk.js"></script>

    <script>

    var app = new Vue({
                el: '#app',
        data: {

            v_paso: '1',
            indPagar:false,
                    msgAlerta: '',
            msgAlertaCon: '',
            msgAlertaCuo: '',
            msgSelCuotas:'',
                    //model
            monto:'0.00',
            lstCuotas: [],
            Columnas: [
                { key: 'TIPOPLAN', label: 'Tipo de plan' }, { key: 'N_CUOTA', label: 'Cuota' },
                { key: 'CONTRATO', label: 'Contrato' }, { key: 'VENCIMIENTO', label: 'Vencimiento' },
                { key: 'MONTO', label: 'Monto' }, { key: 'ESTADO', label: 'Estado' }, { key: 'EMISION', label: 'Emisión' },
                { key: 'N_CUOTA', label: 'Emicuota' }, { key: 'SEC_CONTRATO', label: 'N.Renovación' },
               { key: 'SELECCIONAR', label: 'Selec.' }
            ],
            totalRows: 100,
            currentPage: 1,
            perPage: 100,
            pageOptions: [100, 200, 400, { value: 1000, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            //selectedContrato: '101',
            //optContratos: [{ text: 'PLUS-102458', value: '101' }, { text: 'GOLD-102587', value: '102' }, { text: 'ONCO-789456', value: '103' }],
            selectedContrato: '',
            optContratos: [],
            selectedCuota:'1',
            optCuotas: [{ text: '1', value: '1' }, { text: '2', value: '2' }, { text: '3', value: '3' }, { text: '4', value: '4' }, { text: '5', value: '5' }],
                    //loader
                    stateloader: 'Comenzar',
                    disabledComenzar: true,
                    ID_USUARIO: '@User.Identity.Name',

                    NOMBRES: '@Html.Raw(Session["Nombres"].ToString())' ,
                    APELLIDOS : '@Html.Raw(Session["Apellidos"].ToString())',
                    USUARIO: '@Session["Usuario"].ToString()',
                    SERVER_URL: '@apiServidor',
                //synap
            MNTPAG: '',
            PagoCuotaPF: {
                BE_Deducible:
                    function (form) {
                        var oDeducible = {};
                        oDeducible.COD_PETITORIO = form.getCod;
                        oDeducible.COD_EMPRESA = "1001";
                        //oDeducible.COD_COMPANIA = "X";

                        oDeducible.NOMBRES = form.tnombre;
                        oDeducible.APELLIDO_PATERNO = form.tapepat;
                        oDeducible.APELLIDO_MATERNO = form.tapemat;
                        //oDeducible.COD_MEDICO = "X";
                        //oDeducible.COD_ESPECIALIDAD = "X";
                        oDeducible.COD_USUARIO = form.contract;
                        //oDeducible.FECHA_CITA = "X";
                        oDeducible.COD_SUCURSAL = "1001";
                        //oDeducible.FLG_TELECONSULTA = "X";
                        return JSON.stringify(oDeducible)
                    },
                BE_AUTHENTICATION:
                    function (COD_CURRENCY, PURCHASEAMOUNT) {
                        var oAuthentication = {};
                        oAuthentication.COD_PETITORIO = getCod;
                        oAuthentication.COD_CURRENCY = COD_CURRENCY;
                        oAuthentication.PURCHASEAMOUNT = PURCHASEAMOUNT;
                        oAuthentication.COD_EMPRESA = "1001";
                        return JSON.stringify(oAuthentication)
                    }

            }
        },
        methods: {
            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },

            limpiarN1: function (item) {

                this.msgAlerta = '';
                this.msgSelCuotas = '';
                this.indPagar = false;
                this.monto = '0.00';

            },
            Seleccionar: function (item) {
                this.limpiarN1();

                var monto = 0.00;
                //desmarcar y limpiar total
                this.lstCuotas.forEach(item => {
                    item['MARCADO'] = 'No Seleccionado';
                });
                this.monto = monto;
                //
                var indCuota = 1;
                var limite = this.selectedCuota;
                this.lstCuotas.forEach(item => {
                    if (indCuota <= limite) {
                        item['MARCADO'] = 'Seleccionado';
                        monto = monto + parseFloat(item['MONTO']);
                    }
                    indCuota = indCuota + 1;
                });

                const canCuotaSel = this.lstCuotas.filter(item => item.MARCADO == 'Seleccionado' ).length;;

                if (canCuotaSel==0) {
                    this.msgSelCuotas = 'No hay cuotas a pagar';
                    this.indPagar = false;
                }

                else if (canCuotaSel == 1) {
                    this.msgSelCuotas = 'Usted selecciono 1 cuota a pagar';
                    this.indPagar = true;
                } else {
                    this.msgSelCuotas = 'Usted selecciono ' + canCuotaSel + ' cuotas a pagar';
                    this.indPagar = true;
                }

                this.monto = monto.toFixed(2);
            },



            cargarContratos: async function (item) {

                this.limpiarN1();

                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarContratosPagoPF', {
                                DOCUMENTO : '@Session["Usuario"].ToString()'
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.optContratos = response.data.map(p => ({
                                    value: p.CONTRATO,
                                    text: p.NOMBREPLAN
                                }));

                                if (this.optContratos.length >= 1) {
                                    this.selectedContrato = this.optContratos[0].value;  // El primer país en la lista
                                }


                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            cargarCuotas: async function (item) {
                this.limpiarN1();

                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarCuotasPagoPF', {
                        DOCUMENTO: '@Session["Usuario"].ToString()',
                        CONTRATO : this.selectedContrato
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.lstCuotas = response.data;
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            paso1: async function (item) {

                this.limpiarN1();

                await this.cargarContratos();
                await this.cargarCuotas();
                this.v_paso = '2';
                return;
                try {

                            const response = await axios.post('@SERVIDOR' + '/api/Usuarios/ActualizaUsuPagoPF', {
                                USUARIO: '@Session["Usuario"].ToString()',
                                PASSWORD: '',
                                TIPODOC: '',
                                TIPOVAL: 'consulta',
                                TEL_AFI: '',
                                CEL_AFI: '',
                                CORREO :  ''
                            });


                            if (response.data.MSG == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                if (response.data.MSG == 'OK') {
                                    /*ACTIVAR PASO 2 */
                                    this.correo = response.data.CORREO;
                                    this.telefono = response.data.TEL_AFI;
                                    this.celular = response.data.CEL_AFI;
                                    this.v_paso = '2';
                                } else {
                                    this.msgAlerta = response.data.MSG;
                                }
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            paso2: async function (item) {
                this.telefono = this.telefono.trim();

                this.msgAlerta = '';
                this.msgAlertaTel = '';

                var canErrores = 0;
                var tipoVal = '';

                if (this.telefono != '' ) {

                    if (this.telefono.length < 7) {
                        this.msgAlertaTel = 'Telefono debe tener minimo 7 digitos.';
                        canErrores++;
                    } else if (this.telefono.length > 15) {
                        this.msgAlertaTel = 'Telefono debe tener maximo 15 digitos.';
                        canErrores++;
                    }
                }


                // Si hay errores, salimos
                if (canErrores > 0) {
                    return;
                } else {
                    this.pantalla({ PANTALLA: 'mdConfirmacion' });
                }

            },

            handleAceptar: async function (item) {

                if (this.clave !='' && this.claveRe!='') {
                    this.tipoVal = 'actualiza_data_clave';
                } else {
                    this.tipoVal = 'actualiza_data';
                }


                try {
                      this.stateloader = 'Cargando';

                       await new Promise(resolve => setTimeout(resolve, 60));

                       const response = await axios.post('@SERVIDOR' + '/api/Usuarios/ActualizaUsuPagoPF', {
                                USUARIO: '@Session["Usuario"].ToString()',
                                PASSWORD: this.clave,
                                TIPODOC: '',
                                TIPOVAL: this.tipoVal,
                                TEL_AFI: this.telefono,
                                CEL_AFI: this.celular,
                                CORREO :  this.correo
                            });


                        // Comprobamos el mensaje de la respuesta
                        if (response.data.MSG == null) {
                            this.msgAlerta = 'Ocurrio un error....';
                        } else {
                            if (response.data.MSG == 'OK') {
                                this.v_paso = '3';
                            } else {
                                // Si la respuesta es otro mensaje, lo mostramos
                                this.msgAlerta = response.data.MSG;
                            }
                        }

                } catch (e) {
                        // En caso de error en la conexión
                        this.msgAlerta = 'Error en la conexión...';
                } finally {
                        // Esto se ejecuta independientemente de si hay error o no
                        this.stateloader = 'Comenzar';
                }


            },

            /* SYNAP */

                fn_cerrarPayment: function () {
                $('#popupPagar').modal('hide');
            },

            /*INTEGRACION SYNAPSIS*/
            buildTransaction: function (form) {
                $("#logopago").attr("src", "../Recursos/logo_sanpablo_salud_pg.png");
                //obteniedno codigo de pedido para sysnapsis

                var transaction = {
                    "order": {
                        "number": form.number,
                        "country": {
                            "code": "PER"
                        },
                        "currency": {
                            "code": "PEN"
                        },
                        "amount": form.money,
                        "customer": {
                            "name": form.nombre,
                            "lastName": form.apepat + " " + form.apemat,
                            "address": {
                                "country": "PER",
                                "levels": [
                                    "150000",
                                    "150100",
                                    "150101"
                                ],
                                "line1": "",
                                "zip": ""
                            },
                            "email": form.email,
                            "phone": form.phone,
                            "document": {
                                "type": "DNI",
                                "number": form.docafi
                            }
                        },
                        "products": [{
                            "code": form.number,
                            "name": "AfiliacionPF",
                            "quantity": form.canprod, // "1",
                            "unitAmount": form.money,
                            "amount": form.money
                        }],
                        "metadata": [
                            {
                                name: "CODIGO",
                                value: form.number
                            },
                            {
                                name: "EMPRESA",
                                value: "1001|San Pablo Salud"
                            },
                            {
                                name: "COD_EMPRESA",
                                value: "1001"
                            },
                            {
                                name: "COD_SUCURSAL",
                                value: "1001"
                            },
                            {
                                name: "COD_PACIENTE",
                                value: form.docafi
                            },
                            {
                                name: "EMAIL",
                                value: form.email
                            },
                            {
                                name: "SECUENCIA",
                                value: form.number
                            },
                            {
                                name: "ID_PACIENTE",
                                value: form.idcliente
                            }
                        ]
                    },
                    "settings": {
                        "brands": ['VISA', 'MSCD', 'AMEX', 'DINC'],
                        "language": "es_PE",
                        "businessService": "WEB"

                    }
                };
                return transaction;
            },

            PagarPF: async function (form) {
                this.msgAlerta = "";
                var mntResPag = "";
                this.MNTPAG = mntResPag;
                $('#cart-container').html("");
                $('.btnPayment').click();
                //ATME Registrar monto de pago por plan en tabla cotizacion con codigo de operacion formato PFA0000001
                const listaCuotasSeleccionadas = this.lstCuotas
                    .filter(item => item.MARCADO == 'Seleccionado') // Filtramos los elementos cuya edad sea mayor a 18
                    .sort((a, b) => a.N_CUOTA - b.N_CUOTA);
                console.log(JSON.stringify(listaCuotasSeleccionadas));
               
                var ListaPlanesSeleccionadosSynap = this.ListaPlanesSeleccionados;
                var ListaPlanesFamiliarSynap = this.ListaPlanesFamiliar;
                var P_IDTITULAR = this.selectedContrato;
                var P_IDPLAN = 0;
                var P_IND_MOD = '';
                var P_ERRORES = 0;

                if (P_IDTITULAR == 0) {
                    this.msgAlerta = "CON01: Error contrato no puede ser nulo."
                    return;
                }
                var objtra = {};
                objtra.money = 0;
                objtra.canprod = 0;
                var P_SECUENCIA = '0';
                var registrosOk = 0;
                var canListaPlanes = listaCuotasSeleccionadas.length;
                for (var item2 in listaCuotasSeleccionadas) {
                    /*
            param.Add("psec_emisionpf", value: autObj.EMISION, direction: ParameterDirection.Input);
            param.Add("pnum_emicuotapf", value: autObj.N_CUOTA, direction: ParameterDirection.Input);
            param.Add("psec_contratopf", value: autObj.CONTRATO, direction: ParameterDirection.Input);
            param.Add("pnum_contrato", value: autObj.SEC_CONTRATO, direction: ParameterDirection.Input);
            param.Add("pdocu_afi", value: autObj.DOCUMENTO.ToLower(), direction: ParameterDirection.Input);
            param.Add("pmonto", value: autObj.MONTO, direction: ParameterDirection.Input);
            param.Add("pestado_transac", value: autObj.ESTADO, direction: ParameterDirection.Input);
            param.Add("pcodigo_operacion", value: autObj.SECUENCIA, direction: ParameterDirection.Input);


                     */
                    await axios.post('@apiServidor' + '/api/PagosPF/RegTransCuota', {

                        EMISION: listaCuotasSeleccionadas[item2].EMISION,
                        N_CUOTA: listaCuotasSeleccionadas[item2].N_CUOTA,
                        CONTRATO: listaCuotasSeleccionadas[item2].CONTRATO,
                        SEC_CONTRATO: listaCuotasSeleccionadas[item2].SEC_CONTRATO,
                        DOCUMENTO: '@Session["Usuario"].ToString()',
                        MONTO: listaCuotasSeleccionadas[item2].MONTO,
                        ESTADO: '',
                        SECUENCIA: P_SECUENCIA,
                    }).then(response => {
                        if (response.data.length > 0) {
                            if (response.data[0].MSG == 'OK') {
                                //comentado  alert(JSON.stringify(response.data));
                                registrosOk = registrosOk + 1;
                                //  objtra.money = objtra.money + parseFloat(response.data[0].MONTO_TOTAL);
                                objtra.canprod = objtra.canprod + 1;
                                /* DESCOMENTAR
                                objtra.number = response.data[0].CODIGO_PEDIDO;
                                objtra.nombre = response.data[0].nombre;
                                objtra.apepat = response.data[0].apepat;
                                objtra.apemat = response.data[0].apemat;
                                objtra.email = response.data[0].email;
                                objtra.phone = response.data[0].phone;
                                objtra.docafi = response.data[0].docafi;
                                objtra.idcliente = response.data[0].idcliente;
                                */
                                P_SECUENCIA = response.data[0].SECUENCIA;
                            } else {
                                P_ERRORES = P_ERRORES + 1;
                                this.msgAlerta = 'COT00: Error en registro cotización.';
                              
                            }
                        } else {
                            P_ERRORES = P_ERRORES + 1;
                            this.msgAlerta ='COT01: Error en la conexión de cotización...' ;
                            // break;
                        }
                    }).catch(e => {
                        P_ERRORES = P_ERRORES + 1;
                        this.msgAlerta = 'COT02: Error en la conexión...';
                        //break;
                    });
                }

                return;
                /*##################### POST REGISTRO COTIZACION #####################*/

                if (P_ERRORES > 0) {
                    // alert("salir de metodo, error de cotizacion")
                    return;
                }

                if (registrosOk != canListaPlanes) {
                    this.mostrarToast({ toast: 'warning', msg: 'COT02: ' + "Error :" + "cantidad de registros correctos: " + registrosOk + "es diferente canListaPlanes:" + canListaPlanes });
                    return;
                }

                //######### Obtener el monto por cotizacion ######################
                P_ERRORES = 0;
                await axios.post('@apiServidor' + 'api/PlanFamiliar/ObtMnt', {
                    IDTITULAR: P_IDTITULAR,
                    SECUENCIA: P_SECUENCIA.toString()
                }).then(response => {
                    if (response.data.MONTO < 1) {
                        P_ERRORES = P_ERRORES + 1;
                        this.mostrarToast({ toast: 'warning', msg: 'MNT00: Error monto pago.' });

                    } else {
                        //comentado  alert(JSON.stringify(response.data));
                        objtra.money = response.data.MONTO;
                    }

                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'MNT01: Error en la conexión...' });
                    P_ERRORES = P_ERRORES + 1;
                });


                if (P_ERRORES > 0) {
                    return;
                    //alert("salir de metodo error de monto 0");
                }

                //var mntResPag = 'S/. ' + this.FormatMoneyCeros(objtra.money).toFixed(2);
                mntResPag = 'S/. ' + parseFloat(objtra.money).toFixed(2);
                this.MNTPAG = mntResPag;

                //###### generar autenticacion #################
                await axios.post('@apiServidor' + 'api/PlanFamiliar/GenAut', {
                    //axios.post(this.SERVER_URL + '/api/PlanFamiliar/GenAut', {
                    COD_PETITORIO: objtra.number.toString(),
                    COD_CURRENCY: 'PEN',
                    PURCHASEAMOUNT: objtra.money,
                    COD_EMPRESA: '1001'
                }).then(response => {
                    if (response.data.length > 0) {
                        // ML 20230223 Registro de correo autenticación
                        for (let listaS in this.ListaPlanes) {
                            if (this.ListaPlanes[listaS].Estado == '1') {
                                //this.generarCorreoAfiliacion();
                                this.generarCorreoAfiliacion(this.ListaPlanes[listaS]);
                            }
                        }
                        // ML 20230223 Registro de correo autenticación


                        var transaction = this.buildTransaction(objtra);
                        var aut = {};
                        aut.identifier = response.data[0].identifier;
                        aut.signature = response.data[0].signature;

                        //comentado
                        //alert(JSON.stringify(response.data[0]));

                        //starpayment con synapsis
                        try {

                            var form = new Synap.Form({
                                environment: '@payEnvironment', //  'sandbox' ,'production',
                                authentication: aut,//oAuthentication,
                                transaction: transaction,
                                listeners: {
                                    afterPay: function (response) {
                                        if (response.success) {
                                            if (response.result.accepted) {
                                                //alert('realizó su pago');
                                                // Agregue el código según la experiencia del cliente para la autorización
                                                //console.info({ecommerceCapureResponse: response });
                                                //console.info("AUTHORIZED");
                                                //debugger;
                                                //comentado   console.log(JSON.stringify(response));
                                                var HTMLStruct = "";
                                                HTMLStruct += "<div class='synap-fieldlist-response'>Pago ";
                                                HTMLStruct += response.result.message;
                                                HTMLStruct += "</div>";
                                                HTMLStruct += "<div class='synap-fieldlist-response'>";
                                                HTMLStruct += "<div class='synap-field-response'>";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>Orden:</div>";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>" + response.order.number + "</div>";
                                                HTMLStruct += "</div>";

                                                HTMLStruct += "<div class='synap-field-response' style='margin-top:5px;margin-bottom:5px;' >";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>Planes Afiliados:</div>";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>" + objtra.canprod + "</div>";
                                                HTMLStruct += "</div>";

                                                HTMLStruct += "<div class='synap-field-response'>";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>Monto:</div>";
                                                HTMLStruct += "<div class='synap-fieldname-response' style='font-size:14px;'>" + mntResPag + "</div>";
                                                HTMLStruct += "</div>";



                                                HTMLStruct += "<div class='synap-field-response' style='margin-top: 20px;text-align: left;font-size:14px; '>";
                                                HTMLStruct += "Te estamos enviando un correo con toda la informacion de tu pago a : ";
                                                HTMLStruct += "</div>";

                                                HTMLStruct += "</div>";

                                                $("div[synap-identifier='title-value']").html(HTMLStruct);

                                                var HTMLStructmsg = "";

                                                HTMLStructmsg += "<div style='margin-bottom: 14px;text-align: center;'>";
                                                HTMLStructmsg += "<a href='#' title='" + objtra.email + "' style='font-size:15px;'>" + objtra.email + "</a>";
                                                HTMLStructmsg += "</div>";


                                                $(".modal-msg").html(HTMLStructmsg);

                                                $(".modal-footer").html("<button type='button' class='btn btn-secondary' onclick='fn_regresar();'>Cerrar</button>");

                                                this.ID_CORREO

                                            }
                                            else {
                                                console.info({ ecommerceCapureResponse: response });
                                                console.info("DENIED");
                                                var HTMLStruct = "";
                                                HTMLStruct += "<div class='synap-fieldlist-response'>";
                                                HTMLStruct += response.result.message;
                                                HTMLStruct += "</div>";
                                                HTMLStruct += "<div class='synap-fieldlist-response'  >";
                                                HTMLStruct += response.result.processorResult.message;
                                                HTMLStruct += "</div>";
                                                $("div[synap-identifier='title-value']").html(HTMLStruct);
                                                $(".modal-footer").html("<button type='button' class='btn btn-secondary' onclick='fn_cerrarPaymentjs();'>Cerrar</button>");
                                                //<button type='button' class='btn btn-warning m-r' onclick='fn_pagardenuevo();'>¿Desea intentar nuevamente?</button>
                                            }
                                        }
                                        else {
                                            this.mostrarToast({
                                                toast: 'warning', msg: 'Ocurrio un error.'
                                            });
                                            console.info({ ecommerceCapureResponse: response });
                                            console.info("ERROR");
                                            $(".modal-footer").html("<button type='button' class='btn btn-secondary' onclick='fn_regresar();'>Cerrar</button>");
                                        }
                                    }
                                }
                            });
                            form.render('#cart-container');

                        }
                        catch (e) {
                            debugger;
                            this.mostrarToast({
                                toast: 'warning', msg: 'La pasarela de pagos no se encuentra disponible en estos momentos.' + e.message
                            });

                            return false;
                        }


                    } else {

                        this.mostrarToast({ toast: 'warning', msg: 'Error en generacion de autenticacion.' });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'AUT01: Error en la conexión...' }); });
            },

            FormatMoneyCeros: function (form) {
                var valor = form.toString();
                var sValor;
                if (valor.indexOf(".") > -1 || valor.indexOf(",") > -1) {
                    sValor = valor;
                } else {
                    sValor = valor + ".00";
                }
                return sValor;
            }
            /* FIN SYNAP */

        }

})

app.paso1();
    </script>

}