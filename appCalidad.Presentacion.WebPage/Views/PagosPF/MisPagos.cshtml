@{
    ViewBag.Title = "Mis Pagos";
    Layout = "~/Views/Shared/_MasterInternoPagosPF.cshtml";
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
    string SERVIDOR = System.Configuration.ConfigurationManager.AppSettings["SERVIDOR"];

}
<style scoped>
    .b-table td {
        padding: 1rem; 
    }
</style>
<div id="app">
    <div class="container-fluid">

       
        <div class="row justify-content-center">


            <div v-if="v_paso=='0'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">
                <div style="height:350px;">
                    <br />
                    <br />
                    <br />
                    <p style="font-size:28px;font-weight:600;">Estados de cuenta</p>
                    <br />

                    <template v-if="msgAlerta == ''">
                        <p style="color:#818181;font-size:14px;">Obteniendo información...</p>
                        <br />
                        <br />
                    </template>
                    <template v-else>
                        <p style="font-size: 19px;" class="msgAlertaInt">{{msgAlerta}}</p>
                        <br />
                        <br />
                    </template>
                </div>
            </div>



            <div v-if="v_paso=='1'" class="col-lg-12" style="background-color: #FAFAFA;border-radius:25px;">

                <br />
                <br />
                <br />
                <p style="font-size:28px;font-weight:600;">Estados de cuenta</p>
                <br />
                    <p style="color:#818181;font-size:14px;">**Solo muestra información de los ultimos dos años</p>
                <br />
                <br />

                <div class="container">
                    <div class="form">
                        <label style="color:#ED6A00;">Mis pagos</label>
                        <div class="form-row">

                            <div class="form-group col-md-5" style="padding-top:5px;">
                                <b-form-select id="cboContrato" name="cboContrato" @*@@change="cargarCuotasPagadas"*@
                                               v-model="selectedContrato"
                                               :options="optContratos" class="form-control" style="font-size: 1.2rem; border-color: #5A1160; width: 100%; border-radius: 15px; "></b-form-select>
                                <span class="msgAlertaInt" v-if="msgAlertaCon != ''">{{msgAlertaCon}}</span>
                            </div>

                            <div class="form-group col-md-2">
                                <div >
                                    <button class="btn btn-primary" style="padding:.7rem 2.5rem;" type="button" v-on:click="cargarCuotasPagadas()">Seleccionar</button>

                                </div>
                            </div>

                            <div class="form-group col-md-5 text-right">
                                <div >
                                    <button class="btn btn-primary" style="padding:.6rem 2.5rem;" type="button" @@click="exportExcel()">
                                        Exportar Excel
                                        <span style="font-size:15px;" class="bi bi-file-earmark-excel"></span>
                                    </button>

                                </div>
                            </div>
                        </div>

                    </div>

                    <br />


                </div>

                <div class="container">

            
                    <br />
                    <b-table hover :items="lstCuotas"
                             :current-page="currentPage"
                             :fields="Columnas"
                             :per-page="perPage"
                             stacked="md"
                             head-variant="light"
                             responsive
                             show-empty
                             @*sticky-header="200px"*@
                             small
                             @*@@filtered="onFiltered"*@>
                        <template #empty="scope">
                            <h6 class="text-center">No hay filas para mostrar.</h6>
                        </template>
                        @*<template #cell(Seleccionar)="row">
            </template>*@
                        <template #cell(name)="row">
                            {{ row.value.first }} {{ row.value.last }}
                        </template>
                    </b-table>
                    <br />
                    <!-- User Interface controls -->
                    <b-row v-if="canFilas>0">
                            <b-col sm="12" md="2" class="my-1">
                            </b-col>
                            <b-col sm="5" md="4" class="my-1">
                                <b-form-group label="Por Pagina"
                                              label-for="per-page-select"
                                              label-cols-sm="6"
                                              label-cols-md="4"
                                              label-cols-lg="3"
                                              label-align-sm="right"
                                              label-size="sm"
                                              class="mb-0">
                                    <b-form-select id="per-page-select"
                                                   v-model="perPage"
                                                   :options="pageOptions"
                                                   size="sm"></b-form-select>
                                </b-form-group>
                            </b-col>

                            <b-col sm="7" md="6" class="my-1">
                                <b-pagination v-model="currentPage"
                                              :total-rows="totalRows"
                                              :per-page="perPage"
                                              align="fill"
                                              size="sm"
                                              class="my-0"></b-pagination>
                            </b-col>

                    </b-row>

                    <br />
                

                    <br />
                </div>


            </div>

            <br />
            <br />
            <br />
            <br />
        </div>
    </div>

    <b-modal id="mdConfirmacion" centered size="md" title="Confirmación"
             ok-title="Aceptar"
             cancel-title="Cancelar"
             ok-variant="custom-ok"
             cancel-variant="custom-cancel"
             header-class="custom-modal-header"
             data-html="true" @@ok="handleAceptar" ok-first>

        <br />
        <p class="p-body-modal" style="line-height:25px;text-align:center;">Se realizaran cambios.</p>
        <p class="p-body-modal" style="line-height:25px;text-align:center;">¿Desea continuar?</p>
    </b-modal>

    @* SYNP *@
    <input type="button" id="btnPayment" class="btnPayment" style="display: none;" data-toggle="modal" data-target="#popupPagar" />

    <div class="modal fade" id="popupPagar" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">

            <div class="modal-content" style="max-height: 680px; max-width: 465px; margin-left: 0px; padding: 10px; background-color: white; border-radius: 1.0rem;">
                <div class="modal-header" style="background-color: white;">
                    <img style="height: 35px;" id="logopago" src="~/Recursos/PagosPF/Logotipo.svg" />
                    <div style="color:black;font-size:15px;font-weight:bold;">{{MNTPAG}}</div>

                </div>
                <div class="modal-body" style="padding-top:10px;">
                    <div id="cart-container" class="synap-container ">
                        <!-- Contenedor donde se apertura el widget de pago -->
                    </div>
                </div>
                <div class="modal-msg">

                </div>
                <div class="modal-footer">
                    <a style='cursor: pointer;border: none;font-size:15px; ' v-on:click="fn_cerrarPayment()">Cerrar</a>
                </div>
            </div>
        </div>
    </div>

    @*{{this.lstCuotas.filter(item => item.MARCADO == 'Seleccionado')}}*@

</div>


@section scripts {

    <script>

    var app = new Vue({
                el: '#app',
        data: {

            v_paso: '0',
            indPagar:false,
                    msgAlerta: '',
            msgAlertaCon: '',
            msgAlertaCuo: '',
            msgSelCuotas:'',
                    //model
            monto:'0.00',
            lstCuotas: [],
            Columnas: [
                { key: 'TIPOPLAN', label: 'Tipo de plan' }, { key: 'N_CUOTA', label: 'Cuota' },
                { key: 'CONTRATO', label: 'Contrato' }, { key: 'TIPOPAGO', label: 'Tipo pago' },
                { key: 'VENCIMIENTO', label: 'Vencimiento' },
                { key: 'MONTO', label: 'Monto' }, { key: 'FECHA_PAGO', label: 'Fec. Pago' }, { key: 'ESTADO', label: 'Estado' },
                 { key: 'CANAL', label: 'Canal' }
            ],
            canFilas:0,
            totalRows: 100,
            currentPage: 1,
            perPage: 10,
            pageOptions: [10, 20, { value: 100, text: "Mostrar Todo" }],

            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            selectedContrato: '',
            optContratos: [],
            selectedCuota:'1',
            optCuotas: [{ text: '1', value: '1' }, { text: '2', value: '2' }, { text: '3', value: '3' }, { text: '4', value: '4' }, { text: '5', value: '5' }],
                    //loader
                    stateloader: 'Comenzar',
                    disabledComenzar: true,
                    ID_USUARIO: '@User.Identity.Name',

                    NOMBRES: '@Html.Raw(Session["Nombres"].ToString())' ,
                    APELLIDOS : '@Html.Raw(Session["Apellidos"].ToString())',
                    USUARIO: '@Session["Usuario"].ToString()',
                    SERVER_URL: '@apiServidor',
                //synap
            MNTPAG: '',
            PagoCuotaPF: {
                BE_Deducible:
                    function (form) {
                        var oDeducible = {};
                        oDeducible.COD_PETITORIO = form.getCod;
                        oDeducible.COD_EMPRESA = "1001";
                        //oDeducible.COD_COMPANIA = "X";

                        oDeducible.NOMBRES = form.tnombre;
                        oDeducible.APELLIDO_PATERNO = form.tapepat;
                        oDeducible.APELLIDO_MATERNO = form.tapemat;
                        //oDeducible.COD_MEDICO = "X";
                        //oDeducible.COD_ESPECIALIDAD = "X";
                        oDeducible.COD_USUARIO = form.contract;
                        //oDeducible.FECHA_CITA = "X";
                        oDeducible.COD_SUCURSAL = "1001";
                        //oDeducible.FLG_TELECONSULTA = "X";
                        return JSON.stringify(oDeducible)
                    },
                BE_AUTHENTICATION:
                    function (COD_CURRENCY, PURCHASEAMOUNT) {
                        var oAuthentication = {};
                        oAuthentication.COD_PETITORIO = getCod;
                        oAuthentication.COD_CURRENCY = COD_CURRENCY;
                        oAuthentication.PURCHASEAMOUNT = PURCHASEAMOUNT;
                        oAuthentication.COD_EMPRESA = "1001";
                        return JSON.stringify(oAuthentication)
                    }

            }
        },
        methods: {
            exportExcel() {
                lstCuotasExport = [];

                for (const item of this.lstCuotas) {


                    lstCuotasExport.push({
                        TipoPlan: item.TIPOPLAN,
                        Cuota: item.N_CUOTA,
                        Contrato: item.CONTRATO,
                        TipoPago: item.TIPOPAGO,
                        Contrato: item.CONTRATO,
                        FechaVencimiento: item.VENCIMIENTO,
                        Monto: item.MONTO,
                        FechaPago: item.FECHA_PAGO,
                        Estado: item.ESTADO,
                        Canal: item.CANAL
                    });
                }

            
                let data = XLSX.utils.json_to_sheet(lstCuotasExport)
                const workbook = XLSX.utils.book_new()
                const filename = 'MisPagos'
                XLSX.utils.book_append_sheet(workbook, data, filename)
                XLSX.writeFile(workbook, `${filename}.xls`)
             

                /*
                // Crear hoja de trabajo (worksheet)
                const worksheet = XLSX.utils.json_to_sheet(lstCuotasExport);
                // Convertir a CSV
                const csvOutput = XLSX.utils.sheet_to_csv(worksheet);
                // Crear un blob con el contenido CSV
                const blob = new Blob([csvOutput], { type: "text/csv;charset=utf-8;" });
                // Crear enlace temporal para descargar
                const link = document.createElement("a");
                const filename = "MisPagos.csv";
                if (link.download !== undefined) {
                    const url = URL.createObjectURL(blob);
                    link.setAttribute("href", url);
                    link.setAttribute("download", filename);
                    link.style.visibility = "hidden";
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                }
                */

            },

            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },
            cargarContratos: async function (item) {
                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarContratosPagoPF', {
                                DOCUMENTO : '@Session["Usuario"].ToString()'
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.optContratos = response.data.map(p => ({
                                    value: p.CONTRATO,
                                    text: p.NOMBREPLAN
                                }));

                                if (this.optContratos.length >= 1) {
                                    //let opcInicial = { value: "todos", text: 'Todos los contratos' };
                                    //this.optContratos.push(opcInicial);
                                    //this.selectedContrato = "todos";
                                    this.selectedContrato = this.optContratos[0].value;
                                }


                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            cargarCuotasPagadas: async function (item) {

                try {

                    const response = await axios.post('@SERVIDOR' + '/api/PagosPF/ListarCuotasPagadasPF', {
                        DOCUMENTO: '@Session["Usuario"].ToString()',
                        CONTRATO : this.selectedContrato
                            });


                            if (response.data == null) {
                                this.msgAlerta = 'Ocurrio un error....';
                            } else {
                                this.lstCuotas = response.data;
                                this.canFilas = this.lstCuotas.length;
                                this.totalRows = this.canFilas;
                            }

                        } catch (e) {
                            this.msgAlerta = 'Error en la conexión...';
                        } finally {

                        }
            },

            inicio: async function (item) {
                await this.cargarContratos();
                await this.cargarCuotasPagadas();
                this.v_paso = '1';

            },

            /*this.pantalla({ PANTALLA: 'mdConfirmacion' });*/
            handleAceptar: async function (item) {

                if (this.clave !='' && this.claveRe!='') {
                    this.tipoVal = 'actualiza_data_clave';
                } else {
                    this.tipoVal = 'actualiza_data';
                }


                try {
                      this.stateloader = 'Cargando';

                       await new Promise(resolve => setTimeout(resolve, 60));

                       const response = await axios.post('@SERVIDOR' + '/api/Usuarios/ActualizaUsuPagoPF', {
                                USUARIO: '@Session["Usuario"].ToString()',
                                PASSWORD: this.clave,
                                TIPODOC: '',
                                TIPOVAL: this.tipoVal,
                                TEL_AFI: this.telefono,
                                CEL_AFI: this.celular,
                                CORREO :  this.correo
                            });


                        // Comprobamos el mensaje de la respuesta
                        if (response.data.MSG == null) {
                            this.msgAlerta = 'Ocurrio un error....';
                        } else {
                            if (response.data.MSG == 'OK') {
                                this.v_paso = '3';
                            } else {
                                // Si la respuesta es otro mensaje, lo mostramos
                                this.msgAlerta = response.data.MSG;
                            }
                        }

                } catch (e) {
                        // En caso de error en la conexión
                        this.msgAlerta = 'Error en la conexión...';
                } finally {
                        // Esto se ejecuta independientemente de si hay error o no
                        this.stateloader = 'Comenzar';
                }


            },

        }

})

app.inicio();
    </script>
}