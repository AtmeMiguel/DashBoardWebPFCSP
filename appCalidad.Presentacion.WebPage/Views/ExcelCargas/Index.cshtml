@{
    string Title = "Excel | Cargas";
    ViewBag.Title = Title;
    string apiServidor = System.Configuration.ConfigurationManager.AppSettings["API_SERVIDOR"];
}

<div id="app">
    <div class="container">
        <br />
        <div class="row">
            <div class="col-xs-12 col-md-12">
                <b-overlay :show="show" rounded="sm">
                    <br />
                    <template v-for="item in ListaGeneral">
                        <div class="row">
                            <div class="col-lg-6">
                                <br />
                                <template>
                                    <div class="row">
                                        <div class="col-lg-4 text-center">
                                            <b-avatar button icon="tags" v-on:click="pantalla({PANTALLA:'graficoEstudios'}, ESTUDIO='')" variant="danger" title="Pendiente" class="align-center" size="4em"></b-avatar><br />Pendiente<br /><h4 class="align-center">{{item.PENDIENTE}}</h4>
                                            @*id="popover-target-Grafico2"*@
                                        </div>
                                        <div class="col-lg-4 text-center">
                                            <b-avatar button icon="tags" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar><br />Proceso<br /><h4 class="align-center">{{item.PROCESO}}</h4>
                                        </div>
                                        <div class="col-lg-4 text-center">
                                            <b-avatar button icon="tags" variant="success" title="Terminado" class="align-center" size="4em"></b-avatar><br />Terminado<br /><h4 class="align-center">{{item.TERMINADO}}</h4>
                                        </div>
                                    </div>
                                    <br />
                                    <hr />
                                    <br />
                                    <div class="row">
                                        <div class="col-lg-6 text-center">
                                            <b-avatar button icon="award" variant="info" title="Auditoría" class="align-center" size="4em"></b-avatar><br />Auditoría<br /><h4 class="align-center">{{item.TOTAL}}</h4>
                                        </div>
                                        <div class="col-lg-6 text-center">
                                            <b-avatar button icon="person-bounding-box" variant="info" title="Monitores" class="align-center" size="4em"></b-avatar><br />Monitores<br /><h4 class="align-center">{{item.MONITORES}}</h4>
                                        </div>
                                    </div>
                                </template>
                            </div>
                            <div class="col-lg-6">
                                <template>
                                    <bar-chart :styles="myStyles" :data="graficoGeneral"></bar-chart>
                                </template>
                            </div>
                        </div>
                    </template>
                    <br />
                    <template>
                        <b-container fluid>
                            <!-- User Interface controls -->
                            <b-row>
                                <b-col lg="6" class="my-1">
                                    <b-form-group label="Buscar"
                                                  label-for="filter-input"
                                                  label-cols-sm="3"
                                                  label-align-sm="right"
                                                  label-size="sm"
                                                  class="mb-0">
                                        <b-input-group size="sm">
                                            <b-form-input id="filter-input"
                                                          v-model="filter"
                                                          type="search"
                                                          v-on:keyup="buscar()"
                                                          placeholder="Nombres"></b-form-input>

                                            <b-input-group-append>
                                                <b-button :disabled="!filter" @@click="filter = '', buscar()">Limpiar</b-button>
                                            </b-input-group-append>
                                        </b-input-group>
                                    </b-form-group>
                                </b-col>
                                <template v-if="ID_SEDE == 5">
                                    <b-col lg="2" class="my-1">
                                        <b-form-group label="Configurar"
                                                      description=""
                                                      label-cols-sm="8"
                                                      label-align-sm="right"
                                                      label-size="sm"
                                                      class="mb-0">
                                            <b-avatar v-on:click="configuracion(0, 0, '')" title="Configurar Estudio" button icon="gear" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>

                                        </b-form-group>
                                    </b-col>

                                    <b-col lg="2" class="my-1">
                                        <b-form-group label="Plantilla"
                                                      description=""
                                                      label-cols-sm="8"
                                                      label-align-sm="right"
                                                      label-size="sm"
                                                      class="mb-0">
                                            <b-avatar onclick="exportTableToExcel('tblData', 'Plantilla Estudios')" title="Configurar Estudio" button icon="columns-gap" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                        </b-form-group>
                                    </b-col>




                                    <b-col lg="2" class="my-1">
                                        <b-form-group label="Carga masiva"
                                                      description=""
                                                      label-cols-sm="8"
                                                      label-align-sm="right"
                                                      label-size="sm"
                                                      class="mb-0">
                                            <b-avatar v-on:click="pantalla({PANTALLA: 'cargarUsuarios'})" title="Editar" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                        </b-form-group>
                                    </b-col>
                                </template>
                                <template v-if="ID_SEDE == 3 || ID_SEDE == 7 ">
                                    <b-col lg="2" class="my-1">
                                        <b-form-group label="Carga masiva"
                                                      description=""
                                                      label-cols-sm="8"
                                                      label-align-sm="right"
                                                      label-size="sm"
                                                      class="mb-0">
                                            <b-avatar v-on:click="pantalla({PANTALLA: 'cargarUsuarios'})" title="Editar" button icon="file-earmark-excel" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                        </b-form-group>
                                    </b-col>
                                </template>


                            </b-row>
                            <!-- Main table element -->
                            <b-row style=" height: 450px; overflow: scroll; ">
                                <b-table :items="Lista"
                                         :fields="Columnas"
                                         :current-page="currentPage"
                                         :per-page="perPage"
                                         stacked="md"
                                         head-variant="light"
                                         show-empty
                                         sticky-header
                                         small
                                         @@filtered="onFiltered">
                                    <template #cell(name)="row">
                                        {{ row.value.first }} {{ row.value.last }}
                                    </template>

                                    <template #cell(ACCIONES)="row">
                                        <template v-if="row.item.ACCIONES == 0 ">
                                            <b-avatar v-on:click="editar(row.item, row.index, $event.target), TITULO = row.item.TITULO,FECHA = row.item.FECHA, DETALLE = row.item.RESULTADO " title="Visualizar carga" button icon="eye" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                            <template v-if="row.item.ID_USUARIO == 1 ">
                                                @*<b-avatar v-on:click="eliminar(row.item, row.index, $event.target)" title="Eliminar" button icon="trash" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@
                                            </template>
                                        </template>
                                        <template v-else="row.item.ACCIONES == 0 ">
                                            <b-avatar v-on:click="editar(row.item, row.index, $event.target), TITULO = row.item.TITULO,FECHA = row.item.FECHA,DETALLE = row.item.RESULTADO " title="Visualizar carga" button icon="exclamation-circle" size="2rem" variant="light" class="align-center btn-outline-warning"></b-avatar>
                                            @*<b-avatar v-on:click="eliminar(row.item, row.index, $event.target)" title="Eliminar" button icon="trash" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>*@
                                        </template>

                                    </template>
                                </b-table>
                            </b-row>
                            <br />
                            <!-- User Interface controls -->
                            <b-row>
                                <b-col sm="5" md="6" class="my-1">
                                    <b-form-group label="Per page"
                                                  label-for="per-page-select"
                                                  label-cols-sm="6"
                                                  label-cols-md="4"
                                                  label-cols-lg="3"
                                                  label-align-sm="right"
                                                  label-size="sm"
                                                  class="mb-0">
                                        <b-form-select id="per-page-select"
                                                       v-model="perPage"
                                                       :options="pageOptions"
                                                       size="sm"></b-form-select>
                                    </b-form-group>
                                </b-col>
                                <b-col sm="7" md="6" class="my-1">
                                    <b-pagination v-model="currentPage"
                                                  :total-rows="totalRows"
                                                  :per-page="perPage"
                                                  align="fill"
                                                  size="sm"
                                                  class="my-0"></b-pagination>
                                </b-col>
                            </b-row>
                        </b-container>
                    </template>
                </b-overlay>
            </div>
        </div>
    </div>

    <b-modal id="graficoEstudios" size="xl" data-html="true" hide-footer hide-header @@hide="salida">
        <div class="row">
            <div class="col-sm-12 col-md-12">

                <div class="row" v-for="(item, index) in ListaGeneral">
                    <div class="col-xs-12 col-sm-12 col-lg-8 ">
                        <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                            <div v-if="ESTUDIO == ''">
                                <b-alert show variant="warning">
                                    <h5 class="alert-heading">Puede elegir un estudio...</h5>
                                </b-alert>
                            </div>
                            <div>
                                <div v-for="i in item.ESTUDIOS">
                                    <template v-if="i.ESTUDIO == ESTUDIO">
                                        <br />
                                        <b-avatar button icon="shop" variant="info" title="Monitores" class="align-center" size="4em"></b-avatar>
                                        <span>&nbsp;&nbsp;&nbsp;{{i.ESTUDIO}}</span>
                                        <br />
                                        <br />
                                        <column-chart :data="i.GRAFICA"></column-chart>
                                        <br />

                                    </template>

                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-12 col-lg-4">
                        <div class="card redondoCardLight  cajaGrisClaroDelgado colorFondo">
                            <div class="card-body text-center">
                                <div>
                                    <b-alert show variant="warning">
                                        <h5 class="alert-heading">Estudios</h5>
                                    </b-alert>
                                </div>
                                <hr />
                                <div class="row" v-for="(i, index) in item.ESTUDIOS">
                                    <div class="col-xs-12 ">
                                        <span class="bg-info text-white" v-on:click="ESTUDIO = i.ESTUDIO">
                                            <b-avatar badge-variant="info" variant="info" v-bind:title="i.ESTUDIO" class="text-center" button icon="shop" size="4rem">

                                            </b-avatar><span>&nbsp;&nbsp;&nbsp;{{i.ESTUDIO}}</span>
                                        </span>


                                        @*<span class="bg bg-info"><span class="text-white">{{i.ESTUDIO}}</span></span>*@
                                    </div>
                                </div>


                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </b-modal>


    <b-modal id="editarQueue" size="lg" data-html="true" hide-footer hide-header @@hide="salida">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-body">
                        <div class="card-text">
                            <template>
                                <br />
                                <template v-for="item in ListaGestion">
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <br />
                                            <h4>{{TITULO}}</h4>
                                            <hr />
                                            <b>Fecha:</b>
                                            <p>{{FECHA}}</p><br />
                                            <b>Grupo de atención:</b>
                                            <p>{{DETALLE}}</p>
                                            <br />

                                            <template>
                                                <div class="row text-center">
                                                    <div class="col-lg-1 text-center">

                                                    </div>
                                                    <div class="col-lg-3 text-center">
                                                        <b-avatar button icon="star-fill" variant="info" title="Total registros" class="align-center" size="4em"></b-avatar><br />Registros<br /><h4 class="align-center">{{item.TOTAL}}</h4>
                                                    </div>
                                                    <div class="col-lg-3 text-center">
                                                        <b-avatar button icon="person" variant="info" title="Agentes" class="align-center" size="4em"></b-avatar><br />Grupos<br /><h4 class="align-center">{{item.AGENTES}}</h4>
                                                    </div>
                                                    <div class="col-lg-3 text-center">
                                                        <b-avatar button icon="person-bounding-box" id="popover-cantidadMonitor" variant="info" title="Monitores" class="align-center" size="4em"></b-avatar><br />Monitores<br /><h4 class="align-center">{{item.MONITORES}}</h4>
                                                    </div>
                                                    <b-popover target="popover-cantidadMonitor" triggers="hover" placement="top">
                                                        <template #title>
                                                            Detalle monitor
                                                        </template>
                                                        <div v-for="i in item.RESUMEN">
                                                            {{i.MONITOR}} - {{i.CANTIDAD}}
                                                        </div>
                                                    </b-popover>
                                                </div>
                                            </template>




                                        </div>
                                        <div class="col-lg-6">
                                            <template>
                                                <pie-chart :styles="myStyles" :data="graficoTorta"></pie-chart>
                                            </template>
                                        </div>
                                    </div>
                                </template>
                                <hr />

                                <b-row style=" height: 300px; overflow: scroll; ">
                                    <b-col sm="12" md="12" class="my-1">
                                        <b-table :items="ListaRegistrosxCarga"
                                                 :fields="ColumnasDetalle"
                                                 stacked="md"
                                                 head-variant="light"
                                                 show-empty
                                                 sticky-header
                                                 small>
                                            <template #cell(ID)="row">
                                                <template v-if="row.item.RESULTADO =='PENDIENTE' || row.item.RESULTADO =='PROCESO'">
                                                    <b-avatar v-on:click="ID_QUEUE =row.item.ID , cambiar(row.item, row.index, $event.target)" title="cambiar" button icon="person-x" size="2rem" variant="warning" class="align-center btn-outline-light"></b-avatar>
                                                </template>
                                                <template v-if="row.item.RESULTADO =='TERMINADO'">
                                                    <b-avatar @@click="ID_QUEUE =row.item.ID , pantalla({PANTALLA: 'editarRegistro'})" title="reiniciar" button icon="arrow-repeat" size="2rem" variant="success" class="align-center btn-outline-light"></b-avatar>
                                                </template>
                                            </template>
                                            <template #cell(name)="row">
                                                {{ row.value.first }} {{ row.value.last }}
                                            </template>

                                        </b-table>
                                    </b-col>
                                </b-row>
                                <br />

                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="cargarUsuarios" size="md" title="ADMINISTRADOR" data-html="true" hide-footer hide-header @@hide="salida">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">PROCESO DE CARGA</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <template>
                                <div>
                                    <template v-if="ID_SEDE == 5">
                                        <b-form>
                                            <p>Eligir un grupo</p>
                                            <div class="form-group row">
                                                <label for="inputEmail3" class="col-sm-4 col-form-label">Grupo:</label>
                                                <div class="col-sm-8">
                                                    <select v-model="GRUPO" class="form-control" required disabled-field="notEnabled">
                                                        <option v-for="item in ListaGrupos" v-bind:value="{ ID: item.ID, TITULO: item.TITULO }">
                                                            {{ item.TITULO }}
                                                        </option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="text-right" v-if="GRUPO != ''">
                                                <b-button v-on:click="excel({ID: GRUPO.ID, TITULO: GRUPO.TITULO})" variant="outline-info" pill><b-avatar variant="outline-info" icon="people-fill" size="2rem"></b-avatar>Cargar excel</b-button>
                                            </div>
                                        </b-form>
                                    </template>

                                    <template v-if="ID_SEDE == 3 || ID_SEDE == 7">
                                        <b-form>
                                            <div class="text-right">
                                                <b-button v-on:click="excel({ID: 0, TITULO: ''})" variant="outline-info" pill><b-avatar variant="outline-info" icon="people-fill" size="2rem"></b-avatar>Cargar excel</b-button>
                                            </div>
                                        </b-form>
                                    </template>

                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="editarQueue2" size="md" data-html="true" hide-footer hide-header @@hide="salidaQueue">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE USUARIOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <template>
                                <p>Elige un usuario para continuar la asignación manual</p>
                                <br />
                                <div class="row">
                                    <div class="col-xs-6 col-md-6" v-for="i in ListaUsuariosCarga">
                                        <div class="bg-light" v-if="i.TIPO == 1">
                                            <b-avatar button icon="person-check" v-on:click="cambiarQueue({ID: i.ID, ID_USUARIO: i.ID_USUARIO})" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><br /><h4 class="align-center">{{i.USUARIO}}</h4>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div>
                                    <b-button v-b-toggle.collapse-1 variant="info">Lista de Monitores</b-button>
                                    <b-collapse id="collapse-1" class="mt-2">
                                        <b-card>
                                            <div class="row">
                                                <div class="col-xs-6 col-md-6" v-for="i in ListaUsuariosCarga">
                                                    <div class="bg-light" v-if="i.TIPO == 2">
                                                        <b-avatar button icon="person-check" v-on:click="cambiarQueue({ID: i.ID, ID_USUARIO: i.ID_USUARIO})" variant="warning" title="Pendiente" class="align-center" size="4em"></b-avatar><br /><h4 class="align-center">{{i.USUARIO}}</h4>
                                                    </div>

                                                </div>
                                            </div>
                                        </b-card>
                                    </b-collapse>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="editarRegistro" size="md" data-html="true" hide-footer hide-header @@hide="salidaQueue">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">Registro </strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            Desea cambiar el estado del registro a pendiente
                            <b-avatar v-on:click="reiniciar()" title="reiniciar" button icon="card-checklist" size="2rem" variant="info" class="align-center btn-info">SI</b-avatar>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>
    <!-- Info modal -->
    <b-modal :id="infoModal.id" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-body">
                        <div class="card-text">
                            <p>Esta seguro de eliminar</p>
                            <pre>{{ infoModal.content }}</pre>
                            <br /><br />
                            <div class="text-right">
                                <b-button v-on:click="" variant="outline-info" pill><b-avatar variant="outline-info" icon="trash" size="2rem"></b-avatar>Eliminar</b-button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>
    <b-modal id="excel2" size="xl" title="ADMINISTRADOR" data-html="true" hide-footer hide-header @@hide="salida">
        <div class="col-xs-12">
            <b-embed type="iframe"
                     aspect="16by9"
                     v-bind:src="SITE"
                     allowfullscreen></b-embed>
        </div>
    </b-modal>
</div>

<div class="text-white">
    <table id="tblData">
        <tr>
            <th>IDLLAMADA</th>
            <th>DATA</th>
            <th>TELEFONO</th>
            <th>GRABACION</th>
            <th>GRABACION_DEP</th>
            <th>IDINTERNO</th>
            <th>IDCLIENTE</th>
            <th>CAMPANIA</th>
            <th>ECRM</th>
            <th>FECHA</th>
            <th>USUARIO</th>
            <th>AGENTE</th>
            <th>TMO</th>
            <th>IDSUBCATEGORIA</th>
            <th>CATEGORIA</th>
            <th>SUBCATEGORIA</th>
            <th>DNI_AGENTE</th>
            <th>CALIFICACION</th>
        </tr>
    </table>
</div>


<script>
    function exportTableToExcel(tableID, filename = '') {
        var downloadLink;
        var dataType = 'application/vnd.ms-excel';
        var tableSelect = document.getElementById(tableID);
        var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');

        // Specify file name
        filename = filename ? filename + '.xls' : 'excel_data.xls';

        // Create download link element
        downloadLink = document.createElement("a");

        document.body.appendChild(downloadLink);

        if (navigator.msSaveOrOpenBlob) {
            var blob = new Blob(['ufeff', tableHTML], {
                type: dataType
            });
            navigator.msSaveOrOpenBlob(blob, filename);
        } else {
            // Create a link to the file
            downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

            // Setting the file name
            downloadLink.download = filename;

            //triggering the function
            downloadLink.click();
        }
    }

    const configImg = { headers: { Authorization: `Bearer ${'@Session["Token"].ToString()'}` } };

    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: '@User.Identity.Name',
            USUARIO: '@Session["Usuario"].ToString()',
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            SERVER_API: '@apiServidor',
            ID_SEDE: '@Session["ID_SEDE"].ToString()',

            PAGINA: '@Title',
            SITE: '',

            ID: 0,
            ID_QUEUE: 0,
            COBERTURA: '',
            ID_GRUPO: 0,
            GRUPO: '',
            ID_NEOTEL: '',

            TITULO: '',
            FECHA: '',
            DETALLE: '',
            ESTUDIO:'',

            Lista: [],
            Lista_: [],
            ListaGrupos: [],
            ListaGruposxCarga: [],
            ListaRegistrosxCarga: [],
            ListaGestion: [],
            ListaUsuariosCarga: [],
            ListaUsuariosCargaTotal: [],
            graficoTorta: [],
            graficoAvance2: [],

            ListaGeneral: [],
            graficoGeneral: [],
            Columnas: [
                'ID', 'TITULO', { key: 'RESULTADO', label: 'GRUPO' }, 'ACCIONES', 'USUARIO', 'FECHA'
            ],
            ColumnasDetalle: [
                'ID', 'TITULO', { key: 'RESULTADO', label: 'ESTADO' }, 'USUARIO', 'FECHA'
            ],
            myStyles: {
                height: '100px',
                width: '100%',
                position: 'relative',
            },
            show: false,
            totalRows: 1000,
            currentPage: 1,
            perPage: 100,
            pageOptions: [100, 500, 1000, { value: 10000, text: "Show a lot" }],
            sortBy: '',
            sortDesc: false,
            sortDirection: 'asc',
            filter: '',
            filterOn: [],
            infoModal: {
                id: 'info-modal',
                title: '',
                content: ''
            }
        },
        mounted() {
            this.totalRows = this.Lista.length
        },
        methods: {
            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },
            salida: function () {
                this.Lista = [];
                this.listar();
                this.listarGraficoGeneral();
            },
            pantalla: function (item) {
                this.$bvModal.show(item.PANTALLA);
            },
            excel: function (item) {
                this.SITE = './ExcelCarga/?idGrupo=' + item.ID+ '&idPrograma='+ this.ID_SEDE+'&idUsuario='+this.ID_USUARIO;
                this.$bvModal.show('excel2');
            },
            onFiltered(filteredItems) {
                this.totalRows = filteredItems.length;
                this.currentPage = 1;
            },
            buscar: function () {
                if (this.filter.length > 0) {
                    let palabra = this.filter.toUpperCase();
                    this.Lista = this.Lista_.filter(x => {
                        return x.TITULO.includes(palabra);
                    });
                }
                else {
                    this.Lista = this.Lista_;
                }
                this.currentPage = 1;
            },

            editar(item, index, button) {
                this.ListaRegistrosxCarga = []; this.graficoTorta = [];
                axios.post(this.SERVER_API + '/api/Grupo/ListarQueuexGrupoDetalle', {
                    ID: item.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.ID = item.ID;
                        this.ListaRegistrosxCarga = response.data;
                        let Universo = this.ListaRegistrosxCarga.filter(x => x.RESULTADO != '');
                        let Torta = []; let counts = {};
                        for (var tajada in Universo) {
                            Torta.push(`${Universo[tajada].RESULTADO}`);   //  alert(JSON.stringify(`${lista[items].ESTADO}`));
                        }
                        Torta.forEach((el) => {
                            counts[el] = counts[el] ? (counts[el] += 1) : 1;
                        });
                        this.graficoTorta = counts;

                        let Agentes = [];  let Monitores = [];
                        let map = new Map();
                        for (const i of Universo) {
                            if (!map.has(i.ID_GRUPO)) {
                                map.set(i.ID_GRUPO, true);
                                Agentes.push({ AGENTE: i.ID_GRUPO });
                            }
                        }

                        let listaMonitores = Universo.filter(x => x.USUARIO != '_');
                        const map2 = new Map();
                        for (const iii of listaMonitores) {
                            if (!map2.has(iii.USUARIO)) {
                                map2.set(iii.USUARIO, true);
                                let cantidadRegistros = Universo.filter(x => x.USUARIO == iii.USUARIO);
                                Monitores.push({ MONITOR: iii.USUARIO, CANTIDAD: cantidadRegistros.length });
                            }
                        }
                        this.ListaGestion = [];
                        this.ListaGestion.push({
                            TITULO: item.RESULTADO,
                            DETALLE: item.PLANTILLA,
                            FECHA: item.FECHA,
                            TOTAL: this.ListaRegistrosxCarga.length,
                            AGENTES: Agentes.length,
                            MONITORES: Monitores.length,
                            ESTADOS: Universo.length,
                            RESUMEN: Monitores,
                        });
                        this.pantalla({ PANTALLA: 'editarQueue' });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            ////   MODIFICADO
            reiniciar() {
                axios.post(this.SERVER_URL + '/api/Formulario/MantenimientoQUEUE', {
                    ID: this.ID_QUEUE,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                    TIPO: 4,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.editar({ ID: this.ID });
                        this.$bvModal.hide('editarRegistro');
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            ////   MODIFICADO
            cambiar(item) {
                let Usuarios = this.ListaRegistrosxCarga.filter(x => x.ID_USUARIO != item.ID_USUARIO && x.ID_USUARIO != '' );
                let Us = [];
                this.ID_QUEUE = item.ID;
                let map = new Map();
                for (let item of Usuarios) {
                    if (!map.has(item.USUARIO)) {
                        map.set(item.USUARIO, true);
                        Us.push({ USUARIO: item.USUARIO, ID_USUARIO: item.ID_USUARIO, ID: item.ID, TIPO: 1 });
                    }
                }

                axios.post(this.SERVER_API + '/api/Usuario/ListarUsuariosxGrupo', {
                    ID: item.ID_GRUPO,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let Monitores = response.data;
                        Monitores = Monitores.filter(i => i.ID != item.ID_USUARIO);
                        let map1 = new Map();
                        for (let item of Monitores) {
                            if (!map1.has(item.USUARIO)) {
                                map1.set(item.USUARIO, true);
                                Us.push({ USUARIO: item.USUARIO, ID_USUARIO: item.ID, ID: item.ID, TIPO: 2 });
                            }
                        }
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });

                this.ListaUsuariosCarga = Us;
                this.pantalla({ PANTALLA: 'editarQueue2' });
            },

            traerUsuarios: async function () {
                await axios.post(this.SERVER_API + '/api/Usuario/ListarUsuariosxGrupo', {
                    ID: item.ID_GRUPO,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let Monitores = response.data;
                        Monitores = Monitores.filter(i => i.ID != item.ID_USUARIO);
                        let map1 = new Map();
                        for (let item of Monitores) {
                            if (!map1.has(item.USUARIO)) {
                                map1.set(item.USUARIO, true);
                                Us.push({ USUARIO: item.USUARIO, ID_USUARIO: item.ID, ID: item.ID, TIPO: 2 });
                            }
                        }
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },


            ////   MODIFICADO
            cambiarQueue(item) {
                this.show = true;
                axios.post(this.SERVER_URL + '/api/Formulario/MantenimientoQUEUE', {
                    ID: this.ID_QUEUE,
                    ID_USUARIO: item.ID_USUARIO,
                    TIPO: 5,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                        this.$bvModal.hide('editarQueue2');
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            salidaQueue() {
                this.ListaUsuariosCarga = [];
                this.ListaRegistrosxCarga = []; this.graficoTorta = [];
                this.Lista = [];
                this.Lista_ = [];
                this.ListaGeneral = []; this.graficoGeneral = []; this.graficoAvance2 = [];
                this.editar({ID: this.ID});
            },

            listarGraficoGeneral: function () {    // MODIFICADO
                this.ListaGeneral = []; this.graficoGeneral = []; this.graficoAvance2 = []; this.ListaProceso = [];
                axios.post(this.SERVER_API + '/api/Grupo/ListarQueuexGrupoSuper', {
                    ID: this.ID,
                    ID_USUARIO:  this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        let lista = response.data;
                        this.ListaGeneral = []; this.graficoGeneral = []; this.graficoAvance2 = [];

                        let Universo = lista.filter(x => x.USUARIO != '');
                        let Torta = []; let counts = {};
                        for (var tajada in Universo) {
                            Torta.push(`${Universo[tajada].USUARIO}`);   //  alert(JSON.stringify(`${lista[items].ESTADO}`));
                        }
                        Torta.forEach((el) => {
                            counts[el] = counts[el] ? (counts[el] += 1) : 1;
                        });
                        this.graficoGeneral = counts;



                        let Pendiente = []; let Proceso = []; let Terminado = []; let Monitores = []; let Estudios = [];
                        Pendiente = lista.filter(x => x.ACCIONES == 'PENDIENTE');
                        Proceso = lista.filter(x => x.ACCIONES == 'PROCESO');
                        Terminado = lista.filter(x => x.ACCIONES == 'TERMINADO');

                        map = new Map();
                        for (let i of Pendiente) {
                            if (!map.has(i.RESULTADO)) {
                                map.set(i.RESULTADO, true);
                                Estudios.push({ ESTUDIO: i.RESULTADO });
                            }
                        }           //  alert(JSON.stringify(`${lista[items].ESTADO}`));

                        let listaMonitores = Universo.filter(x => x.USUARIO != '_');
                        map = new Map();
                        for (let i of listaMonitores) {
                            if (!map.has(i.USUARIO)) {
                                map.set(i.USUARIO, true);
                                Monitores.push({ USUARIO: i.USUARIO });
                            }
                        }

                        let uno = []; let grupos = { INC: 0 }; let registros = { INC: 0 };    //alert(i.ESTUDIO);
                        for (let i of Estudios) {
                            grupos = {};
                            registros = {};
                            let filas = lista.filter(x => x.RESULTADO == i.ESTUDIO);
                            if (filas.length > 0) {
                                grupos['GRAFICA'] = filas.length; //registros[i.ESTUDIO] = filas.length;
                                grupos['ESTUDIO'] = i.ESTUDIO;
                                uno.push(grupos);
                            }
                        }
                        this.ListaProceso = Proceso;
                        this.ListaGeneral.push({
                            PENDIENTE: Pendiente.length,
                            PROCESO: Proceso.length,
                            TERMINADO: Terminado.length,
                            TOTAL: lista.length,
                            MONITORES: Monitores.length,
                            ESTUDIOS: uno,
                            //ESTUDIOS: [
                            //    { ESTUDIO: "176 - TOYOTA VENTAS PERU", GRAFICA: { "NICOLAS": 33, "NANCY": 122 } },
                            //            { ESTUDIO: "175 - TOYOTA SERVICIOS PERU", GRAFICA: { "NICOLAS": 23, "NANCY": 10 } },
                            //    { ESTUDIO: "63 - IPSOS BCP_PYME SIN CARTERAS", GRAFICA: { "NICOLAS": 3, "NANCY": 2 } }]
                        });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });
            },

            listar: function () {
                //this.show = true;
                axios.post(this.SERVER_API + '/api/Grupo/ListarQueuexGrupoCarga', {
                    ID: this.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                }, configImg).then(response => {
                    if (response.data.length > 0) {
                        this.Lista = response.data;
                        this.totalRows = this.Lista.length;
                        this.Lista_ = response.data;
                        //this.show = false;
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            }
        }
    })
    app.listar();
    app.listarGraficoGeneral();

</script>
