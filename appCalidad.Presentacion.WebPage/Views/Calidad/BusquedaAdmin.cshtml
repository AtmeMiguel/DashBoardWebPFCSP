@{
    string Title = "Búsqueda Administrador";
    ViewBag.Title = Title;
    Layout = "~/Views/Shared/_ImageUpload.cshtml";
}

    <div id="app">
        <div class="containerClaro">
            <b-overlay :show="show" rounded="lg">
                <div class="row">
                    <div class="col-xs-12 col-sm-12 col-lg-12" v-if="ID == 0">
                        <div class="card redondoCardLight  cajaGrisClaroDelgado">
                            <div class="card-body">
                                <b-form>
                                    <b-row>
                                        <b-col lg="2" class="my-1">
                                            <b-form-group id="input-group-1" label="Campo de búsqueda:" label-for="input-2">
                                                <b-form-input id="input-1"
                                                              v-model="CAMPO"
                                                              required></b-form-input>
                                            </b-form-group>
                                        </b-col>
                                        <b-col lg="10" class="my-1">
                                            <b-row>
                                                <b-col lg="4" class="redondoCardLight cajaGrisClaroDelgado" v-for="i in ListaGruposxUsuario">
                                                    <div class="bg-light" v-on:click="ID_GRUPO= i.ACCIONES, buscar()">
                                                        <b-avatar button icon="briefcase" variant="info" title="Pendiente" size="em"></b-avatar><span class="align-center">{{i.TITULO}}</span>
                                                    </div>
                                                </b-col>
                                            </b-row>

                                        </b-col>
                                    </b-row>
                                </b-form>

                                <b-row style=" height: 600px; overflow: scroll; ">
                                    <b-table :items="ListaBandeja"
                                             stacked="md"
                                             head-variant="light"
                                             show-empty
                                             sticky-header
                                             small>
                                        <template #cell(name)="row">
                                            {{ row.value.first }} {{ row.value.last }}
                                        </template>
                                        <template #cell(RESULTADO)="row">
                                            <div variant="ligth" class="fa-pills align-center btn-outline-info">{{row.item.RESULTADO}}</div>
                                        </template>
                                        <template #cell(ACCIONES)="row">
                                            <b-avatar v-on:click="listaQueList({ ID: row.item.ID, ID_SOURCE: row.item.ID, ID_GRUPO: row.item.ID_GRUPO, PLANTILLA: row.item.ACCIONES })" title="Ver Detalle" button icon="book" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                            <b-avatar v-on:click="abrirFormulario({ ID: row.item.ID ,ID_GRUPO: row.item.ID_GRUPO })"  title="Abrir formulario" button icon="pencil-square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                        </template>
                                    </b-table>
                                </b-row>

                            </div>
                        </div>


                    </div>
                </div>
            </b-overlay>
        </div>
        <b-modal id="lista" size="xl" data-html="true" hide-footer hide-header>
            <div class="row">
                <div class="col-sm-12 col-md-12">
                    <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                        <div class="card-body">
                            <div class="card-text">
                                <div style="height: 460px; overflow: scroll; ">
                                    <template v-for="(item , index) in PLANTILLA">
                                        <div class="row">
                                            <div class="col-xs-4 col-md-4 col-lg-4">
                                                <p class="bg-info text-left text-light" v-bind:title="item.pri" style="font-size: 12px; width: 100%; white-space:nowrap; text-overflow: ellipsis; overflow: hidden;">{{item.pri}}</p>
                                            </div>
                                            <div class="col-xs-8 col-md-8 col-lg-8">
                                                <p class="text-right text-dark" style="font-size: 12px; ">{{item.seg}}</p>
                                            </div>
                                        </div>
                                    </template>
                                </div>
                                <div class="row">
                                    <div class="col-xs-4 col-md-4 redondoCardLight  cajaGrisClaroDelgado" v-for="i in ListaQueList_">
                                        <div class="text-black-50" v-if="i.RESULTADO =='PENDIENTE'">
                                            <p>{{i.RESULTADO}}-{{i.TITULO}}</p>
                                            <p>{{i.FECHA}}</p>
                                            <b-avatar button icon="pencil-square" v-on:click="iniciar({ ID: i.ID, TITULO: i.TITULO })" variant="warning" title="Pendiente" size="em"></b-avatar><span class="align-center"></span>
                                        </div>
                                        <div class="text-black-50" v-if="i.RESULTADO !='PENDIENTE'">
                                            <p>{{i.RESULTADO}}-{{i.TITULO}}</p>
                                            <p>{{i.FECHA}}-{{i.USUARIO}}</p>
                                            <b-avatar @@click="ID= i.ID , pantalla({PANTALLA: 'editarRegistro'})" title="reiniciar" button icon="arrow-repeat" size="2rem" variant="light" class="align-center btn-outline-danger"></b-avatar>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </b-modal>

        <b-modal id="editarFormulario" size="xl" data-html="true" hide-footer hide-header>
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-lg-12">
                    <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-xs-12 col-sm-4 col-lg-4">
                                    <h2 class="bg-info text-white text-center">Datos iniciales-ID:{{ID}}</h2>
                                    <div v-for="(q, name) of CAMPOS">
                                        <template v-if="doShow( name )">
                                            <template v-if="q.MODULO == '0'">
                                                <template v-if="q.type == 'input'">
                                                    <div class="form-group row">
                                                        <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }}</b> <em v-if="q.comment">({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value == undefined"> ! </b></span> </label>
                                                        <div class="col-sm-6">
                                                            <template v-if="q.subtype == 'text'">
                                                                <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar letras ..."></b-form-input>
                                                            </template>
                                                            <template v-if="q.subtype == 'tel'">
                                                                <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                                            </template>
                                                            <template v-if="q.subtype == 'date'">
                                                                <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar fecha"></b-form-input>
                                                            </template>
                                                            <template v-if="q.subtype == 'area'">
                                                                <textarea class="form-control" v-model="q.value" rows="4"></textarea>
                                                            </template>
                                                        </div>
                                                    </div>
                                                </template>
                                                <template v-if="q.type == 'select'">
                                                    <template v-if="q.options.length>0">
                                                        <div class="form-group  row">
                                                            <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                            <div class="col-sm-6">
                                                                <b-form-select v-model="q.value" :options="q.options" v-on:change="test(q)"></b-form-select>
                                                            </div>
                                                        </div>
                                                    </template>
                                                </template>
                                                <template v-if="q.type == 'radio'">
                                                    <template v-if="q.options.length>0">
                                                        <div class="form-group  row">
                                                            <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em><span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                            <div class="col-sm-6">
                                                                <b-form-radio-group buttons button-variant="outline-info" name="radio-btn-outline" v-model="q.value" :options="q.options" v-on:change="test(q)" />
                                                            </div>
                                                        </div>
                                                    </template>
                                                </template>

                                                @*<b-form-datepicker id="ex-disabled-readonly" disabled></b-form-datepicker>*@


                                            </template>
                                        </template>
                                    </div>
                                    @*<div v-for="(q, name) of CAMPOS">
                                <template v-if="q.COLUMNA =='CAMPO_2_1'">{{q}}<hr />
                                </template>
                                <template v-if="q.COLUMNA =='CAMPO_2_1_MP'">{{q}}<hr />
                                </template>
                                <template v-if="q.COLUMNA =='CAMPO_2_1_NC'">{{q}}
                                </template>
                            </div>*@
                                </div>

                                <div class="col-xs-12 col-sm-8 col-lg-8">

                                    <b-card no-body>

                                        <b-tabs pills card vertical end>

                                            <template v-for="(mod, key) in MODULOS">
                                                <b-tab v-bind:title="mod.ext" button-variant="outline-info" size="lg" pills>
                                                    <div v-for="(q, name,k) of CAMPOS">
                                                        <template v-if="doShow( name )">
                                                            <template v-if="q.MODULO != '0' && q.MODULO == mod.ext">
                                                                <b-card-text>
                                                                    <h2 v-if="name==1" class="bg-info text-white text-center">{{mod.ext}}</h2>
                                                                    <template v-if="q.type == 'input'">
                                                                        <div class="form-group row">
                                                                            <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }}</b> <em v-if="q.comment">({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value == undefined "> ! </b></span></label>
                                                                            <div class="col-sm-6">
                                                                                <template v-if="q.subtype == 'text'">
                                                                                    <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar letras ..."></b-form-input>
                                                                                </template>
                                                                                <template v-if="q.subtype == 'tel'">
                                                                                    <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                                                                </template>
                                                                                <template v-if="q.subtype == 'date'">
                                                                                    <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar fecha"></b-form-input>
                                                                                </template>
                                                                                <template v-if="q.subtype == 'area'">
                                                                                    <textarea class="form-control" v-model="q.value" rows="4"></textarea>
                                                                                </template>
                                                                            </div>
                                                                        </div>
                                                                    </template>

                                                                    <template v-if="q.type == 'select'">
                                                                        <template v-if="q.options.length>0">
                                                                            <div class="form-group  row">
                                                                                <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                                <div class="col-sm-6">
                                                                                    <b-form-select v-model="q.value" :options="q.options" v-on:change="test(q)"></b-form-select>
                                                                                </div>
                                                                            </div>
                                                                        </template>
                                                                    </template>
                                                                    <template v-if="q.type == 'radio'">
                                                                        <template v-if="q.options.length>0">
                                                                            <div class="form-group  row">
                                                                                <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em><span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                                <div class="col-sm-6">
                                                                                    <b-form-radio-group buttons button-variant="outline-info" name="radio-btn-outline" v-model="q.value" :options="q.options" v-on:change="test(q)" />
                                                                                </div>
                                                                            </div>
                                                                        </template>
                                                                    </template>
                                                                    <template v-if="q.type == 'multi'">
                                                                        <b-form-group v:bind-label="q.NOMBRE" v-slot="{ ariaDescribedby }">
                                                                            <b-form-checkbox-group v-model="q.value"
                                                                                                   :options="q.options"
                                                                                                   :aria-describedby="ariaDescribedby"
                                                                                                   plain
                                                                                                   stacked></b-form-checkbox-group>
                                                                        </b-form-group>
                                                                    </template>
                                                                </b-card-text>
                                                            </template>
                                                        </template>
                                                    </div>
                                                </b-tab>
                                            </template>

                                        </b-tabs>
                                        <div class="text-right">
                                            <div class="text-right">
                                                <hr />
                                                <b-button-group>
                                                    <span class="btn btn-link text-warning" style="width:70px" title="Guardar" v-on:click="GuardarAvance">
                                                        <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Pendiente</span>
                                                        <b-avatar variant="outline-info" icon="battery-half" size="5rem"></b-avatar>
                                                    </span>
                                                </b-button-group>
                                                <br /><br />
                                            </div>
                                        </div>

                                    </b-card>

                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </b-modal>




        <b-modal id="editarRegistro" size="md" data-html="true" hide-footer hide-header>
            <div class="row">
                <div class="col-sm-12 col-md-12">
                    <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                        <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                            <div class="card-title text-center text-white">
                                <strong class="text-center">Registro </strong>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="card-text">
                                Desea cambiar el estado del registro a pendiente
                                <b-avatar v-on:click="reiniciar()" title="reiniciar" button icon="card-checklist" size="2rem" variant="info" class="align-center btn-info">SI</b-avatar>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </b-modal>
    </div>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: sessionStorage.getItem('ID_USUARIO'),
            USUARIO: sessionStorage.getItem('USUARIO'),
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            ID_SEDE: sessionStorage.getItem('ID_SEDE'),
            ID_GRUPO: sessionStorage.getItem('IMAGE'),
            PLANTILLA: '',
            ID: 0,
            CAMPO: '',
            TXT_OBSERVACION: '',
            show: false,
            value: [],

            MODULOS: [],
            CAMPOS: {},

            ListaGruposxUsuario: [],
            ListaBandeja: [],
            ListaQueList_: [],
        },
        methods: {
            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },
            pantalla: function (item) {
                this.$bvModal.show(item.PANTALLA);
            },
            mostrarModal: function (form) {
                this.$bvModal.show(form.MODAL);
            },
            listaQueList: function (item) {
                this.PLANTILLA = [];
                if (item.PLANTILLA != null) {
                    let separado = item.PLANTILLA.split("|");
                    for (var i in separado) {
                        let fil = separado[i].split(":"); let pri1 = ''; let seg2 = '';
                        pri1 = fil[0];
                        seg2 = fil[1];
                        //for (var ii in fil) {
                        //    pri = (ii == 0 ? fil[0] : pri);
                        //    seg = (ii > 0 ? seg + ' ' + fil[ii] : '');
                        //}
                        //alert(pri1+ ' - '+ seg2)
                        this.PLANTILLA.push({ pri: pri1, seg: seg2 });
                    }
                }
                axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                    ID: 0,
                    ID_SOURCE: item.ID_SOURCE,
                    ID_GRUPO: item.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 36,
                }).then(response => {
                    if (response.data.length > 0) {
                        this.ListaQueList_ = response.data;
                        this.pantalla({ PANTALLA: 'lista' });

                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            abrirFormulario: function (item) {
                this.ID = item.ID;
                //this.ID_GRUPO = item.ID_GRUPO;

                axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                    ID: item.ID,
                    ID_SOURCE: item.ID,
                    ID_GRUPO: item.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 42, 
                }).then(response => {
                    if (response.data.length > 0) {
                        this.show = false;
                        let CAMPOS = {};
                        let lista = response.data;
                        for (i in lista) {
                            this.ID = lista[i].ID;
                            this.ID_GRUPO = lista[i].ID_GRUPO;
                        }
                        // Traer item de control del formulario
                        axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                            ID_SEDE: this.ID_SEDE,
                            ID_GRUPO: this.ID_GRUPO,
                            ID_USUARIO: this.ID_USUARIO,
                            TIPO: 32,
                        }).then(response => {
                            if (response.data.length > 0) {
                                this.pantalla({ PANTALLA: 'editarFormulario' });

                                this.ListaItem = response.data;
                                // Completar items
                                for (i in lista) {
                                    let columnas = { value_: lista[i].RESULTADO };
                                    columnas['MODULO'] = lista[i].TITULO;
                                    columnas['COLUMNA'] = lista[i].RESULTADO;
                                    switch (lista[i].ACCIONES) {
                                        case 'Text': { columnas['type'] = 'input'; columnas['subtype'] = 'text'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Area': { columnas['type'] = 'input'; columnas['subtype'] = 'area'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Numeric': { columnas['type'] = 'input'; columnas['subtype'] = 'tel'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Date': { columnas['type'] = 'input'; columnas['subtype'] = 'date'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Dropdow': { columnas['type'] = 'select'; columnas['subtype'] = 'select'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Multi': { columnas['type'] = 'multi'; columnas['subtype'] = 'select'; columnas['value'] = []; break; }
                                        case 'Switch': { columnas['type'] = 'radio'; columnas['subtype'] = 'select'; columnas['value'] = lista[i].PLANTILLA; break; }
                                    }
                                    columnas['ID_CONTROL'] = lista[i].ID_USUARIO;
                                    columnas['NOMBRE'] = lista[i].USUARIO;
                                    if (lista[i].TITULO != '0') {
                                        let Universo = this.MODULOS.filter(x => x.ext == lista[i].TITULO);
                                        if (Universo.length < 1) { this.MODULOS.push({ ext: lista[i].TITULO }); }
                                    }

                                    let item = [];
                                    let listaControl = this.ListaItem.filter(x => x.ID_GRUPO == lista[i].ID_USUARIO && x.ID_USUARIO == 0);
                                    for (var ite in listaControl) {
                                        item.push({ id: listaControl[ite].ID, idControl: listaControl[ite].ID_GRUPO, text: listaControl[ite].TITULO, value: listaControl[ite].TITULO });
                                        columnas['VALIDAR'] = 1;
                                    }
                                    columnas['options'] = item;
                                    columnas['VALIDAR'] = 1;
                                    if (columnas['subtype'] == 'select' && item.length == 0) { columnas['VALIDAR'] = 0; }

                                    if (lista[i].FECHA.length > 0) {
                                        let listaMostrar = lista[i].FECHA.split(",");
                                        for (let ii in listaMostrar) {
                                            let itemsMostrar = listaMostrar[ii].split("=");
                                            let ifItem = [{ value: lista[i].RESULTADO, object: itemsMostrar[0], igual: itemsMostrar[1] }];
                                            columnas['if'] = ifItem;
                                        }
                                    }
                                    CAMPOS[lista[i].RESULTADO] = columnas;
                                }
                                this.CAMPOS = CAMPOS;
                            }
                        }).catch(e => {
                        });
                    }
                }).catch(e => {
                });
            },
            test: function (item) {
                let valor = item.value;
                if (valor != undefined) {
                    let idPadre = 0; let lista = item.options;
                    for (i in lista) {
                        let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == lista[i].id);
                        if (listaItem.length > 0) {
                            for (var obj in this.CAMPOS) {
                                if (`${this.CAMPOS[obj].COLUMNA}` == listaItem[0].PLANTILLA) {    //alert(nuevoControl);
                                    this.CAMPOS[obj].options = [];
                                    this.CAMPOS[obj].VALIDAR = 0;
                                    //let item = [];
                                    //item.push({ id: 10000, idControl: 0, text: 'Seleccionar', value: 'Seleccionar' });
                                    //this.CAMPOS[obj].options = item;
                                    //this.CAMPOS[obj].value = 'Seleccionar';
                                    //this.CAMPOS[obj].value = [];
                                }
                            }
                        }
                        if (lista[i].value == valor) idPadre = lista[i].id;
                    }
                    let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == idPadre);
                    if (listaItem.length > 0) {
                        let nuevoControl = listaItem[0].PLANTILLA;
                        for (var obj in this.CAMPOS) {
                            if (`${this.CAMPOS[obj].COLUMNA}` == nuevoControl) {    //alert(nuevoControl);
                                this.CAMPOS[obj].options = [];
                                this.CAMPOS[obj].VALIDAR = 0;
                                let item = [];

                                for (var ite in listaItem) {
                                    item.push({ id: listaItem[ite].ID, idControl: listaItem[ite].ID_GRUPO, text: listaItem[ite].TITULO, value: listaItem[ite].TITULO });
                                    this.CAMPOS[obj].value = listaItem[ite].TITULO;
                                    this.CAMPOS[obj].VALIDAR = 1;
                                }
                                if (`${this.CAMPOS[obj].type}` == 'multi') {
                                    this.CAMPOS[obj].value = [];
                                }
                                this.CAMPOS[obj].options = item;
                            }
                        }
                    }
                }
            },
            doShow: function (field) {
                if (this.CAMPOS[field].if != undefined) {
                    //alert(this.CAMPOS[field].if)
                    let listaIf = this.CAMPOS[field].if
                    //alert(JSON.stringify(listaIf));
                    for (i in listaIf) {
                        let valor = listaIf[i].object;
                        let valor2 = listaIf[i].igual;
                        let campo = listaIf[i].value;
                        if (this.CAMPOS[valor].value != valor2) {
                            this.CAMPOS[campo].VALIDAR = 0;
                            return false;
                        } else { this.CAMPOS[campo].VALIDAR = 1; }
                    }
                }
                return true;
            },
            GuardarAvance: function () {
                this.show = true;
                let CAMPOS = '';
                let Plan = '';
                for (var obj in this.CAMPOS) {
                    CAMPOS = CAMPOS + `${this.CAMPOS[obj].value_}` + '=|' + `${this.CAMPOS[obj].value}` + ',|';
                    Plan = Plan + `${this.CAMPOS[obj].NOMBRE}` + ':' + `${this.CAMPOS[obj].value}` + '|';
                }

                this.PLANTILLA = Plan;
                axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                    ID: this.ID,
                    ID_SOURCE: this.ID,
                    TITULO: Plan,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    CAMPO_3: CAMPOS,
                    TIPO: 43
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.PLANTILLA = '';
                        this.ID = 0;
                        this.CAMPOS = {};
                        this.$bvModal.hide('editarFormulario');
                    }
                }).catch(e => {
                });


            },


            iniciar: function (item) {
                axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                    ID: item.ID,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 37
                }).then(response => {
                    if (response.data.ID > 0) {

                        this.mostrarToast({ toast: 'warning', msg: 'Asignado correctamente ...' });
                        this.ListaQueList_ = this.ListaQueList_.filter(x => x.ID != response.data.ID);
                        this.ListaQueList_.push({ ID: response.data.ID, ID_GRUPO: 0, ID_USUARIO: this.ID_USUARIO, RESULTADO: 'ASIGNADO', FECHA: 'AHORA', TITULO: item.TITULO, USUARIO: 'YO' });

                    }
                }).catch(e => {
                });
            },
            reiniciar() {
                axios.post(this.SERVER_URL + '/api/Excel/MantenimientoCarga', {
                    ID: this.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                    TIPO: 15,
                }).then(response => {
                    if (response.data.ID > 0) {
                        //this.editar({ ID: this.ID });
                        this.$bvModal.hide('editarRegistro');
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },
            buscar: function () {
                axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                    ID: 0,
                    ID_SOURCE: 0,
                    ID_GRUPO: this.ID_GRUPO,
                    TITULO: this.CAMPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 35,   // 60
                }).then(response => {
                    if (response.data.length > 0) {
                        this.ListaBandeja = response.data;
                    } else { this.ListaBandeja = []; }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            listarGruposxUsuario: function () {
                //this.show = true;
                axios.post(this.SERVER_URL + '/api/Grupo/ListarGruposxPrograma', {
                    ID: this.ID_USUARIO,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                    TIPO: 10,
                }).then(response => {
                    if (response.data.length > 0) { this.ListaGruposxUsuario = response.data; }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },
        }
    })
    app.listarGruposxUsuario();
</script>
