@{
    string Title = "Gestion";
    ViewBag.Title = Title;
}

<div id="app">
    <div class="containerClaro">
        <br />
        <b-overlay :show="show" rounded="lg">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-lg-12" v-if="ID == 0">
                    <div class="row">
                        <div class="col-lg-3"></div>
                        <div class="col-xs-12 col-lg-9">
                            <div class="card redondoCardLight  cajaGrisClaroDelgado">
                                <div class="card-body">
                                    <div>
                                        <b-tabs content-class="mt-3">
                                            <b-tab title="Inicio de gestión" active>
                                                <div class="row bg-info">
                                                    <div class="col-sm-8 col-md-8 col-lg-8">
                                                        <div class="card-title  text-left text-white">
                                                            <br /><h3>Monitor</h3>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-4 col-md-4 col-lg-4">
                                                        <div class="card-title  text-right text-white">
                                                            <br /><span> <b-avatar button icon="alarm" size="3rem" variant="light"></b-avatar></span><span>&nbsp;&nbsp;&nbsp;Tiempo: </span>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-sm-6 col-md-6 col-lg-6">
                                                        <br /><br />
                                                        <template v-for="item in ListaGeneral">
                                                            <div class="row">
                                                                <div class="col-lg-6 text-center">
                                                                    <b-avatar button icon="tags" variant="danger" title="Pendiente" class="align-center" size="4em"></b-avatar><br />Pendiente<br /><h4 class="align-center">{{item.PENDIENTE}}</h4>
                                                                </div>
                                                                <div class="col-lg-6 text-center">
                                                                    <template v-if="ID_SEDE==7">
                                                                        <b-avatar button icon="tags" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar>
                                                                        <br />En proceso
                                                                        <br />
                                                                        <h4 class="align-center">{{item.PROCESO}}</h4>
                                                                    </template>
                                                                    <template v-else="ID_SEDE==7">
                                                                        <b-avatar button icon="tags" v-on:click="pantalla({PANTALLA:'graficoEstudios'})" variant="warning" title="Proceso" class="align-center" size="4em"></b-avatar>
                                                                        <br />En proceso
                                                                        <br />
                                                                        <h4 class="align-center">{{item.PROCESO}}</h4>
                                                                    </template>

                                                                </div>
                                                            </div>
                                                            <hr />
                                                            <br />
                                                            <h4 class="text-center">Detalle de casos por Grupo</h4>
                                                            <br />

                                                            <div class="row" v-for="e in item.ESTUDIOS">
                                                                <div class="col-lg-12 text-left">
                                                                    <span><b-avatar button icon="diagram-3" variant="info" title="Pendiente" class="align-center" size="2em"></b-avatar>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="align-center">{{e.ESTUDIO}} - {{e.GRAFICA}}</span></span><br />
                                                                </div>
                                                            </div>
                                                        </template>
                                                    </div>
                                                    <div class="col-sm-6 col-md-6 col-lg-6">
                                                        <br /><br /><br /><br /><br /><br />
                                                        <h2>Bienvenido</h2>
                                                        <br />
                                                        <p>Tus talentos y habilidades irán mejorando con el tiempo, pero para eso has de empezar</p><br /><br />

                                                        <div class="col-sm-6 col-md-10 col-lg-10 text-right">
                                                            <b-button v-on:click="iniciar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: 0 } )" variant="outline-info" pill><b-avatar variant="outline-info" icon="power" size="2rem"></b-avatar>Iniciar</b-button>

                                                            <template v-if="ID_SEDE != 7">
                                                                <b-button v-on:click="pantalla({PANTALLA:'nuevo'})" variant="outline-info" pill><b-avatar variant="outline-info" icon="power" size="2rem"></b-avatar>Nuevo</b-button>
                                                            </template>
                                                        </div>
                                                    </div>
                                                </div>
                                            </b-tab>
                                            <b-tab title="Bandeja de atención" v-if="ID_SEDE==7">
                                                <b-row style=" height: 600px; overflow: scroll; ">
                                                    <b-table :items="ListaBandeja"
                                                             stacked="md"
                                                             head-variant="light"
                                                             show-empty
                                                             sticky-header
                                                             small>
                                                        <template #cell(name)="row">
                                                            {{ row.value.first }} {{ row.value.last }}
                                                        </template>

                                                        <template #cell(ACCIONES)="row">
                                                            <template v-if="row.item.ACCIONES == 1 ">
                                                                <b-avatar v-on:click="configurar({ ID: row.item.ID, ID_SOURCE: row.item.ID, ID_GRUPO: row.item.ID_GRUPO })" title="Iniciar" button icon="pencil-square" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                                                            </template>
                                                        </template>
                                                    </b-table>
                                                </b-row>
                                            </b-tab>
                                        </b-tabs>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-12 col-lg-12" v-else="ID == 0">
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-lg-12">
                            <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-xs-12 col-sm-4 col-lg-4">
                                            <h2 class="bg-info text-white text-center">Datos iniciales-ID:{{ID}}</h2>
                                            <div v-for="(q, name) of CAMPOS">
                                                <template v-if="doShow( name )">
                                                    <template v-if="q.MODULO == '0'">
                                                        <template v-if="q.type == 'input'">
                                                            <div class="form-group row">
                                                                <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }}</b> <em v-if="q.comment">({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value == undefined"> ! </b></span> </label>
                                                                <div class="col-sm-6">
                                                                    <template v-if="q.subtype == 'text'">
                                                                        <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar letras ..."></b-form-input>
                                                                    </template>
                                                                    <template v-if="q.subtype == 'tel'">
                                                                        <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                                                    </template>
                                                                    <template v-if="q.subtype == 'date'">
                                                                        <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar fecha"></b-form-input>
                                                                    </template>
                                                                    <template v-if="q.subtype == 'area'">
                                                                        <textarea class="form-control" v-model="q.value" rows="4"></textarea>
                                                                    </template>
                                                                </div>
                                                            </div>
                                                        </template>
                                                        <template v-if="q.type == 'select'">
                                                            <template v-if="q.options.length>0">
                                                                <div class="form-group  row">
                                                                    <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                    <div class="col-sm-6">
                                                                        <b-form-select v-model="q.value" :options="q.options" v-on:change="test(q)"></b-form-select>
                                                                    </div>
                                                                </div>
                                                            </template>
                                                        </template>
                                                        <template v-if="q.type == 'radio'">
                                                            <template v-if="q.options.length>0">
                                                                <div class="form-group  row">
                                                                    <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em><span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                    <div class="col-sm-6">
                                                                        <b-form-radio-group buttons button-variant="outline-info" name="radio-btn-outline" v-model="q.value" :options="q.options" v-on:change="test(q)" />
                                                                    </div>
                                                                </div>
                                                            </template>
                                                        </template>

                                                        @*<b-form-datepicker id="ex-disabled-readonly" disabled></b-form-datepicker>*@


                                                    </template>
                                                </template>
                                            </div>
                                            @*<div v-for="(q, name) of CAMPOS">
                                                    <template v-if="q.COLUMNA =='CAMPO_2_1'">{{q}}<hr />
                                                    </template>
                                                    <template v-if="q.COLUMNA =='CAMPO_2_1_MP'">{{q}}<hr />
                                                    </template>
                                                    <template v-if="q.COLUMNA =='CAMPO_2_1_NC'">{{q}}
                                                    </template>
                                                </div>*@
                                        </div>

                                        <div class="col-xs-12 col-sm-8 col-lg-8">

                                            <b-card no-body>

                                                <b-tabs pills card vertical end>

                                                    <template v-for="(mod, key) in MODULOS">
                                                        <b-tab v-bind:title="mod.ext" button-variant="outline-info" size="lg" pills>
                                                            <div v-for="(q, name,k) of CAMPOS">
                                                                <template v-if="doShow( name )">
                                                                    <template v-if="q.MODULO != '0' && q.MODULO == mod.ext">
                                                                        <b-card-text>
                                                                            <h2 v-if="name==1" class="bg-info text-white text-center">{{mod.ext}}</h2>
                                                                            <template v-if="q.type == 'input'">
                                                                                <div class="form-group row">
                                                                                    <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }}</b> <em v-if="q.comment">({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value == undefined "> ! </b></span></label>
                                                                                    <div class="col-sm-6">
                                                                                        <template v-if="q.subtype == 'text'">
                                                                                            <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar letras ..."></b-form-input>
                                                                                        </template>
                                                                                        <template v-if="q.subtype == 'tel'">
                                                                                            <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar números" oninput="this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\..*)\./g, '$1');"></b-form-input>
                                                                                        </template>
                                                                                        <template v-if="q.subtype == 'date'">
                                                                                            <b-form-input v-model="q.value" class="form-control" :type="q.subtype" placeholder="Ingresar fecha"></b-form-input>
                                                                                        </template>
                                                                                        <template v-if="q.subtype == 'area'">
                                                                                            <textarea class="form-control" v-model="q.value" rows="4"></textarea>
                                                                                        </template>
                                                                                    </div>
                                                                                </div>
                                                                            </template>

                                                                            <template v-if="q.type == 'select'">
                                                                                <template v-if="q.options.length>0">
                                                                                    <div class="form-group  row">
                                                                                        <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em> <span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                                        <div class="col-sm-6">
                                                                                            <b-form-select v-model="q.value" :options="q.options" v-on:change="test(q)"></b-form-select>
                                                                                        </div>
                                                                                    </div>
                                                                                </template>
                                                                            </template>
                                                                            <template v-if="q.type == 'radio'">
                                                                                <template v-if="q.options.length>0">
                                                                                    <div class="form-group  row">
                                                                                        <label for="inputEmail3" class="col-sm-6 col-form-label  text-right"><b>{{ q.NOMBRE }} <em v-if="q.comment"> ({{ q.comment }})</em><span class="badge badge-danger"><b v-if="q.value.length==0 || q.value=='' || q.value ==undefined"> ! </b></span> </b></label>
                                                                                        <div class="col-sm-6">
                                                                                            <b-form-radio-group buttons button-variant="outline-info" name="radio-btn-outline" v-model="q.value" :options="q.options" v-on:change="test(q)" />
                                                                                        </div>
                                                                                    </div>
                                                                                </template>
                                                                            </template>
                                                                            <template v-if="q.type == 'multi'">
                                                                                <b-form-group v:bind-label="q.NOMBRE" v-slot="{ ariaDescribedby }">
                                                                                    <b-form-checkbox-group v-model="q.value"
                                                                                                           :options="q.options"
                                                                                                           :aria-describedby="ariaDescribedby"
                                                                                                           plain
                                                                                                           stacked></b-form-checkbox-group>
                                                                                </b-form-group>
                                                                            </template>
                                                                        </b-card-text>
                                                                    </template>
                                                                </template>
                                                            </div>
                                                        </b-tab>
                                                    </template>

                                                </b-tabs>
                                                <div class="text-right">
                                                    <div class="text-right">
                                                        <hr />
                                                        <b-button-group>
                                                            @*vertical*@

                                                            <span class="btn btn-link text-warning" style="width:70px" title="Guardar" v-on:click="GuardarAvance">
                                                                <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Pendiente</span>
                                                                <b-avatar variant="outline-info" icon="battery-half" size="5rem"></b-avatar>
                                                            </span>

                                                            <span class="btn btn-link text-warning" style="width:70px" title="Guardar" v-on:click="copiarPortaPreventiva">
                                                                <span class="badge badge-light text-black-50" style="font-size: 11px; height: 11px; margin-top: -30px;  z-index: 10;">Guardar</span>
                                                                <b-avatar variant="outline-info" icon="trophy" size="5rem"></b-avatar>
                                                            </span>
                                                        </b-button-group>
                                                        <br /><br />
                                                    </div>
                                                </div>

                                            </b-card>

                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </b-overlay>
    </div>

    <b-modal id="graficoEstudios" size="lg" data-html="true" hide-footer hide-header @@hide="listarGraficoGeneral">
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <b-row style=" height: 550px; overflow: scroll; ">
                        <b-table :items="ListaProceso"
                                 :fields="Columnas"
                                 stacked="md"
                                 head-variant="light"
                                 show-empty
                                 sticky-header
                                 small>
                            <template #cell(name)="row">
                                {{ row.value.first }} {{ row.value.last }}
                            </template>

                            <template #cell(ID)="row">
                                <b-avatar v-on:click="eliminar(row.item, row.index, $event.target)" title="Eliminar" button icon="trash" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>
                            </template>
                        </b-table>
                    </b-row>
                </div>
            </div>
        </div>
    </b-modal>

    <b-modal id="nuevo" size="md" data-html="true" hide-footer hide-header>
        <div class="row">
            <div class="col-sm-12 col-md-12">
                <div class="card redondoCardLight  cajaGrisClaroDelgado ">
                    <div class="card-header bg-info" style="float:right; font-size: 18px; height: 40px; margin-top: 0px;  z-index: 10;">
                        <div class="card-title text-center text-white">
                            <strong class="text-center">LISTA DE ESTUDIOS</strong>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="card-text">
                            <template>
                                <p>Elige un grupo para empezar</p>
                                <br />
                                <div class="row">
                                    <div class="col-xs-6 col-md-6" v-for="i in ListaGruposxUsuario">
                                        <div class="bg-light">
                                            <b-avatar button icon="briefcase" v-on:click="configurar( { ID: 0, ID_SOURCE: 0, ID_GRUPO: i.ACCIONES } )" variant="info" title="Pendiente" class="align-center" size="4em"></b-avatar><br /><h4 class="align-center">{{i.TITULO}}</h4>
                                        </div>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </b-modal>

</div>
<script>
    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: sessionStorage.getItem('ID_USUARIO'),
            USUARIO: sessionStorage.getItem('USUARIO'),
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            ID_SEDE: sessionStorage.getItem('ID_SEDE'),
            ID_GRUPO: sessionStorage.getItem('IMAGE'),
            PLANTILLA: '',
            ID: 0,
            TXT_OBSERVACION: '',
            MODULOS: [],
            CAMPOS: {},
            CAMPO: '',
            show: false,
            value: [],

            ListaGruposxUsuario: [],
            ListaItem: [],
            ListaBandeja: [],
            ListaQueList: [],
            ListaGeneral: [],
            ListaProceso: [],

            Columnas: ['ID', 'TITULO', 'RESULTADO', 'FECHA'],
        },
        computed: {
            availableOptions() {
                return this.options.filter(opt => this.value.indexOf(opt) === -1)
            }
        },
        methods: {
            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },
            pantalla: function (item) {
                this.$bvModal.show(item.PANTALLA);
            },

            configurar: function (item) {
                this.show = true;
                axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                    ID: item.ID,
                    ID_SOURCE: item.ID_SOURCE,
                    ID_GRUPO: item.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 30,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.$bvModal.hide('nuevo');
                        this.iniciar();
                    }
                }).catch(e => {
                });
            },

            iniciar: function () {
                this.show = true;
                axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                    ID: 0,
                    ID_SOURCE: 0,
                    ID_GRUPO: 0,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 31,   // 60
                }).then(response => {
                    if (response.data.length > 0) {
                        this.show = false;
                        let CAMPOS = {};
                        let lista = response.data;
                        for (i in lista) {
                            this.ID = lista[i].ID;
                            this.ID_GRUPO = lista[i].ID_GRUPO;
                        }
                        // Traer item de control del formulario
                        axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                            ID_SEDE: this.ID_SEDE,
                            ID_GRUPO: this.ID_GRUPO,
                            ID_USUARIO: this.ID_USUARIO,
                            TIPO: 32,
                        }).then(response => {
                            if (response.data.length > 0) {
                                this.ListaItem = response.data;
                                // Completar items
                                for (i in lista) {
                                    let columnas = { value_: lista[i].RESULTADO };
                                    columnas['MODULO'] = lista[i].TITULO;
                                    columnas['COLUMNA'] = lista[i].RESULTADO;
                                    switch (lista[i].ACCIONES) {
                                        case 'Text': { columnas['type'] = 'input'; columnas['subtype'] = 'text'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Area': { columnas['type'] = 'input'; columnas['subtype'] = 'area'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Numeric': { columnas['type'] = 'input'; columnas['subtype'] = 'tel'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Date': { columnas['type'] = 'input'; columnas['subtype'] = 'date'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Dropdow': { columnas['type'] = 'select'; columnas['subtype'] = 'select'; columnas['value'] = lista[i].PLANTILLA; break; }
                                        case 'Multi': { columnas['type'] = 'multi'; columnas['subtype'] = 'select'; columnas['value'] = []; break; }
                                        case 'Switch': { columnas['type'] = 'radio'; columnas['subtype'] = 'select'; columnas['value'] = lista[i].PLANTILLA; break; }
                                    }
                                    columnas['ID_CONTROL'] = lista[i].ID_USUARIO;
                                    columnas['NOMBRE'] = lista[i].USUARIO;
                                    if (lista[i].TITULO != '0') {
                                        let Universo = this.MODULOS.filter(x => x.ext == lista[i].TITULO);
                                        if (Universo.length < 1) { this.MODULOS.push({ ext: lista[i].TITULO }); }
                                    }

                                    let item = [];
                                    let listaControl = this.ListaItem.filter(x => x.ID_GRUPO == lista[i].ID_USUARIO && x.ID_USUARIO == 0);
                                    for (var ite in listaControl) {
                                        item.push({ id: listaControl[ite].ID, idControl: listaControl[ite].ID_GRUPO, text: listaControl[ite].TITULO, value: listaControl[ite].TITULO });
                                        columnas['VALIDAR'] = 1;
                                    }
                                    columnas['options'] = item;
                                    columnas['VALIDAR'] = 1;
                                    if (columnas['subtype'] == 'select' && item.length == 0) { columnas['VALIDAR'] = 0; }

                                    if (lista[i].FECHA.length > 0) {
                                        let listaMostrar = lista[i].FECHA.split(",");
                                        for (let ii in listaMostrar) {
                                            let itemsMostrar = listaMostrar[ii].split("=");
                                            let ifItem = [{ value: lista[i].RESULTADO, object: itemsMostrar[0], igual: itemsMostrar[1] }];
                                            columnas['if'] = ifItem;
                                        }
                                    }
                                    CAMPOS[lista[i].RESULTADO] = columnas;
                                }
                                this.CAMPOS = CAMPOS;
                            }
                        }).catch(e => {
                        });
                    }
                }).catch(e => {
                });
            },

            doShow: function (field) {
                if (this.CAMPOS[field].if != undefined) {
                    //alert(this.CAMPOS[field].if)
                    let listaIf = this.CAMPOS[field].if
                    //alert(JSON.stringify(listaIf));
                    for (i in listaIf) {
                        let valor = listaIf[i].object;
                        let valor2 = listaIf[i].igual;
                        let campo = listaIf[i].value;
                        if (this.CAMPOS[valor].value != valor2) {
                            this.CAMPOS[campo].VALIDAR = 0;
                            return false;
                        } else { this.CAMPOS[campo].VALIDAR = 1; }
                    }
                }
                return true;
            },

            generarPlantilla: function () {
                this.show = true;
                let CAMPOS = '';
                let Plan = '';
                let msg = 'Verificar los siguientes campos: ';
                for (var obj in this.CAMPOS) {
                    if (this.CAMPOS[obj].VALIDAR == 1 && (`${this.CAMPOS[obj].value}`.length < 1 || `${this.CAMPOS[obj].value}` == 'Seleccionar' || `${this.CAMPOS[obj].value}` == 'SELECCIONAR')) {
                        msg = msg + " " + `${this.CAMPOS[obj].NOMBRE}`;
                    }
                }

                if (msg.length > 34) {
                    this.mostrarToast({ toast: 'danger', msg: msg });
                    this.show = false;
                } else {
                    for (var obj in this.CAMPOS) {
                        CAMPOS = CAMPOS + `${this.CAMPOS[obj].value_}` + '=|' + `${this.CAMPOS[obj].value}` + ',|';
                        Plan = Plan + `${this.CAMPOS[obj].NOMBRE}` + ':' + `${this.CAMPOS[obj].value}` + '|';
                    }

                    this.PLANTILLA = Plan;
                    axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                        ID: this.ID,
                        ID_SOURCE: this.ID,
                        TITULO: Plan,
                        ID_GRUPO: this.ID_GRUPO,
                        ID_SEDE: this.ID_SEDE,
                        ID_USUARIO: this.ID_USUARIO,
                        CAMPO_3: CAMPOS,
                        TIPO: 33
                    }).then(response => {
                        if (response.data.ID > 0) {
                            this.show = false;
                            this.PLANTILLA = '';
                            this.ID = 0;
                            this.CAMPOS = {};
                            document.location.href = '../Calidad/Gestion';
                        }
                    }).catch(e => {
                    });
                }
            },

            copiarPortaPreventiva: function () {
                this.generarPlantilla();
            },

            GuardarAvance: function () {
                this.show = true;
                let CAMPOS = '';
                let Plan = '';
                for (var obj in this.CAMPOS) {
                    let val = `${this.CAMPOS[obj].value}`;
                    val = val.replace("'", " ");
                    CAMPOS = CAMPOS + `${this.CAMPOS[obj].value_}` + '=|' + val + ',|';
                    Plan = Plan + `${this.CAMPOS[obj].NOMBRE}` + ':' + val + '|';
                }

                this.PLANTILLA = Plan;
                axios.post(this.SERVER_URL + '/api/Formulario/Mantenimiento', {
                    ID: this.ID,
                    ID_SOURCE: this.ID,
                    TITULO: Plan,
                    ID_GRUPO: this.ID_GRUPO,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    CAMPO_3: CAMPOS,
                    TIPO: 39
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.show = false;
                        this.PLANTILLA = '';
                        this.ID = 0;
                        this.CAMPOS = {};
                        document.location.href = '../Calidad/Gestion';
                    }
                }).catch(e => {
                });


            },

            test: function (item) {
                let valor = item.value;
                if (valor != undefined) {
                    let idPadre = 0; let lista = item.options;
                    for (i in lista) {
                        let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == lista[i].id);
                        if (listaItem.length > 0) {
                            for (var obj in this.CAMPOS) {
                                if (`${this.CAMPOS[obj].COLUMNA}` == listaItem[0].PLANTILLA) {    //alert(nuevoControl);
                                    this.CAMPOS[obj].options = [];
                                    this.CAMPOS[obj].VALIDAR = 0;
                                    //let item = [];
                                    //item.push({ id: 10000, idControl: 0, text: 'Seleccionar', value: 'Seleccionar' });
                                    //this.CAMPOS[obj].options = item;
                                    //this.CAMPOS[obj].value = 'Seleccionar';
                                    //this.CAMPOS[obj].value = [];
                                }
                            }
                        }
                        if (lista[i].value == valor) idPadre = lista[i].id;
                    }
                    let listaItem = this.ListaItem.filter(x => x.ID_USUARIO == idPadre);
                    if (listaItem.length > 0) {
                        let nuevoControl = listaItem[0].PLANTILLA;
                        for (var obj in this.CAMPOS) {
                            if (`${this.CAMPOS[obj].COLUMNA}` == nuevoControl) {    //alert(nuevoControl);
                                this.CAMPOS[obj].options = [];
                                this.CAMPOS[obj].VALIDAR = 0;
                                let item = [];

                                for (var ite in listaItem) {
                                    item.push({ id: listaItem[ite].ID, idControl: listaItem[ite].ID_GRUPO, text: listaItem[ite].TITULO, value: listaItem[ite].TITULO });
                                    this.CAMPOS[obj].value = listaItem[ite].TITULO;
                                    this.CAMPOS[obj].VALIDAR = 1;
                                }
                                if (`${this.CAMPOS[obj].type}` == 'multi') {
                                    this.CAMPOS[obj].value = [];
                                }
                                this.CAMPOS[obj].options = item;
                            }
                        }
                    }
                }
            },

            eliminar: function (item) {
                var opcion = confirm("Deseas eliminar el item - " + item.TITULO + " del formulario " + item.RESULTADO);
                if (opcion == true) {
                    axios.post(this.SERVER_URL + '/api/Excel/MantenimientoCarga', {
                        ID: item.ID,
                        ID_USUARIO: this.ID_USUARIO,
                        ID_SEDE: this.ID_SEDE,
                        TIPO: 19,
                    }).then(response => {
                        if (response.data.ID > 0) {
                            this.ListaProceso = this.ListaProceso.filter(x => x.ID != item.ID);
                        }
                    }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });

                } else { this.mostrarToast({ toast: 'warning', msg: 'Cancelado por el usuario' }); }
            },

            listarBandeja: function () {
                axios.post(this.SERVER_URL + '/api/Formulario/Listar', {
                    ID: 0,
                    ID_SOURCE: 0,
                    ID_GRUPO: 0,
                    ID_SEDE: this.ID_SEDE,
                    ID_USUARIO: this.ID_USUARIO,
                    TIPO: 34,   // 60
                }).then(response => {
                    if (response.data.length > 0) {
                        this.ListaBandeja = response.data;
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            listarGruposxUsuario: function () {
                //this.show = true;
                axios.post(this.SERVER_URL + '/api/Grupo/ListarGruposxPrograma', {
                    ID: this.ID_USUARIO,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                    TIPO: 10,
                }).then(response => {
                    if (response.data.length > 0) { this.ListaGruposxUsuario = response.data; }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' }); });
            },

            listarGraficoGeneral: function () {
                this.ListaGeneral = []; this.graficoGeneral = []; this.graficoAvance2 = []; this.ListaProceso = [];

                axios.post(this.SERVER_URL + '/api/Excel/ListarCargasxPrograma', {
                    ID: this.ID,
                    ID_USUARIO: this.ID_USUARIO,
                    ID_SEDE: this.ID_SEDE,
                    TIPO: 17,
                }).then(response => {
                    if (response.data.length > 0) {
                        let lista = response.data;
                        let Pendiente = []; let Proceso = []; let Terminado = []; let Monitores = []; let Estudios = [];
                        Pendiente = lista.filter(x => x.ACCIONES == 'PENDIENTE');
                        Proceso = lista.filter(x => x.ACCIONES == 'PROCESO');
                        Terminado = lista.filter(x => x.ACCIONES == 'TERMINADO');

                        map = new Map();
                        for (let i of Pendiente) {
                            if (!map.has(i.RESULTADO)) {
                                map.set(i.RESULTADO, true);
                                Estudios.push({ ESTUDIO: i.RESULTADO });
                            }
                        }           //  alert(JSON.stringify(`${lista[items].ESTADO}`));

                        let uno = []; let grupos = { INC: 0 }; let registros = { INC: 0 };    //alert(i.ESTUDIO);
                        for (let i of Estudios) {
                            grupos = {};
                            registros = {};
                            let filas = lista.filter(x => x.RESULTADO == i.ESTUDIO);
                            if (filas.length > 0) {
                                grupos['GRAFICA'] = filas.length; //registros[i.ESTUDIO] = filas.length;
                                grupos['ESTUDIO'] = i.ESTUDIO;
                                uno.push(grupos);
                            }
                        }
                        this.ListaProceso = Proceso;
                        this.ListaGeneral.push({
                            PENDIENTE: Pendiente.length,
                            PROCESO: Proceso.length,
                            TERMINADO: Terminado.length,
                            TOTAL: lista.length,
                            MONITORES: Monitores.length,
                            ESTUDIOS: uno,
                            //ESTUDIOS: [
                            //    { ESTUDIO: "176 - TOYOTA VENTAS PERU", GRAFICA: { "NICOLAS": 33, "NANCY": 122 } },
                            //            { ESTUDIO: "175 - TOYOTA SERVICIOS PERU", GRAFICA: { "NICOLAS": 23, "NANCY": 10 } },
                            //    { ESTUDIO: "63 - IPSOS BCP_PYME SIN CARTERAS", GRAFICA: { "NICOLAS": 3, "NANCY": 2 } }]


                        });
                    }
                }).catch(e => { this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ... 2' }); });
            }
        }
    })
    app.listarGruposxUsuario();
    app.listarBandeja();
    app.listarGraficoGeneral();
</script>
