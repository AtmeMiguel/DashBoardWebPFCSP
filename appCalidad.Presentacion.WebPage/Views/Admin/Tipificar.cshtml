
@{
    string Title = "ADMIN | Control";
    ViewBag.Title = Title;
    Layout = "~/Views/Shared/_ImageUpload.cshtml";
}

<script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
@*<script src="https://cdn.jsdelivr.net/npm/vue"></script>*@
<!-- Quill JS Vue -->
<script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.6/dist/vue-quill-editor.js"></script>
<!-- Include stylesheet -->
<link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
<link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
<link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">

<div id="app">
    <div class="containerClaro">
        <br />
        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="card redondoCardLight  cajaGrisClaroDelgado">
                    <div class="card-body">
                        <h2>Controles del servicio</h2>
                        <hr />
                        <b-row style=" height: 600px; overflow: scroll; ">
                            <b-col v-for="item in Lista" :key="item.VALUE" md="6" class="py-4 text-left">
                                <b-button pill variant="info" v-on:click="elegirItemxControl({ ID_CONTROL: item.ID })"><b-avatar variant="outline-info" :id="`popover-1-${item.VALUE}`" button icon="pencil-square" size="2rem" class="align-center btn btn-outline-info"></b-avatar>{{ item.VALUE }}</b-button>
                                <b-popover :target="`popover-1-${item.VALUE}`" :placement="item.VALUE" variant="warning" :title="`${item.VALUE}`"
                                           triggers="hover focus" data-html="true">

                                    <b-form>
                                        <b-form-group id="input-group-2" label="Nombre control:" label-for="input-2">
                                            <b-form-input id="input-2"
                                                          v-model="CONTROL" 
                                                          required></b-form-input>
                                        </b-form-group>
                                    </b-form>

                                    <div class="text-center"><b-button pill variant="info" v-on:click="actualizarControl({ID: item.ID, VALUE: CONTROL })">Guardar</b-button></div>
                                </b-popover>
                            </b-col>
                        </b-row>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6">
                <div class="card redondoCardLight  cajaGrisClaroDelgado">
                    <div class="card-body">

                        <div v-for="(q, name) of CAMPOS">
                            <br />
                            <div class="text-right">
                                <template v-if="q.ID_DEPENDENCIA>0">
                                    <b-button pill variant="light" v-on:click="elegirItem({ID: q.ID_DEPENDENCIA, TIPO:15})"><b-avatar title="Back" button icon="backspace" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>Retroceder {{ q.ID_DEPENDENCIA }}- {{q.ID_CONTROL_ANTERIOR}}</b-button>
                                </template>

                                <b-button pill variant="light" v-on:click="pantalla({PANTALLA: 'editarItem'}), ID_CONTROL= q.ID_CONTROL, ID_DEPENDENCIA= q.ID_DEPENDENCIA, ID=0, VALUE='', DEPENDENCIA='', OBSERVACION='', SPEECH='', DESCARTES= '', ACCIONES=''"><b-avatar title="Agregar" button icon="plus" size="2rem" variant="light" class="align-center btn-outline-info"></b-avatar>Agregar{{ q.ID_CONTROL }}-{{q.ID_DEPENDENCIA}}</b-button>
                            </div>
                            <br />
                            <div v-for="(lista, index) of q">
                                <template v-for="(li, index) of lista" v-if="li.ID_CONTROL == q.ID_CONTROL">

                                    <b-row>
                                        <b-col col lg="2">{{ li.ID }}</b-col>
                                        <b-col col lg="2">{{ li.ID_DEPENDENCIA }}</b-col>
                                        <b-col col lg="5">{{ li.VALUE }}</b-col>
                                        <b-col col lg="1">
                                            <b-button pill variant="light" v-on:click="pantalla({PANTALLA: 'editarItem'}), ID =li.ID, ID_CONTROL= q.ID_CONTROL, ID_DEPENDENCIA= q.ID_DEPENDENCIA, VALUE=li.VALUE, DEPENDENCIA=li.DEPENDENCIA, OBSERVACION=li.OBSERVACION, SPEECH=li.SPEECH, DESCARTES= li.DESCARTES, ACCIONES=li.ACCIONES  ">
                                                <b-avatar title="editar" variant="light" button icon="card-list" size="2rem" class="align-center btn btn-outline-info"></b-avatar>
                                            </b-button>

                                        </b-col>


                                        <b-col col lg="1">
                                            <b-button pill :id="`popover-1-${li.VALUE}`" variant="light"><b-avatar title="Vista" variant="light" button icon="card-list" size="2rem" class="align-center btn btn-outline-info"></b-avatar></b-button>
                                            <b-popover :target="`popover-1-${li.VALUE}`" :placement="li.VALUE" variant="warning" :title="`${li.VALUE}`"
                                                       triggers="hover focus" data-html="true" :content="`${li.ACCIONES}`">
                                                <template>
                                                    <p v-if="li.OBSERVACION">Observación : {{li.OBSERVACION}}<br /></p>
                                                    <p v-if="li.SPEECH">Campo 01 : {{li.SPEECH}}<br /></p>
                                                    <p v-if="li.DESCARTES">Campo 02 : {{li.DESCARTES}}<br /></p>
                                                    <p v-if="li.ACCIONES">Campo 03 : {{li.ACCIONES}}<br /></p>
                                                </template>
                                                <template v-if="li.DEPENDENCIA != 'NO'">
                                                    <br />
                                                    <p>Detalle hijo: {{li.DEPENDENCIA}}</p>
                                                    <br />
                                                    <div class="text-center">
                                                        <b-button pill variant="info" v-on:click="elegirItem({ID: li.ID, TIPO:14})">
                                                            {{li.ID}}  {{q.ID_CONTROL}}
                                                        </b-button>
                                                    </div>
                                                </template>
                                            </b-popover>
                                        </b-col>
                                        <b-col col lg="1">
                                            <b-button pill :id="`popover-1-${li.VALUE}-e`" variant="light"><b-avatar title="Eliminar" variant="light" button icon="trash" size="2rem" class="align-center btn btn-outline-danger"></b-avatar></b-button>
                                            <b-popover :target="`popover-1-${li.VALUE}-e`" :placement="li.VALUE" variant="danger" :title="`Eliminar item `"
                                                       triggers="hover focus" data-html="true" :content="`${li.ACCIONES}`">
                                                ¿Está seguro de que desea eliminar?<br /><br /> <b>{{li.VALUE}}</b><br /><br />
                                                <div class="text-center"><b-button pill variant="danger" v-on:click="eliminar({ID: li.ID, ID_CONTROL: q.ID_CONTROL})">Sí, eliminar</b-button></div>
                                            </b-popover>
                                        </b-col>
                                    </b-row>

                                </template>
                            </div>
                            <br />                        <hr />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <b-modal id="editarItem" size="xl" data-html="true" hide-footer hide-header>
        <div  class="row">
            <div class="col-sm-6 col-md-6">

                <b-form>
                    <b-form-group id="input-group-2" label="Titulo:" label-for="input-2">
                        <b-form-input id="input-2"
                                      v-model="VALUE"
                                      required></b-form-input>
                    </b-form-group>
                    <b-form-group id="input-group-2" label="Campo 1:" label-for="input-2">
                        <b-form-input id="input-2"
                                      v-model="SPEECH"
                                      required></b-form-input>
                    </b-form-group>
                </b-form>

            </div>
            <div class="col-sm-6 col-md-6">
                <b-form>
                    <b-form-group id="input-group-2" label="Descripción:" label-for="input-2">
                        <b-form-input id="input-2"
                                      v-model="DEPENDENCIA"
                                      required></b-form-input>
                    </b-form-group>
                    <b-form-group id="input-group-2" label="Campo 2" label-for="input-2">
                        <b-form-input id="input-2"
                                      v-model="DESCARTES"
                                      required></b-form-input>
                    </b-form-group>
                </b-form>
            </div>

            <div  scr class="col-sm-12 col-md-12">
                <b-form>
                    <div style="height:350px; overflow-y:auto;">
                        <b-form-group id="input-group-2" label="Campo 3" label-for="input-2">
                            <quill-editor ref="quillEditor"
                                          class="editor"
                                          v-model="ACCIONES"
                                          :options="editorOption"
                                          @@blur="onEditorBlur($event)"
                                          @@focus="onEditorFocus($event)"
                                          @@ready="onEditorReady($event)" />
                            <br>
                            <div class="content ql-editor" v-html="ACCIONES"></div>
                            
                        </b-form-group>
                    </div>
                    
                    <b-form-group id="input-group-2" label="Campo 1:" label-for="input-2">
                        <b-form-input id="input-2"
                                      v-model="OBSERVACION"
                                      required></b-form-input>
                    </b-form-group>
                </b-form>
                <div class="text-right">
                    <b-button variant="outline-info" pill v-on:click="insertarItem()" ><b-avatar variant="outline-info" icon="pencil-square" size="2rem"></b-avatar>Guardar</b-button>
                </div>

            </div>
        </div>
    </b-modal>

</div>


<script>
    Vue.use(VueQuillEditor)
    var app = new Vue({
        el: '#app',
        data: {
            ID_USUARIO: sessionStorage.getItem('ID_USUARIO'),
            SERVER_URL: sessionStorage.getItem('SERVER_URL'),
            ID_SEDE: sessionStorage.getItem('ID_SEDE'),
            SITE: '',
            ID: 0,
            ID_SERVICIO: 16,
            ID_CONTROL: 0,
            CONTROL: '',
            ID_DEPENDENCIA: 0,

            VALUE: '',
            DEPENDENCIA: '',
            OBSERVACION: '',
            SPEECH: '',
            DESCARTES: '',
            ACCIONES: '',

            Lista: [],
            ListaItems: {},
            CAMPOS: {},
            columnas: [
                'ID', { key: 'VALUE', label: 'TITULO' }, 'ACCIONES', 'USUARIO', 'FECHA'
            ],
            message: 'Hi from Vue.',
            editorOption: {
                theme: 'snow'
            }
        },
        computed: {
            editor() {
                return this.$refs.quillEditor.quill
            }
        },
        mounted() {
           //console.log('this is quill instance object', this.editor)
        },
        methods: {
            onEditorBlur(quill) {
                
            },
            onEditorFocus(quill) {
        
            },
            onEditorReady(quill) {
             
            },


            ocultarPantalla: function (form) {
                this.$bvModal.hide(form.PANTALLA);
            },
            pantalla: function (form) {
                this.$bvModal.show(form.PANTALLA);
            },
            mostrarToast(variant = null) {
                this.$bvToast.toast(variant.msg, {
                    title: `Alerta de sistema`,
                    variant: variant.toast,
                    solid: true
                })
            },
            elegirItemxControl: function (item) {
                this.CAMPOS = {};
                axios.post(this.SERVER_URL + '/api/Opciones/ListarOpcionesCRM', {
                    ID_CONTROL: item.ID_CONTROL,
                    ID_GRUPO: this.ID_SERVICIO,
                    TIPO: 12,
                }).then(response => {                                   //alert(JSON.stringify(lista));                             this.ID = lista[i].ID;
                    if (response.data.length > 0) {
                        let lista = response.data;
                        let controles = []; let CAMPOS = {}; const map = new Map();
                        for (let control of lista) {
                            if (!map.has(control.ID_CONTROL)) {
                                map.set(control.ID_CONTROL, true);
                                controles.push({ idControl: control.ID_CONTROL });
                            }
                        }

                        for (let c in controles) {
                            let CONTROL = {};
                            let listaxControl = lista.filter(li => li.ID_CONTROL == controles[c].idControl);
                            let FILAS = {};
                            for (i in listaxControl) {
                                let filas = { ID: listaxControl[i].ID };
                                filas['ID_CONTROL'] = listaxControl[i].ID_CONTROL;
                                filas['VALUE'] = listaxControl[i].VALUE;
                                filas['OBSERVACION'] = listaxControl[i].OBSERVACION;
                                filas['SPEECH'] = listaxControl[i].SPEECH;
                                filas['DESCARTES'] = listaxControl[i].DESCARTES;
                                filas['ACCIONES'] = listaxControl[i].ACCIONES;
                                filas['DEPENDENCIA'] = listaxControl[i].DEPENDENCIA;
                                filas['ID_DEPENDENCIA'] = listaxControl[i].ID_DEPENDENCIA;
                                FILAS['ID_DEPENDENCIA'] = listaxControl[i].ID_DEPENDENCIA;
                                FILAS[listaxControl[i].ID] = filas;
                            }
                            CONTROL['ID_DEPENDENCIA'] = FILAS['ID_DEPENDENCIA'];
                            CONTROL['ID_CONTROL_ANTERIOR'] = item.ID_CONTROL;
                            CONTROL['ID_CONTROL'] = controles[c].idControl;
                            CONTROL['LISTA'] = FILAS;

                            CAMPOS[controles[c].idControl] = CONTROL;
                        }
                        this.CAMPOS = CAMPOS;
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },

            elegirItem: function (item) {
                this.CAMPOS = {};
                axios.post(this.SERVER_URL + '/api/Opciones/ListarOpcionesCRM', {
                    ID: item.ID,
                    ID_GRUPO: this.ID_SERVICIO,
                    TIPO: item.TIPO,
                }).then(response => {                                   //alert(JSON.stringify(lista));                             this.ID = lista[i].ID;
                    if (response.data.length > 0) {
                        let lista = response.data;
                        let controles = []; let CAMPOS = {}; const map = new Map();
                        for (let control of lista) {
                            if (!map.has(control.ID_CONTROL)) {
                                map.set(control.ID_CONTROL, true);
                                controles.push({ idControl: control.ID_CONTROL });
                            }
                        }
                        for (let c in controles) {
                            let CONTROL = {};
                            let listaxControl = lista.filter(li => li.ID_CONTROL == controles[c].idControl);
                            let FILAS = {};
                            for (i in listaxControl) {
                                let filas = { ID: listaxControl[i].ID };
                                filas['ID_CONTROL'] = listaxControl[i].ID_CONTROL;
                                filas['VALUE'] = listaxControl[i].VALUE;
                                filas['OBSERVACION'] = listaxControl[i].OBSERVACION;
                                filas['SPEECH'] = listaxControl[i].SPEECH;
                                filas['DESCARTES'] = listaxControl[i].DESCARTES;
                                filas['ACCIONES'] = listaxControl[i].ACCIONES;
                                filas['DEPENDENCIA'] = listaxControl[i].DEPENDENCIA;
                                filas['ID_DEPENDENCIA'] = listaxControl[i].ID_DEPENDENCIA;
                                FILAS['ID_DEPENDENCIA'] = listaxControl[i].ID_DEPENDENCIA;
                                FILAS[listaxControl[i].ID] = filas;
                            }
                            CONTROL['ID_DEPENDENCIA'] = FILAS['ID_DEPENDENCIA'];
                            CONTROL['ID_CONTROL_ANTERIOR'] = item.ID_CONTROL;
                            CONTROL['ID_CONTROL'] = controles[c].idControl;
                            CONTROL['LISTA'] = FILAS;

                            CAMPOS[controles[c].idControl] = CONTROL;
                        }
                        this.CAMPOS = CAMPOS;
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },
            actualizarControl: function (item) {
                axios.post(this.SERVER_URL + '/api/Opciones/AdministrarOpcionesCRM', {
                    ID: item.ID,
                    VALUE: this.CONTROL,
                    USUARIO: this.USUARIO,
                    ID_SERVICIO: this.ID_SERVICIO,
                    TIPO: 11,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.Lista = this.Lista.filter(x => x.ID != item.ID);
                        this.Lista.push({ ID: item.ID, VALUE: this.CONTROL });
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },
            insertarItem: function () {
                axios.post(this.SERVER_URL + '/api/Opciones/AdministrarOpcionesCRM', {
                    ID: this.ID,
                    ID_CONTROL: this.ID_CONTROL,
                    VALUE: this.VALUE,
                    DEPENDENCIA: this.DEPENDENCIA,
                    ID_DEPENDENCIA: this.ID_DEPENDENCIA,
                    OBSERVACION: this.OBSERVACION,
                    ID_SERVICIO: this.ID_SERVICIO,
                    SPEECH: this.SPEECH,
                    DESCARTES: this.DESCARTES,
                    ACCIONES: this.ACCIONES,

                    USUARIO: this.USUARIO,
                    ID_SERVICIO: this.ID_SERVICIO,
                    TIPO: 16,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.elegirItemxControl({ ID_CONTROL: this.ID_CONTROL });
                        this.ocultarPantalla({ PANTALLA: 'editarItem'});
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            }, 
            eliminar: function (item) {
                axios.post(this.SERVER_URL + '/api/Opciones/AdministrarOpcionesCRM', {
                    ID: item.ID,
                    TIPO: 17,
                }).then(response => {
                    if (response.data.ID > 0) {
                        this.elegirItemxControl({ ID_CONTROL: item.ID_CONTROL });
                        this.mostrarToast({ toast: 'success', msg: 'Guardado correctamente' });
                    } else if (response.data.ID == 0) {
                        this.mostrarToast({ toast: 'danger', msg: 'Ocurrio un error... Intentar nuevamente' });
                    }
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            },
            listar: function () {         //  alert(JSON.stringify(this.ListaMaestra));
                axios.post(this.SERVER_URL + '/api/Opciones/ListarOpcionesCRM', {
                    ID_GRUPO: this.ID_SERVICIO,
                    TIPO: 10,
                }).then(response => {
                    this.Lista = response.data;
                    this.totalRows = this.Lista.length;
                }).catch(e => {
                    this.mostrarToast({ toast: 'warning', msg: 'Error en la conexión ...' });
                });
            }
        }
    })
    app.listar();
</script>




